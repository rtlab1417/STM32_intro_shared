
9-IIC_AHT20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  080080f8  080080f8  000090f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800857c  0800857c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800857c  0800857c  0000957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008584  08008584  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008584  08008584  00009584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008588  08008588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800858c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001d4  08008760  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08008760  0000a3e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a087  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdc  00000000  00000000  00014284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00015f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a2  00000000  00000000  00016948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018435  00000000  00000000  000170ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7d0  00000000  00000000  0002f51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863f3  00000000  00000000  0003ccef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c30e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce0  00000000  00000000  000c3128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c6e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080080dc 	.word	0x080080dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080080dc 	.word	0x080080dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT_Init>:
 * 2. Read I2C
 * 3. check if the 3 bit is 1 == okay, if 0 then do something as instructed.
 *
 */

void AHT_Init(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
	uint8_t readBuffer;
	HAL_Delay(40);
 8001096:	2028      	movs	r0, #40	@ 0x28
 8001098:	f000 fbd4 	bl	8001844 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer, 1, HAL_MAX_DELAY);
 800109c:	1dfa      	adds	r2, r7, #7
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2170      	movs	r1, #112	@ 0x70
 80010a8:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <AHT_Init+0x54>)
 80010aa:	f001 f899 	bl	80021e0 <HAL_I2C_Master_Receive>
	if ((readBuffer & 0x08) == 0x00) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d110      	bne.n	80010da <AHT_Init+0x4a>
		uint8_t sendBuffer[3] = {0xBE, 0x08, 0x00};	// see datasheet
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <AHT_Init+0x58>)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	8019      	strh	r1, [r3, #0]
 80010c2:	3302      	adds	r3, #2
 80010c4:	0c12      	lsrs	r2, r2, #16
 80010c6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2303      	movs	r3, #3
 80010d2:	2170      	movs	r1, #112	@ 0x70
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <AHT_Init+0x54>)
 80010d6:	f000 ff85 	bl	8001fe4 <HAL_I2C_Master_Transmit>

	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001f0 	.word	0x200001f0
 80010e8:	080080f8 	.word	0x080080f8

080010ec <AHT20_Read>:

void AHT20_Read(float *Temperature, float *Humidity){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00};	// read command
 80010f6:	4a33      	ldr	r2, [pc, #204]	@ (80011c4 <AHT20_Read+0xd8>)
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	4611      	mov	r1, r2
 8001100:	8019      	strh	r1, [r3, #0]
 8001102:	3302      	adds	r3, #2
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	701a      	strb	r2, [r3, #0]
	uint8_t readBuffer[6];	// read buffer

	HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 8001108:	f107 0210 	add.w	r2, r7, #16
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	2170      	movs	r1, #112	@ 0x70
 8001116:	482c      	ldr	r0, [pc, #176]	@ (80011c8 <AHT20_Read+0xdc>)
 8001118:	f000 ff64 	bl	8001fe4 <HAL_I2C_Master_Transmit>
	HAL_Delay(75);
 800111c:	204b      	movs	r0, #75	@ 0x4b
 800111e:	f000 fb91 	bl	8001844 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, readBuffer, 6, HAL_MAX_DELAY);
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2306      	movs	r3, #6
 800112e:	2170      	movs	r1, #112	@ 0x70
 8001130:	4825      	ldr	r0, [pc, #148]	@ (80011c8 <AHT20_Read+0xdc>)
 8001132:	f001 f855 	bl	80021e0 <HAL_I2C_Master_Receive>
	if ((readBuffer[0] & 0x80) == 0x00) {
 8001136:	7a3b      	ldrb	r3, [r7, #8]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	db3e      	blt.n	80011bc <AHT20_Read+0xd0>
		uint32_t data = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
		// get humudity data in raw
		data = ((uint32_t)readBuffer[1]<<12) + ((uint32_t)readBuffer[2]<<4) + ((uint32_t)readBuffer[3]>>4);
 8001142:	7a7b      	ldrb	r3, [r7, #9]
 8001144:	031a      	lsls	r2, r3, #12
 8001146:	7abb      	ldrb	r3, [r7, #10]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	7afa      	ldrb	r2, [r7, #11]
 800114e:	0912      	lsrs	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	4413      	add	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
		*Humidity = data * 100.0f / (1 <<20);
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff fdbc 	bl	8000cd4 <__aeabi_ui2f>
 800115c:	4603      	mov	r3, r0
 800115e:	491b      	ldr	r1, [pc, #108]	@ (80011cc <AHT20_Read+0xe0>)
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe0f 	bl	8000d84 <__aeabi_fmul>
 8001166:	4603      	mov	r3, r0
 8001168:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff febd 	bl	8000eec <__aeabi_fdiv>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	601a      	str	r2, [r3, #0]

		// get temperature data in raw
		data = (((uint32_t)readBuffer[3] & 0x0F) <<16) + ((uint32_t)readBuffer[4]<<8) + (uint32_t)readBuffer[5];
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	4413      	add	r3, r2
 8001188:	7b7a      	ldrb	r2, [r7, #13]
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]
		*Temperature = data * 200.0f / (1 <<20) - 50;
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff fda0 	bl	8000cd4 <__aeabi_ui2f>
 8001194:	4603      	mov	r3, r0
 8001196:	490e      	ldr	r1, [pc, #56]	@ (80011d0 <AHT20_Read+0xe4>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fdf3 	bl	8000d84 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
 80011a0:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fea1 	bl	8000eec <__aeabi_fdiv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4909      	ldr	r1, [pc, #36]	@ (80011d4 <AHT20_Read+0xe8>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fcde 	bl	8000b70 <__aeabi_fsub>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
	}



}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	080080fc 	.word	0x080080fc
 80011c8:	200001f0 	.word	0x200001f0
 80011cc:	42c80000 	.word	0x42c80000
 80011d0:	43480000 	.word	0x43480000
 80011d4:	42480000 	.word	0x42480000

080011d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_GPIO_Init+0x40>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <MX_GPIO_Init+0x40>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_GPIO_Init+0x40>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_GPIO_Init+0x40>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <MX_GPIO_Init+0x40>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <MX_GPIO_Init+0x40>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000

0800121c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_I2C1_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <MX_I2C1_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_I2C1_Init+0x50>)
 8001228:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <MX_I2C1_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_I2C1_Init+0x50>)
 800123a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800123e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_I2C1_Init+0x50>)
 800125a:	f000 fd7f 	bl	8001d5c <HAL_I2C_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 f8c5 	bl	80013f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001f0 	.word	0x200001f0
 8001270:	40005400 	.word	0x40005400
 8001274:	000186a0 	.word	0x000186a0

08001278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a15      	ldr	r2, [pc, #84]	@ (80012e8 <HAL_I2C_MspInit+0x70>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d123      	bne.n	80012e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_I2C_MspInit+0x74>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <HAL_I2C_MspInit+0x74>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <HAL_I2C_MspInit+0x74>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b0:	23c0      	movs	r3, #192	@ 0xc0
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b4:	2312      	movs	r3, #18
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <HAL_I2C_MspInit+0x78>)
 80012c4:	f000 fbc6 	bl	8001a54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_I2C_MspInit+0x74>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <HAL_I2C_MspInit+0x74>)
 80012ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d2:	61d3      	str	r3, [r2, #28]
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_I2C_MspInit+0x74>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010c00 	.word	0x40010c00

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b090      	sub	sp, #64	@ 0x40
 80012f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f000 fa41 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 f83d 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001302:	f7ff ff69 	bl	80011d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001306:	f7ff ff89 	bl	800121c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800130a:	f000 f99f 	bl	800164c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AHT_Init();
 800130e:	f7ff febf 	bl	8001090 <AHT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 AHT20_Read(&temperature, &humidity);
 8001312:	4916      	ldr	r1, [pc, #88]	@ (800136c <main+0x78>)
 8001314:	4816      	ldr	r0, [pc, #88]	@ (8001370 <main+0x7c>)
 8001316:	f7ff fee9 	bl	80010ec <AHT20_Read>
	 sprintf(message, "Temperature: %.1f C, Humidity: %.1f %%\r\n", temperature, humidity);
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <main+0x7c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f882 	bl	8000428 <__aeabi_f2d>
 8001324:	4604      	mov	r4, r0
 8001326:	460d      	mov	r5, r1
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <main+0x78>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f87b 	bl	8000428 <__aeabi_f2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	1d38      	adds	r0, r7, #4
 8001338:	e9cd 2300 	strd	r2, r3, [sp]
 800133c:	4622      	mov	r2, r4
 800133e:	462b      	mov	r3, r5
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <main+0x80>)
 8001342:	f003 fa99 	bl	8004878 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff01 	bl	8000150 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	1d39      	adds	r1, r7, #4
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	4807      	ldr	r0, [pc, #28]	@ (8001378 <main+0x84>)
 800135a:	f002 f993 	bl	8003684 <HAL_UART_Transmit>

	 HAL_Delay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001362:	f000 fa6f 	bl	8001844 <HAL_Delay>
	 AHT20_Read(&temperature, &humidity);
 8001366:	bf00      	nop
 8001368:	e7d3      	b.n	8001312 <main+0x1e>
 800136a:	bf00      	nop
 800136c:	20000248 	.word	0x20000248
 8001370:	20000244 	.word	0x20000244
 8001374:	08008100 	.word	0x08008100
 8001378:	20000250 	.word	0x20000250

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	@ 0x40
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	2228      	movs	r2, #40	@ 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fad9 	bl	8004942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2310      	movs	r3, #16
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fd06 	bl	8002dc4 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013be:	f000 f818 	bl	80013f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c2:	230f      	movs	r3, #15
 80013c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 ff74 	bl	80032c8 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013e6:	f000 f804 	bl	80013f2 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3740      	adds	r7, #64	@ 0x40
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f6:	b672      	cpsid	i
}
 80013f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fa:	bf00      	nop
 80013fc:	e7fd      	b.n	80013fa <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4a14      	ldr	r2, [pc, #80]	@ (800145c <HAL_MspInit+0x5c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_MspInit+0x5c>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <HAL_MspInit+0x5c>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_MspInit+0x5c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_MspInit+0x60>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <HAL_MspInit+0x60>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <UsageFault_Handler+0x4>

0800148c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f9aa 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <_kill>:

int _kill(int pid, int sig)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014d4:	f003 fa88 	bl	80049e8 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	2216      	movs	r2, #22
 80014dc:	601a      	str	r2, [r3, #0]
  return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_exit>:

void _exit (int status)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f2:	f04f 31ff 	mov.w	r1, #4294967295
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffe7 	bl	80014ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <_exit+0x12>

08001500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
  }

  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e009      	b.n	8001560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf1      	blt.n	800154c <_write+0x12>
  }
  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_close>:

int _close(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001598:	605a      	str	r2, [r3, #4]
  return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <_isatty>:

int _isatty(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f003 f9f0 	bl	80049e8 <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20005000 	.word	0x20005000
 8001634:	00000400 	.word	0x00000400
 8001638:	2000024c 	.word	0x2000024c
 800163c:	200003e8 	.word	0x200003e8

08001640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	@ (800169c <MX_USART2_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_USART2_UART_Init+0x4c>)
 8001684:	f001 ffae 	bl	80035e4 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f7ff feb0 	bl	80013f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000250 	.word	0x20000250
 800169c:	40004400 	.word	0x40004400

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <HAL_UART_MspInit+0x88>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d12f      	bne.n	8001720 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <HAL_UART_MspInit+0x8c>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_UART_MspInit+0x8c>)
 80016c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ca:	61d3      	str	r3, [r2, #28]
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <HAL_UART_MspInit+0x8c>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <HAL_UART_MspInit+0x8c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a13      	ldr	r2, [pc, #76]	@ (800172c <HAL_UART_MspInit+0x8c>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_UART_MspInit+0x8c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f0:	2304      	movs	r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <HAL_UART_MspInit+0x90>)
 8001704:	f000 f9a6 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001708:	2308      	movs	r3, #8
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <HAL_UART_MspInit+0x90>)
 800171c:	f000 f99a 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004400 	.word	0x40004400
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001734:	f7ff ff84 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480b      	ldr	r0, [pc, #44]	@ (8001768 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800173a:	490c      	ldr	r1, [pc, #48]	@ (800176c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800173c:	4a0c      	ldr	r2, [pc, #48]	@ (8001770 <LoopFillZerobss+0x16>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001750:	4c09      	ldr	r4, [pc, #36]	@ (8001778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f003 f949 	bl	80049f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001762:	f7ff fdc7 	bl	80012f4 <main>
  bx lr
 8001766:	4770      	bx	lr
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001770:	0800858c 	.word	0x0800858c
  ldr r2, =_sbss
 8001774:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001778:	200003e8 	.word	0x200003e8

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_Init+0x28>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <HAL_Init+0x28>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f92b 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fe30 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f935 	bl	8001a3a <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 f90b 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	@ (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000000 	.word	0x20000000
 8001804:	20000008 	.word	0x20000008
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_IncTick+0x1c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_IncTick+0x20>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a03      	ldr	r2, [pc, #12]	@ (800182c <HAL_IncTick+0x20>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000008 	.word	0x20000008
 800182c:	20000298 	.word	0x20000298

08001830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b02      	ldr	r3, [pc, #8]	@ (8001840 <HAL_GetTick+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000298 	.word	0x20000298

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fff0 	bl	8001830 <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffe0 	bl	8001830 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff90 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff49 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff5e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffb0 	bl	80019a8 <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b08b      	sub	sp, #44	@ 0x2c
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e169      	b.n	8001d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8158 	bne.w	8001d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a9a      	ldr	r2, [pc, #616]	@ (8001cf4 <HAL_GPIO_Init+0x2a0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d05e      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001a90:	4a98      	ldr	r2, [pc, #608]	@ (8001cf4 <HAL_GPIO_Init+0x2a0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d875      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001a96:	4a98      	ldr	r2, [pc, #608]	@ (8001cf8 <HAL_GPIO_Init+0x2a4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d058      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001a9c:	4a96      	ldr	r2, [pc, #600]	@ (8001cf8 <HAL_GPIO_Init+0x2a4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d86f      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a96      	ldr	r2, [pc, #600]	@ (8001cfc <HAL_GPIO_Init+0x2a8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d052      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001aa8:	4a94      	ldr	r2, [pc, #592]	@ (8001cfc <HAL_GPIO_Init+0x2a8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d869      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aae:	4a94      	ldr	r2, [pc, #592]	@ (8001d00 <HAL_GPIO_Init+0x2ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d04c      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001ab4:	4a92      	ldr	r2, [pc, #584]	@ (8001d00 <HAL_GPIO_Init+0x2ac>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d863      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aba:	4a92      	ldr	r2, [pc, #584]	@ (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d046      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001ac0:	4a90      	ldr	r2, [pc, #576]	@ (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d85d      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d82a      	bhi.n	8001b20 <HAL_GPIO_Init+0xcc>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d859      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001ace:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <HAL_GPIO_Init+0x80>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b29 	.word	0x08001b29
 8001adc:	08001b3b 	.word	0x08001b3b
 8001ae0:	08001b7d 	.word	0x08001b7d
 8001ae4:	08001b83 	.word	0x08001b83
 8001ae8:	08001b83 	.word	0x08001b83
 8001aec:	08001b83 	.word	0x08001b83
 8001af0:	08001b83 	.word	0x08001b83
 8001af4:	08001b83 	.word	0x08001b83
 8001af8:	08001b83 	.word	0x08001b83
 8001afc:	08001b83 	.word	0x08001b83
 8001b00:	08001b83 	.word	0x08001b83
 8001b04:	08001b83 	.word	0x08001b83
 8001b08:	08001b83 	.word	0x08001b83
 8001b0c:	08001b83 	.word	0x08001b83
 8001b10:	08001b83 	.word	0x08001b83
 8001b14:	08001b83 	.word	0x08001b83
 8001b18:	08001b31 	.word	0x08001b31
 8001b1c:	08001b45 	.word	0x08001b45
 8001b20:	4a79      	ldr	r2, [pc, #484]	@ (8001d08 <HAL_GPIO_Init+0x2b4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b26:	e02c      	b.n	8001b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e029      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	3304      	adds	r3, #4
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e024      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e01f      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e01a      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b56:	2304      	movs	r3, #4
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e013      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	611a      	str	r2, [r3, #16]
          break;
 8001b6e:	e009      	b.n	8001b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	615a      	str	r2, [r3, #20]
          break;
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          break;
 8001b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2bff      	cmp	r3, #255	@ 0xff
 8001b88:	d801      	bhi.n	8001b8e <HAL_GPIO_Init+0x13a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_Init+0x13e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	@ 0xff
 8001b98:	d802      	bhi.n	8001ba0 <HAL_GPIO_Init+0x14c>
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x152>
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	210f      	movs	r1, #15
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	6a39      	ldr	r1, [r7, #32]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80b1 	beq.w	8001d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b4a      	ldr	r3, [pc, #296]	@ (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <HAL_GPIO_Init+0x2bc>)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a40      	ldr	r2, [pc, #256]	@ (8001d14 <HAL_GPIO_Init+0x2c0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_GPIO_Init+0x1ec>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00d      	beq.n	8001c3c <HAL_GPIO_Init+0x1e8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a3e      	ldr	r2, [pc, #248]	@ (8001d1c <HAL_GPIO_Init+0x2c8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <HAL_GPIO_Init+0x1e4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d20 <HAL_GPIO_Init+0x2cc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_GPIO_Init+0x1e0>
 8001c30:	2303      	movs	r3, #3
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c40:	2300      	movs	r3, #0
 8001c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c52:	492f      	ldr	r1, [pc, #188]	@ (8001d10 <HAL_GPIO_Init+0x2bc>)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	492c      	ldr	r1, [pc, #176]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4928      	ldr	r1, [pc, #160]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4922      	ldr	r1, [pc, #136]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	491e      	ldr	r1, [pc, #120]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4918      	ldr	r1, [pc, #96]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4914      	ldr	r1, [pc, #80]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d021      	beq.n	8001d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	490e      	ldr	r1, [pc, #56]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e021      	b.n	8001d36 <HAL_GPIO_Init+0x2e2>
 8001cf2:	bf00      	nop
 8001cf4:	10320000 	.word	0x10320000
 8001cf8:	10310000 	.word	0x10310000
 8001cfc:	10220000 	.word	0x10220000
 8001d00:	10210000 	.word	0x10210000
 8001d04:	10120000 	.word	0x10120000
 8001d08:	10110000 	.word	0x10110000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	40011400 	.word	0x40011400
 8001d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <HAL_GPIO_Init+0x304>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4909      	ldr	r1, [pc, #36]	@ (8001d58 <HAL_GPIO_Init+0x304>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	3301      	adds	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f47f ae8e 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	372c      	adds	r7, #44	@ 0x2c
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e12b      	b.n	8001fc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fa78 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2224      	movs	r2, #36	@ 0x24
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc0:	f001 fbca 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8001dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a81      	ldr	r2, [pc, #516]	@ (8001fd0 <HAL_I2C_Init+0x274>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d807      	bhi.n	8001de0 <HAL_I2C_Init+0x84>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a80      	ldr	r2, [pc, #512]	@ (8001fd4 <HAL_I2C_Init+0x278>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	e006      	b.n	8001dee <HAL_I2C_Init+0x92>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fd8 <HAL_I2C_Init+0x27c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0e7      	b.n	8001fc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a78      	ldr	r2, [pc, #480]	@ (8001fdc <HAL_I2C_Init+0x280>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9b      	lsrs	r3, r3, #18
 8001e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd0 <HAL_I2C_Init+0x274>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d802      	bhi.n	8001e30 <HAL_I2C_Init+0xd4>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	e009      	b.n	8001e44 <HAL_I2C_Init+0xe8>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	4a69      	ldr	r2, [pc, #420]	@ (8001fe0 <HAL_I2C_Init+0x284>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	3301      	adds	r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	495c      	ldr	r1, [pc, #368]	@ (8001fd0 <HAL_I2C_Init+0x274>)
 8001e60:	428b      	cmp	r3, r1
 8001e62:	d819      	bhi.n	8001e98 <HAL_I2C_Init+0x13c>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e59      	subs	r1, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e72:	1c59      	adds	r1, r3, #1
 8001e74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e78:	400b      	ands	r3, r1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_I2C_Init+0x138>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e59      	subs	r1, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e92:	e051      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e04f      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d111      	bne.n	8001ec4 <HAL_I2C_Init+0x168>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e012      	b.n	8001eea <HAL_I2C_Init+0x18e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e58      	subs	r0, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	0099      	lsls	r1, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Init+0x196>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e022      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10e      	bne.n	8001f18 <HAL_I2C_Init+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e58      	subs	r0, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	440b      	add	r3, r1
 8001f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f16:	e00f      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e58      	subs	r0, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	0099      	lsls	r1, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	6809      	ldr	r1, [r1, #0]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6911      	ldr	r1, [r2, #16]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68d2      	ldr	r2, [r2, #12]
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	000186a0 	.word	0x000186a0
 8001fd4:	001e847f 	.word	0x001e847f
 8001fd8:	003d08ff 	.word	0x003d08ff
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	10624dd3 	.word	0x10624dd3

08001fe4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	817b      	strh	r3, [r7, #10]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff fc1a 	bl	8001830 <HAL_GetTick>
 8001ffc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	f040 80e0 	bne.w	80021cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2319      	movs	r3, #25
 8002012:	2201      	movs	r2, #1
 8002014:	4970      	ldr	r1, [pc, #448]	@ (80021d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fc9e 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	e0d3      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_I2C_Master_Transmit+0x50>
 8002030:	2302      	movs	r3, #2
 8002032:	e0cc      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d007      	beq.n	800205a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002068:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2221      	movs	r2, #33	@ 0x21
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2210      	movs	r2, #16
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a50      	ldr	r2, [pc, #320]	@ (80021dc <HAL_I2C_Master_Transmit+0x1f8>)
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800209c:	8979      	ldrh	r1, [r7, #10]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fb08 	bl	80026b8 <I2C_MasterRequestWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e08d      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020c8:	e066      	b.n	8002198 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	6a39      	ldr	r1, [r7, #32]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fd5c 	bl	8002b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b04      	cmp	r3, #4
 8002132:	d11b      	bne.n	800216c <HAL_I2C_Master_Transmit+0x188>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d017      	beq.n	800216c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	6a39      	ldr	r1, [r7, #32]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fd53 	bl	8002c1c <I2C_WaitOnBTFFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00d      	beq.n	8002198 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	2b04      	cmp	r3, #4
 8002182:	d107      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e01a      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d194      	bne.n	80020ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	00100002 	.word	0x00100002
 80021dc:	ffff0000 	.word	0xffff0000

080021e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fb1a 	bl	8001830 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	f040 824b 	bne.w	80026a2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	497f      	ldr	r1, [pc, #508]	@ (8002414 <HAL_I2C_Master_Receive+0x234>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fb9e 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	e23e      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_I2C_Master_Receive+0x54>
 8002230:	2302      	movs	r3, #2
 8002232:	e237      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d007      	beq.n	800225a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2222      	movs	r2, #34	@ 0x22
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2210      	movs	r2, #16
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a5f      	ldr	r2, [pc, #380]	@ (8002418 <HAL_I2C_Master_Receive+0x238>)
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fa8a 	bl	80027bc <I2C_MasterRequestRead>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1f8      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d113      	bne.n	80022e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e1cc      	b.n	800267c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d11e      	bne.n	8002328 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022fa:	b672      	cpsid	i
}
 80022fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002324:	b662      	cpsie	i
}
 8002326:	e035      	b.n	8002394 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	2b02      	cmp	r3, #2
 800232e:	d11e      	bne.n	800236e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002340:	b672      	cpsid	i
}
 8002342:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002368:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800236a:	b662      	cpsie	i
}
 800236c:	e012      	b.n	8002394 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800237c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002394:	e172      	b.n	800267c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239a:	2b03      	cmp	r3, #3
 800239c:	f200 811f 	bhi.w	80025de <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d123      	bne.n	80023f0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fc7d 	bl	8002cac <I2C_WaitOnRXNEFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e173      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023ee:	e145      	b.n	800267c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d152      	bne.n	800249e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	2200      	movs	r2, #0
 8002400:	4906      	ldr	r1, [pc, #24]	@ (800241c <HAL_I2C_Master_Receive+0x23c>)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 faa8 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e148      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
 8002412:	bf00      	nop
 8002414:	00100002 	.word	0x00100002
 8002418:	ffff0000 	.word	0xffff0000
 800241c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002466:	b662      	cpsie	i
}
 8002468:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800249c:	e0ee      	b.n	800267c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	2200      	movs	r2, #0
 80024a6:	4981      	ldr	r1, [pc, #516]	@ (80026ac <HAL_I2C_Master_Receive+0x4cc>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fa55 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0f5      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024fe:	4b6c      	ldr	r3, [pc, #432]	@ (80026b0 <HAL_I2C_Master_Receive+0x4d0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	4a6b      	ldr	r2, [pc, #428]	@ (80026b4 <HAL_I2C_Master_Receive+0x4d4>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0a1a      	lsrs	r2, r3, #8
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00da      	lsls	r2, r3, #3
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	3b01      	subs	r3, #1
 800251c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002546:	b662      	cpsie	i
}
 8002548:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0a6      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d1d9      	bne.n	8002518 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025a6:	b662      	cpsie	i
}
 80025a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025dc:	e04e      	b.n	800267c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fb62 	bl	8002cac <I2C_WaitOnRXNEFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e058      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d124      	bne.n	800267c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f ae88 	bne.w	8002396 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3728      	adds	r7, #40	@ 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	00010004 	.word	0x00010004
 80026b0:	20000000 	.word	0x20000000
 80026b4:	14f8b589 	.word	0x14f8b589

080026b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	460b      	mov	r3, r1
 80026c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d006      	beq.n	80026e2 <I2C_MasterRequestWrite+0x2a>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d003      	beq.n	80026e2 <I2C_MasterRequestWrite+0x2a>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026e0:	d108      	bne.n	80026f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e00b      	b.n	800270c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d107      	bne.n	800270c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f91d 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002732:	d103      	bne.n	800273c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e035      	b.n	80027ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002748:	d108      	bne.n	800275c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	e01b      	b.n	8002794 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800275c:	897b      	ldrh	r3, [r7, #10]
 800275e:	11db      	asrs	r3, r3, #7
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f003 0306 	and.w	r3, r3, #6
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f063 030f 	orn	r3, r3, #15
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <I2C_MasterRequestWrite+0xfc>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f966 	bl	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e010      	b.n	80027ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4907      	ldr	r1, [pc, #28]	@ (80027b8 <I2C_MasterRequestWrite+0x100>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f956 	bl	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	00010008 	.word	0x00010008
 80027b8:	00010002 	.word	0x00010002

080027bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	460b      	mov	r3, r1
 80027ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d006      	beq.n	80027f6 <I2C_MasterRequestRead+0x3a>
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d003      	beq.n	80027f6 <I2C_MasterRequestRead+0x3a>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027f4:	d108      	bne.n	8002808 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e00b      	b.n	8002820 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	2b11      	cmp	r3, #17
 800280e:	d107      	bne.n	8002820 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800281e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f893 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002846:	d103      	bne.n	8002850 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e079      	b.n	8002948 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800285c:	d108      	bne.n	8002870 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	611a      	str	r2, [r3, #16]
 800286e:	e05f      	b.n	8002930 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002870:	897b      	ldrh	r3, [r7, #10]
 8002872:	11db      	asrs	r3, r3, #7
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f003 0306 	and.w	r3, r3, #6
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f063 030f 	orn	r3, r3, #15
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4930      	ldr	r1, [pc, #192]	@ (8002950 <I2C_MasterRequestRead+0x194>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f8dc 	bl	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e054      	b.n	8002948 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4929      	ldr	r1, [pc, #164]	@ (8002954 <I2C_MasterRequestRead+0x198>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8cc 	bl	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e044      	b.n	8002948 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f831 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800290a:	d103      	bne.n	8002914 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e017      	b.n	8002948 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	11db      	asrs	r3, r3, #7
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0306 	and.w	r3, r3, #6
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f063 030e 	orn	r3, r3, #14
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4907      	ldr	r1, [pc, #28]	@ (8002954 <I2C_MasterRequestRead+0x198>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f888 	bl	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	00010008 	.word	0x00010008
 8002954:	00010002 	.word	0x00010002

08002958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002968:	e048      	b.n	80029fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d044      	beq.n	80029fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe ff5d 	bl	8001830 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d139      	bne.n	80029fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10d      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	43da      	mvns	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	e00c      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d116      	bne.n	80029fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e023      	b.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10d      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	e00c      	b.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d093      	beq.n	800296a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a5a:	e071      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6a:	d123      	bne.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e067      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d041      	beq.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7fe feb8 	bl	8001830 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d136      	bne.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10c      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e00b      	b.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e021      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10c      	bne.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e00b      	b.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f af6d 	bne.w	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b98:	e034      	b.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8e3 	bl	8002d66 <I2C_IsAcknowledgeFailed>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e034      	b.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d028      	beq.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe fe3d 	bl	8001830 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d11d      	bne.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b80      	cmp	r3, #128	@ 0x80
 8002bd4:	d016      	beq.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e007      	b.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0e:	2b80      	cmp	r3, #128	@ 0x80
 8002c10:	d1c3      	bne.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c28:	e034      	b.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f89b 	bl	8002d66 <I2C_IsAcknowledgeFailed>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e034      	b.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d028      	beq.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe fdf5 	bl	8001830 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11d      	bne.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d016      	beq.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e007      	b.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d1c3      	bne.n	8002c2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb8:	e049      	b.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d119      	bne.n	8002cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0210 	mvn.w	r2, #16
 8002cd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e030      	b.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe fd98 	bl	8001830 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11d      	bne.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d016      	beq.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	d1ae      	bne.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7c:	d11b      	bne.n	8002db6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e272      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8087 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	4b92      	ldr	r3, [pc, #584]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df0:	4b8f      	ldr	r3, [pc, #572]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b89      	ldr	r3, [pc, #548]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d168      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e24c      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x76>
 8002e2c:	4b80      	ldr	r3, [pc, #512]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a7f      	ldr	r2, [pc, #508]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x98>
 8002e42:	4b7b      	ldr	r3, [pc, #492]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7a      	ldr	r2, [pc, #488]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b78      	ldr	r3, [pc, #480]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a77      	ldr	r2, [pc, #476]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0xbc>
 8002e66:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a71      	ldr	r2, [pc, #452]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6f      	ldr	r3, [pc, #444]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e80:	4b6b      	ldr	r3, [pc, #428]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6a      	ldr	r2, [pc, #424]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b68      	ldr	r3, [pc, #416]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a67      	ldr	r2, [pc, #412]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fcc6 	bl	8001830 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fcc2 	bl	8001830 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	@ 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e200      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b5d      	ldr	r3, [pc, #372]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe4>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fcb2 	bl	8001830 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fcae 	bl	8001830 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1ec      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x10c>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	4b4c      	ldr	r3, [pc, #304]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0a:	4b49      	ldr	r3, [pc, #292]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
 8002f16:	4b46      	ldr	r3, [pc, #280]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b43      	ldr	r3, [pc, #268]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1c0      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4939      	ldr	r1, [pc, #228]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fc67 	bl	8001830 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fc63 	bl	8001830 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1a1      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4927      	ldr	r1, [pc, #156]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fc46 	bl	8001830 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fc42 	bl	8001830 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e180      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03a      	beq.n	8003048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d019      	beq.n	800300e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fc26 	bl	8001830 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fc22 	bl	8001830 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e160      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f000 face 	bl	80035a8 <RCC_Delay>
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe fc0c 	bl	8001830 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301a:	e00f      	b.n	800303c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fc08 	bl	8001830 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d908      	bls.n	800303c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e146      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	42420000 	.word	0x42420000
 8003038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	4b92      	ldr	r3, [pc, #584]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e9      	bne.n	800301c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a6 	beq.w	80031a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4a87      	ldr	r2, [pc, #540]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003070:	61d3      	str	r3, [r2, #28]
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7e      	ldr	r2, [pc, #504]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe fbc9 	bl	8001830 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fe fbc5 	bl	8001830 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	@ 0x64
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e103      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b75      	ldr	r3, [pc, #468]	@ (800328c <HAL_RCC_OscConfig+0x4c8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x312>
 80030c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e02d      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x334>
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a66      	ldr	r2, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x356>
 8003100:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a60      	ldr	r2, [pc, #384]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a5d      	ldr	r2, [pc, #372]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a5a      	ldr	r2, [pc, #360]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b58      	ldr	r3, [pc, #352]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a57      	ldr	r2, [pc, #348]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fe fb79 	bl	8001830 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fb75 	bl	8001830 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0b1      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x37e>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fb63 	bl	8001830 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe fb5f 	bl	8001830 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e09b      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b40      	ldr	r3, [pc, #256]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b3c      	ldr	r3, [pc, #240]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a3b      	ldr	r2, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d061      	beq.n	800327c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d146      	bne.n	800324e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b33      	ldr	r3, [pc, #204]	@ (8003290 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fb33 	bl	8001830 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fb2f 	bl	8001830 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e06d      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f4:	d108      	bne.n	8003208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4921      	ldr	r1, [pc, #132]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a19      	ldr	r1, [r3, #32]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	430b      	orrs	r3, r1
 800321a:	491b      	ldr	r1, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe fb03 	bl	8001830 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe faff 	bl	8001830 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e03d      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x46a>
 800324c:	e035      	b.n	80032ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_RCC_OscConfig+0x4cc>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe faec 	bl	8001830 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fae8 	bl	8001830 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e026      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x498>
 800327a:	e01e      	b.n	80032ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e019      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
 8003288:	40021000 	.word	0x40021000
 800328c:	40007000 	.word	0x40007000
 8003290:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_OscConfig+0x500>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0d0      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b67      	ldr	r3, [pc, #412]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4965      	ldr	r1, [pc, #404]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800332e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a52      	ldr	r2, [pc, #328]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003346:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d040      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b41      	ldr	r3, [pc, #260]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e073      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3d      	ldr	r3, [pc, #244]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4936      	ldr	r1, [pc, #216]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fa3a 	bl	8001830 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fa36 	bl	8001830 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e053      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2d      	ldr	r3, [pc, #180]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d210      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4922      	ldr	r1, [pc, #136]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	@ (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <HAL_RCC_ClockConfig+0x1cc>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1d0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe f998 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	0800812c 	.word	0x0800812c
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x30>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ca:	e027      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e027      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0c5b      	lsrs	r3, r3, #17
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	4a11      	ldr	r2, [pc, #68]	@ (800353c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fe:	fb03 f202 	mul.w	r2, r3, r2
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e004      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0c      	ldr	r2, [pc, #48]	@ (8003540 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	613b      	str	r3, [r7, #16]
      break;
 800351a:	e002      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 800351e:	613b      	str	r3, [r7, #16]
      break;
 8003520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003522:	693b      	ldr	r3, [r7, #16]
}
 8003524:	4618      	mov	r0, r3
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	007a1200 	.word	0x007a1200
 8003538:	08008144 	.word	0x08008144
 800353c:	08008154 	.word	0x08008154
 8003540:	003d0900 	.word	0x003d0900

08003544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b02      	ldr	r3, [pc, #8]	@ (8003554 <HAL_RCC_GetHCLKFreq+0x10>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	20000000 	.word	0x20000000

08003558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800355c:	f7ff fff2 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4903      	ldr	r1, [pc, #12]	@ (800357c <HAL_RCC_GetPCLK1Freq+0x24>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	0800813c 	.word	0x0800813c

08003580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003584:	f7ff ffde 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0adb      	lsrs	r3, r3, #11
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4903      	ldr	r1, [pc, #12]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	0800813c 	.word	0x0800813c

080035a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b0:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <RCC_Delay+0x34>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <RCC_Delay+0x38>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0a5b      	lsrs	r3, r3, #9
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c4:	bf00      	nop
  }
  while (Delay --);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f9      	bne.n	80035c4 <RCC_Delay+0x1c>
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	20000000 	.word	0x20000000
 80035e0:	10624dd3 	.word	0x10624dd3

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e042      	b.n	800367c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f848 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f971 	bl	8003910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d175      	bne.n	8003790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Transmit+0x2c>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e06e      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	@ 0x21
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe f8b5 	bl	8001830 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f8:	e02e      	b.n	8003758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f848 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03a      	b.n	8003792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cb      	bne.n	80036fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f814 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037aa:	e03b      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d037      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe f83c 	bl	8001830 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <UART_WaitOnFlagUntilTimeout+0x30>
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e03a      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b80      	cmp	r3, #128	@ 0x80
 80037e0:	d020      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d01d      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d116      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f81d 	bl	800384c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00f      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d0b4      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b095      	sub	sp, #84	@ 0x54
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003874:	643a      	str	r2, [r7, #64]	@ 0x40
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800387a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	61fb      	str	r3, [r7, #28]
   return(result);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d119      	bne.n	80038f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 0310 	bic.w	r3, r3, #16
 80038da:	647b      	str	r3, [r7, #68]	@ 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e4:	61ba      	str	r2, [r7, #24]
 80038e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6979      	ldr	r1, [r7, #20]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003906:	bf00      	nop
 8003908:	3754      	adds	r7, #84	@ 0x54
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800394a:	f023 030c 	bic.w	r3, r3, #12
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	430b      	orrs	r3, r1
 8003956:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2c      	ldr	r2, [pc, #176]	@ (8003a24 <UART_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7ff fe02 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	e002      	b.n	8003986 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7ff fdea 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8003984:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	4a22      	ldr	r2, [pc, #136]	@ (8003a28 <UART_SetConfig+0x118>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	0119      	lsls	r1, r3, #4
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <UART_SetConfig+0x118>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2064      	movs	r0, #100	@ 0x64
 80039c6:	fb00 f303 	mul.w	r3, r0, r3
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	3332      	adds	r3, #50	@ 0x32
 80039d0:	4a15      	ldr	r2, [pc, #84]	@ (8003a28 <UART_SetConfig+0x118>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039dc:	4419      	add	r1, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <UART_SetConfig+0x118>)
 80039f6:	fba3 0302 	umull	r0, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2064      	movs	r0, #100	@ 0x64
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	@ 0x32
 8003a08:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	440a      	add	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40013800 	.word	0x40013800
 8003a28:	51eb851f 	.word	0x51eb851f

08003a2c <__cvt>:
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a32:	461d      	mov	r5, r3
 8003a34:	bfbb      	ittet	lt
 8003a36:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003a3a:	461d      	movlt	r5, r3
 8003a3c:	2300      	movge	r3, #0
 8003a3e:	232d      	movlt	r3, #45	@ 0x2d
 8003a40:	b088      	sub	sp, #32
 8003a42:	4614      	mov	r4, r2
 8003a44:	bfb8      	it	lt
 8003a46:	4614      	movlt	r4, r2
 8003a48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003a4a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003a4c:	7013      	strb	r3, [r2, #0]
 8003a4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a50:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003a54:	f023 0820 	bic.w	r8, r3, #32
 8003a58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a5c:	d005      	beq.n	8003a6a <__cvt+0x3e>
 8003a5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a62:	d100      	bne.n	8003a66 <__cvt+0x3a>
 8003a64:	3601      	adds	r6, #1
 8003a66:	2302      	movs	r3, #2
 8003a68:	e000      	b.n	8003a6c <__cvt+0x40>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	aa07      	add	r2, sp, #28
 8003a6e:	9204      	str	r2, [sp, #16]
 8003a70:	aa06      	add	r2, sp, #24
 8003a72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a76:	e9cd 3600 	strd	r3, r6, [sp]
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	f001 f87b 	bl	8004b78 <_dtoa_r>
 8003a82:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a86:	4607      	mov	r7, r0
 8003a88:	d119      	bne.n	8003abe <__cvt+0x92>
 8003a8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003a8c:	07db      	lsls	r3, r3, #31
 8003a8e:	d50e      	bpl.n	8003aae <__cvt+0x82>
 8003a90:	eb00 0906 	add.w	r9, r0, r6
 8003a94:	2200      	movs	r2, #0
 8003a96:	2300      	movs	r3, #0
 8003a98:	4620      	mov	r0, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	f7fc ff84 	bl	80009a8 <__aeabi_dcmpeq>
 8003aa0:	b108      	cbz	r0, 8003aa6 <__cvt+0x7a>
 8003aa2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003aa6:	2230      	movs	r2, #48	@ 0x30
 8003aa8:	9b07      	ldr	r3, [sp, #28]
 8003aaa:	454b      	cmp	r3, r9
 8003aac:	d31e      	bcc.n	8003aec <__cvt+0xc0>
 8003aae:	4638      	mov	r0, r7
 8003ab0:	9b07      	ldr	r3, [sp, #28]
 8003ab2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003ab4:	1bdb      	subs	r3, r3, r7
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	b008      	add	sp, #32
 8003aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ac2:	eb00 0906 	add.w	r9, r0, r6
 8003ac6:	d1e5      	bne.n	8003a94 <__cvt+0x68>
 8003ac8:	7803      	ldrb	r3, [r0, #0]
 8003aca:	2b30      	cmp	r3, #48	@ 0x30
 8003acc:	d10a      	bne.n	8003ae4 <__cvt+0xb8>
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7fc ff67 	bl	80009a8 <__aeabi_dcmpeq>
 8003ada:	b918      	cbnz	r0, 8003ae4 <__cvt+0xb8>
 8003adc:	f1c6 0601 	rsb	r6, r6, #1
 8003ae0:	f8ca 6000 	str.w	r6, [sl]
 8003ae4:	f8da 3000 	ldr.w	r3, [sl]
 8003ae8:	4499      	add	r9, r3
 8003aea:	e7d3      	b.n	8003a94 <__cvt+0x68>
 8003aec:	1c59      	adds	r1, r3, #1
 8003aee:	9107      	str	r1, [sp, #28]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e7d9      	b.n	8003aa8 <__cvt+0x7c>

08003af4 <__exponent>:
 8003af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003af6:	2900      	cmp	r1, #0
 8003af8:	bfb6      	itet	lt
 8003afa:	232d      	movlt	r3, #45	@ 0x2d
 8003afc:	232b      	movge	r3, #43	@ 0x2b
 8003afe:	4249      	neglt	r1, r1
 8003b00:	2909      	cmp	r1, #9
 8003b02:	7002      	strb	r2, [r0, #0]
 8003b04:	7043      	strb	r3, [r0, #1]
 8003b06:	dd29      	ble.n	8003b5c <__exponent+0x68>
 8003b08:	f10d 0307 	add.w	r3, sp, #7
 8003b0c:	461d      	mov	r5, r3
 8003b0e:	270a      	movs	r7, #10
 8003b10:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b14:	461a      	mov	r2, r3
 8003b16:	fb07 1416 	mls	r4, r7, r6, r1
 8003b1a:	3430      	adds	r4, #48	@ 0x30
 8003b1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b20:	460c      	mov	r4, r1
 8003b22:	2c63      	cmp	r4, #99	@ 0x63
 8003b24:	4631      	mov	r1, r6
 8003b26:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b2a:	dcf1      	bgt.n	8003b10 <__exponent+0x1c>
 8003b2c:	3130      	adds	r1, #48	@ 0x30
 8003b2e:	1e94      	subs	r4, r2, #2
 8003b30:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b34:	4623      	mov	r3, r4
 8003b36:	1c41      	adds	r1, r0, #1
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	d30a      	bcc.n	8003b52 <__exponent+0x5e>
 8003b3c:	f10d 0309 	add.w	r3, sp, #9
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	42ac      	cmp	r4, r5
 8003b44:	bf88      	it	hi
 8003b46:	2300      	movhi	r3, #0
 8003b48:	3302      	adds	r3, #2
 8003b4a:	4403      	add	r3, r0
 8003b4c:	1a18      	subs	r0, r3, r0
 8003b4e:	b003      	add	sp, #12
 8003b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b52:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b56:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b5a:	e7ed      	b.n	8003b38 <__exponent+0x44>
 8003b5c:	2330      	movs	r3, #48	@ 0x30
 8003b5e:	3130      	adds	r1, #48	@ 0x30
 8003b60:	7083      	strb	r3, [r0, #2]
 8003b62:	70c1      	strb	r1, [r0, #3]
 8003b64:	1d03      	adds	r3, r0, #4
 8003b66:	e7f1      	b.n	8003b4c <__exponent+0x58>

08003b68 <_printf_float>:
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	b091      	sub	sp, #68	@ 0x44
 8003b6e:	460c      	mov	r4, r1
 8003b70:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003b74:	4616      	mov	r6, r2
 8003b76:	461f      	mov	r7, r3
 8003b78:	4605      	mov	r5, r0
 8003b7a:	f000 feeb 	bl	8004954 <_localeconv_r>
 8003b7e:	6803      	ldr	r3, [r0, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	9308      	str	r3, [sp, #32]
 8003b84:	f7fc fae4 	bl	8000150 <strlen>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b90:	9009      	str	r0, [sp, #36]	@ 0x24
 8003b92:	3307      	adds	r3, #7
 8003b94:	f023 0307 	bic.w	r3, r3, #7
 8003b98:	f103 0208 	add.w	r2, r3, #8
 8003b9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ba0:	f8d4 b000 	ldr.w	fp, [r4]
 8003ba4:	f8c8 2000 	str.w	r2, [r8]
 8003ba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bb2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8003e34 <_printf_float+0x2cc>)
 8003bc4:	f7fc ff22 	bl	8000a0c <__aeabi_dcmpun>
 8003bc8:	bb70      	cbnz	r0, 8003c28 <_printf_float+0xc0>
 8003bca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd2:	4b98      	ldr	r3, [pc, #608]	@ (8003e34 <_printf_float+0x2cc>)
 8003bd4:	f7fc fefc 	bl	80009d0 <__aeabi_dcmple>
 8003bd8:	bb30      	cbnz	r0, 8003c28 <_printf_float+0xc0>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	f7fc feeb 	bl	80009bc <__aeabi_dcmplt>
 8003be6:	b110      	cbz	r0, 8003bee <_printf_float+0x86>
 8003be8:	232d      	movs	r3, #45	@ 0x2d
 8003bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bee:	4a92      	ldr	r2, [pc, #584]	@ (8003e38 <_printf_float+0x2d0>)
 8003bf0:	4b92      	ldr	r3, [pc, #584]	@ (8003e3c <_printf_float+0x2d4>)
 8003bf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003bf6:	bf8c      	ite	hi
 8003bf8:	4690      	movhi	r8, r2
 8003bfa:	4698      	movls	r8, r3
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	f04f 0900 	mov.w	r9, #0
 8003c02:	6123      	str	r3, [r4, #16]
 8003c04:	f02b 0304 	bic.w	r3, fp, #4
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	4633      	mov	r3, r6
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	9700      	str	r7, [sp, #0]
 8003c12:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c14:	f000 f9d4 	bl	8003fc0 <_printf_common>
 8003c18:	3001      	adds	r0, #1
 8003c1a:	f040 8090 	bne.w	8003d3e <_printf_float+0x1d6>
 8003c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c22:	b011      	add	sp, #68	@ 0x44
 8003c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c28:	4642      	mov	r2, r8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	4640      	mov	r0, r8
 8003c2e:	4649      	mov	r1, r9
 8003c30:	f7fc feec 	bl	8000a0c <__aeabi_dcmpun>
 8003c34:	b148      	cbz	r0, 8003c4a <_printf_float+0xe2>
 8003c36:	464b      	mov	r3, r9
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bfb8      	it	lt
 8003c3c:	232d      	movlt	r3, #45	@ 0x2d
 8003c3e:	4a80      	ldr	r2, [pc, #512]	@ (8003e40 <_printf_float+0x2d8>)
 8003c40:	bfb8      	it	lt
 8003c42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <_printf_float+0x2dc>)
 8003c48:	e7d3      	b.n	8003bf2 <_printf_float+0x8a>
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	d13f      	bne.n	8003cd4 <_printf_float+0x16c>
 8003c54:	2306      	movs	r3, #6
 8003c56:	6063      	str	r3, [r4, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	9206      	str	r2, [sp, #24]
 8003c62:	aa0e      	add	r2, sp, #56	@ 0x38
 8003c64:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003c68:	aa0d      	add	r2, sp, #52	@ 0x34
 8003c6a:	9203      	str	r2, [sp, #12]
 8003c6c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003c70:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	4642      	mov	r2, r8
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003c80:	f7ff fed4 	bl	8003a2c <__cvt>
 8003c84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003c86:	4680      	mov	r8, r0
 8003c88:	2947      	cmp	r1, #71	@ 0x47
 8003c8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003c8c:	d128      	bne.n	8003ce0 <_printf_float+0x178>
 8003c8e:	1cc8      	adds	r0, r1, #3
 8003c90:	db02      	blt.n	8003c98 <_printf_float+0x130>
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	4299      	cmp	r1, r3
 8003c96:	dd40      	ble.n	8003d1a <_printf_float+0x1b2>
 8003c98:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c9c:	fa5f fa8a 	uxtb.w	sl, sl
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	3901      	subs	r1, #1
 8003ca4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ca8:	910d      	str	r1, [sp, #52]	@ 0x34
 8003caa:	f7ff ff23 	bl	8003af4 <__exponent>
 8003cae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cb0:	4681      	mov	r9, r0
 8003cb2:	1813      	adds	r3, r2, r0
 8003cb4:	2a01      	cmp	r2, #1
 8003cb6:	6123      	str	r3, [r4, #16]
 8003cb8:	dc02      	bgt.n	8003cc0 <_printf_float+0x158>
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	07d2      	lsls	r2, r2, #31
 8003cbe:	d501      	bpl.n	8003cc4 <_printf_float+0x15c>
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d09e      	beq.n	8003c0a <_printf_float+0xa2>
 8003ccc:	232d      	movs	r3, #45	@ 0x2d
 8003cce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cd2:	e79a      	b.n	8003c0a <_printf_float+0xa2>
 8003cd4:	2947      	cmp	r1, #71	@ 0x47
 8003cd6:	d1bf      	bne.n	8003c58 <_printf_float+0xf0>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1bd      	bne.n	8003c58 <_printf_float+0xf0>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e7ba      	b.n	8003c56 <_printf_float+0xee>
 8003ce0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ce4:	d9dc      	bls.n	8003ca0 <_printf_float+0x138>
 8003ce6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003cea:	d118      	bne.n	8003d1e <_printf_float+0x1b6>
 8003cec:	2900      	cmp	r1, #0
 8003cee:	6863      	ldr	r3, [r4, #4]
 8003cf0:	dd0b      	ble.n	8003d0a <_printf_float+0x1a2>
 8003cf2:	6121      	str	r1, [r4, #16]
 8003cf4:	b913      	cbnz	r3, 8003cfc <_printf_float+0x194>
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	07d0      	lsls	r0, r2, #31
 8003cfa:	d502      	bpl.n	8003d02 <_printf_float+0x19a>
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	440b      	add	r3, r1
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	f04f 0900 	mov.w	r9, #0
 8003d06:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d08:	e7dc      	b.n	8003cc4 <_printf_float+0x15c>
 8003d0a:	b913      	cbnz	r3, 8003d12 <_printf_float+0x1aa>
 8003d0c:	6822      	ldr	r2, [r4, #0]
 8003d0e:	07d2      	lsls	r2, r2, #31
 8003d10:	d501      	bpl.n	8003d16 <_printf_float+0x1ae>
 8003d12:	3302      	adds	r3, #2
 8003d14:	e7f4      	b.n	8003d00 <_printf_float+0x198>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e7f2      	b.n	8003d00 <_printf_float+0x198>
 8003d1a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d20:	4299      	cmp	r1, r3
 8003d22:	db05      	blt.n	8003d30 <_printf_float+0x1c8>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	6121      	str	r1, [r4, #16]
 8003d28:	07d8      	lsls	r0, r3, #31
 8003d2a:	d5ea      	bpl.n	8003d02 <_printf_float+0x19a>
 8003d2c:	1c4b      	adds	r3, r1, #1
 8003d2e:	e7e7      	b.n	8003d00 <_printf_float+0x198>
 8003d30:	2900      	cmp	r1, #0
 8003d32:	bfcc      	ite	gt
 8003d34:	2201      	movgt	r2, #1
 8003d36:	f1c1 0202 	rsble	r2, r1, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	e7e0      	b.n	8003d00 <_printf_float+0x198>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	055a      	lsls	r2, r3, #21
 8003d42:	d407      	bmi.n	8003d54 <_printf_float+0x1ec>
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	4642      	mov	r2, r8
 8003d48:	4631      	mov	r1, r6
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	47b8      	blx	r7
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d12b      	bne.n	8003daa <_printf_float+0x242>
 8003d52:	e764      	b.n	8003c1e <_printf_float+0xb6>
 8003d54:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d58:	f240 80dc 	bls.w	8003f14 <_printf_float+0x3ac>
 8003d5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d60:	2200      	movs	r2, #0
 8003d62:	2300      	movs	r3, #0
 8003d64:	f7fc fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d033      	beq.n	8003dd4 <_printf_float+0x26c>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	4a35      	ldr	r2, [pc, #212]	@ (8003e48 <_printf_float+0x2e0>)
 8003d74:	47b8      	blx	r7
 8003d76:	3001      	adds	r0, #1
 8003d78:	f43f af51 	beq.w	8003c1e <_printf_float+0xb6>
 8003d7c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003d80:	4543      	cmp	r3, r8
 8003d82:	db02      	blt.n	8003d8a <_printf_float+0x222>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	07d8      	lsls	r0, r3, #31
 8003d88:	d50f      	bpl.n	8003daa <_printf_float+0x242>
 8003d8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4628      	mov	r0, r5
 8003d92:	47b8      	blx	r7
 8003d94:	3001      	adds	r0, #1
 8003d96:	f43f af42 	beq.w	8003c1e <_printf_float+0xb6>
 8003d9a:	f04f 0900 	mov.w	r9, #0
 8003d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003da2:	f104 0a1a 	add.w	sl, r4, #26
 8003da6:	45c8      	cmp	r8, r9
 8003da8:	dc09      	bgt.n	8003dbe <_printf_float+0x256>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	079b      	lsls	r3, r3, #30
 8003dae:	f100 8102 	bmi.w	8003fb6 <_printf_float+0x44e>
 8003db2:	68e0      	ldr	r0, [r4, #12]
 8003db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003db6:	4298      	cmp	r0, r3
 8003db8:	bfb8      	it	lt
 8003dba:	4618      	movlt	r0, r3
 8003dbc:	e731      	b.n	8003c22 <_printf_float+0xba>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4652      	mov	r2, sl
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f43f af28 	beq.w	8003c1e <_printf_float+0xb6>
 8003dce:	f109 0901 	add.w	r9, r9, #1
 8003dd2:	e7e8      	b.n	8003da6 <_printf_float+0x23e>
 8003dd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dc38      	bgt.n	8003e4c <_printf_float+0x2e4>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4631      	mov	r1, r6
 8003dde:	4628      	mov	r0, r5
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <_printf_float+0x2e0>)
 8003de2:	47b8      	blx	r7
 8003de4:	3001      	adds	r0, #1
 8003de6:	f43f af1a 	beq.w	8003c1e <_printf_float+0xb6>
 8003dea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003dee:	ea59 0303 	orrs.w	r3, r9, r3
 8003df2:	d102      	bne.n	8003dfa <_printf_float+0x292>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	07d9      	lsls	r1, r3, #31
 8003df8:	d5d7      	bpl.n	8003daa <_printf_float+0x242>
 8003dfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f af0a 	beq.w	8003c1e <_printf_float+0xb6>
 8003e0a:	f04f 0a00 	mov.w	sl, #0
 8003e0e:	f104 0b1a 	add.w	fp, r4, #26
 8003e12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e14:	425b      	negs	r3, r3
 8003e16:	4553      	cmp	r3, sl
 8003e18:	dc01      	bgt.n	8003e1e <_printf_float+0x2b6>
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	e793      	b.n	8003d46 <_printf_float+0x1de>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	465a      	mov	r2, fp
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b8      	blx	r7
 8003e28:	3001      	adds	r0, #1
 8003e2a:	f43f aef8 	beq.w	8003c1e <_printf_float+0xb6>
 8003e2e:	f10a 0a01 	add.w	sl, sl, #1
 8003e32:	e7ee      	b.n	8003e12 <_printf_float+0x2aa>
 8003e34:	7fefffff 	.word	0x7fefffff
 8003e38:	0800815a 	.word	0x0800815a
 8003e3c:	08008156 	.word	0x08008156
 8003e40:	08008162 	.word	0x08008162
 8003e44:	0800815e 	.word	0x0800815e
 8003e48:	08008166 	.word	0x08008166
 8003e4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e4e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e52:	4553      	cmp	r3, sl
 8003e54:	bfa8      	it	ge
 8003e56:	4653      	movge	r3, sl
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	4699      	mov	r9, r3
 8003e5c:	dc36      	bgt.n	8003ecc <_printf_float+0x364>
 8003e5e:	f04f 0b00 	mov.w	fp, #0
 8003e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e66:	f104 021a 	add.w	r2, r4, #26
 8003e6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e6e:	eba3 0309 	sub.w	r3, r3, r9
 8003e72:	455b      	cmp	r3, fp
 8003e74:	dc31      	bgt.n	8003eda <_printf_float+0x372>
 8003e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e78:	459a      	cmp	sl, r3
 8003e7a:	dc3a      	bgt.n	8003ef2 <_printf_float+0x38a>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	07da      	lsls	r2, r3, #31
 8003e80:	d437      	bmi.n	8003ef2 <_printf_float+0x38a>
 8003e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e84:	ebaa 0903 	sub.w	r9, sl, r3
 8003e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e8a:	ebaa 0303 	sub.w	r3, sl, r3
 8003e8e:	4599      	cmp	r9, r3
 8003e90:	bfa8      	it	ge
 8003e92:	4699      	movge	r9, r3
 8003e94:	f1b9 0f00 	cmp.w	r9, #0
 8003e98:	dc33      	bgt.n	8003f02 <_printf_float+0x39a>
 8003e9a:	f04f 0800 	mov.w	r8, #0
 8003e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ea2:	f104 0b1a 	add.w	fp, r4, #26
 8003ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8003eac:	eba3 0309 	sub.w	r3, r3, r9
 8003eb0:	4543      	cmp	r3, r8
 8003eb2:	f77f af7a 	ble.w	8003daa <_printf_float+0x242>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	465a      	mov	r2, fp
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f aeac 	beq.w	8003c1e <_printf_float+0xb6>
 8003ec6:	f108 0801 	add.w	r8, r8, #1
 8003eca:	e7ec      	b.n	8003ea6 <_printf_float+0x33e>
 8003ecc:	4642      	mov	r2, r8
 8003ece:	4631      	mov	r1, r6
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	47b8      	blx	r7
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d1c2      	bne.n	8003e5e <_printf_float+0x2f6>
 8003ed8:	e6a1      	b.n	8003c1e <_printf_float+0xb6>
 8003eda:	2301      	movs	r3, #1
 8003edc:	4631      	mov	r1, r6
 8003ede:	4628      	mov	r0, r5
 8003ee0:	920a      	str	r2, [sp, #40]	@ 0x28
 8003ee2:	47b8      	blx	r7
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f43f ae9a 	beq.w	8003c1e <_printf_float+0xb6>
 8003eea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003eec:	f10b 0b01 	add.w	fp, fp, #1
 8003ef0:	e7bb      	b.n	8003e6a <_printf_float+0x302>
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ef8:	4628      	mov	r0, r5
 8003efa:	47b8      	blx	r7
 8003efc:	3001      	adds	r0, #1
 8003efe:	d1c0      	bne.n	8003e82 <_printf_float+0x31a>
 8003f00:	e68d      	b.n	8003c1e <_printf_float+0xb6>
 8003f02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f04:	464b      	mov	r3, r9
 8003f06:	4631      	mov	r1, r6
 8003f08:	4628      	mov	r0, r5
 8003f0a:	4442      	add	r2, r8
 8003f0c:	47b8      	blx	r7
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d1c3      	bne.n	8003e9a <_printf_float+0x332>
 8003f12:	e684      	b.n	8003c1e <_printf_float+0xb6>
 8003f14:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f18:	f1ba 0f01 	cmp.w	sl, #1
 8003f1c:	dc01      	bgt.n	8003f22 <_printf_float+0x3ba>
 8003f1e:	07db      	lsls	r3, r3, #31
 8003f20:	d536      	bpl.n	8003f90 <_printf_float+0x428>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4642      	mov	r2, r8
 8003f26:	4631      	mov	r1, r6
 8003f28:	4628      	mov	r0, r5
 8003f2a:	47b8      	blx	r7
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	f43f ae76 	beq.w	8003c1e <_printf_float+0xb6>
 8003f32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f ae6e 	beq.w	8003c1e <_printf_float+0xb6>
 8003f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f46:	2200      	movs	r2, #0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f4e:	f7fc fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8003f52:	b9c0      	cbnz	r0, 8003f86 <_printf_float+0x41e>
 8003f54:	4653      	mov	r3, sl
 8003f56:	f108 0201 	add.w	r2, r8, #1
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	d10c      	bne.n	8003f7e <_printf_float+0x416>
 8003f64:	e65b      	b.n	8003c1e <_printf_float+0xb6>
 8003f66:	2301      	movs	r3, #1
 8003f68:	465a      	mov	r2, fp
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f ae54 	beq.w	8003c1e <_printf_float+0xb6>
 8003f76:	f108 0801 	add.w	r8, r8, #1
 8003f7a:	45d0      	cmp	r8, sl
 8003f7c:	dbf3      	blt.n	8003f66 <_printf_float+0x3fe>
 8003f7e:	464b      	mov	r3, r9
 8003f80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f84:	e6e0      	b.n	8003d48 <_printf_float+0x1e0>
 8003f86:	f04f 0800 	mov.w	r8, #0
 8003f8a:	f104 0b1a 	add.w	fp, r4, #26
 8003f8e:	e7f4      	b.n	8003f7a <_printf_float+0x412>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4642      	mov	r2, r8
 8003f94:	e7e1      	b.n	8003f5a <_printf_float+0x3f2>
 8003f96:	2301      	movs	r3, #1
 8003f98:	464a      	mov	r2, r9
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b8      	blx	r7
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f43f ae3c 	beq.w	8003c1e <_printf_float+0xb6>
 8003fa6:	f108 0801 	add.w	r8, r8, #1
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003fae:	1a5b      	subs	r3, r3, r1
 8003fb0:	4543      	cmp	r3, r8
 8003fb2:	dcf0      	bgt.n	8003f96 <_printf_float+0x42e>
 8003fb4:	e6fd      	b.n	8003db2 <_printf_float+0x24a>
 8003fb6:	f04f 0800 	mov.w	r8, #0
 8003fba:	f104 0919 	add.w	r9, r4, #25
 8003fbe:	e7f4      	b.n	8003faa <_printf_float+0x442>

08003fc0 <_printf_common>:
 8003fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	4698      	mov	r8, r3
 8003fc8:	688a      	ldr	r2, [r1, #8]
 8003fca:	690b      	ldr	r3, [r1, #16]
 8003fcc:	4607      	mov	r7, r0
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	bfb8      	it	lt
 8003fd2:	4613      	movlt	r3, r2
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fda:	460c      	mov	r4, r1
 8003fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fe0:	b10a      	cbz	r2, 8003fe6 <_printf_common+0x26>
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	6033      	str	r3, [r6, #0]
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	0699      	lsls	r1, r3, #26
 8003fea:	bf42      	ittt	mi
 8003fec:	6833      	ldrmi	r3, [r6, #0]
 8003fee:	3302      	addmi	r3, #2
 8003ff0:	6033      	strmi	r3, [r6, #0]
 8003ff2:	6825      	ldr	r5, [r4, #0]
 8003ff4:	f015 0506 	ands.w	r5, r5, #6
 8003ff8:	d106      	bne.n	8004008 <_printf_common+0x48>
 8003ffa:	f104 0a19 	add.w	sl, r4, #25
 8003ffe:	68e3      	ldr	r3, [r4, #12]
 8004000:	6832      	ldr	r2, [r6, #0]
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	42ab      	cmp	r3, r5
 8004006:	dc2b      	bgt.n	8004060 <_printf_common+0xa0>
 8004008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800400c:	6822      	ldr	r2, [r4, #0]
 800400e:	3b00      	subs	r3, #0
 8004010:	bf18      	it	ne
 8004012:	2301      	movne	r3, #1
 8004014:	0692      	lsls	r2, r2, #26
 8004016:	d430      	bmi.n	800407a <_printf_common+0xba>
 8004018:	4641      	mov	r1, r8
 800401a:	4638      	mov	r0, r7
 800401c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004020:	47c8      	blx	r9
 8004022:	3001      	adds	r0, #1
 8004024:	d023      	beq.n	800406e <_printf_common+0xae>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	f003 0306 	and.w	r3, r3, #6
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf14      	ite	ne
 8004032:	2500      	movne	r5, #0
 8004034:	6833      	ldreq	r3, [r6, #0]
 8004036:	f04f 0600 	mov.w	r6, #0
 800403a:	bf08      	it	eq
 800403c:	68e5      	ldreq	r5, [r4, #12]
 800403e:	f104 041a 	add.w	r4, r4, #26
 8004042:	bf08      	it	eq
 8004044:	1aed      	subeq	r5, r5, r3
 8004046:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800404a:	bf08      	it	eq
 800404c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004050:	4293      	cmp	r3, r2
 8004052:	bfc4      	itt	gt
 8004054:	1a9b      	subgt	r3, r3, r2
 8004056:	18ed      	addgt	r5, r5, r3
 8004058:	42b5      	cmp	r5, r6
 800405a:	d11a      	bne.n	8004092 <_printf_common+0xd2>
 800405c:	2000      	movs	r0, #0
 800405e:	e008      	b.n	8004072 <_printf_common+0xb2>
 8004060:	2301      	movs	r3, #1
 8004062:	4652      	mov	r2, sl
 8004064:	4641      	mov	r1, r8
 8004066:	4638      	mov	r0, r7
 8004068:	47c8      	blx	r9
 800406a:	3001      	adds	r0, #1
 800406c:	d103      	bne.n	8004076 <_printf_common+0xb6>
 800406e:	f04f 30ff 	mov.w	r0, #4294967295
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	3501      	adds	r5, #1
 8004078:	e7c1      	b.n	8003ffe <_printf_common+0x3e>
 800407a:	2030      	movs	r0, #48	@ 0x30
 800407c:	18e1      	adds	r1, r4, r3
 800407e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004088:	4422      	add	r2, r4
 800408a:	3302      	adds	r3, #2
 800408c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004090:	e7c2      	b.n	8004018 <_printf_common+0x58>
 8004092:	2301      	movs	r3, #1
 8004094:	4622      	mov	r2, r4
 8004096:	4641      	mov	r1, r8
 8004098:	4638      	mov	r0, r7
 800409a:	47c8      	blx	r9
 800409c:	3001      	adds	r0, #1
 800409e:	d0e6      	beq.n	800406e <_printf_common+0xae>
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7d9      	b.n	8004058 <_printf_common+0x98>

080040a4 <_printf_i>:
 80040a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	7e0f      	ldrb	r7, [r1, #24]
 80040aa:	4691      	mov	r9, r2
 80040ac:	2f78      	cmp	r7, #120	@ 0x78
 80040ae:	4680      	mov	r8, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	469a      	mov	sl, r3
 80040b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040ba:	d807      	bhi.n	80040cc <_printf_i+0x28>
 80040bc:	2f62      	cmp	r7, #98	@ 0x62
 80040be:	d80a      	bhi.n	80040d6 <_printf_i+0x32>
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	f000 80d1 	beq.w	8004268 <_printf_i+0x1c4>
 80040c6:	2f58      	cmp	r7, #88	@ 0x58
 80040c8:	f000 80b8 	beq.w	800423c <_printf_i+0x198>
 80040cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040d4:	e03a      	b.n	800414c <_printf_i+0xa8>
 80040d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040da:	2b15      	cmp	r3, #21
 80040dc:	d8f6      	bhi.n	80040cc <_printf_i+0x28>
 80040de:	a101      	add	r1, pc, #4	@ (adr r1, 80040e4 <_printf_i+0x40>)
 80040e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	08004151 	.word	0x08004151
 80040ec:	080040cd 	.word	0x080040cd
 80040f0:	080040cd 	.word	0x080040cd
 80040f4:	080040cd 	.word	0x080040cd
 80040f8:	080040cd 	.word	0x080040cd
 80040fc:	08004151 	.word	0x08004151
 8004100:	080040cd 	.word	0x080040cd
 8004104:	080040cd 	.word	0x080040cd
 8004108:	080040cd 	.word	0x080040cd
 800410c:	080040cd 	.word	0x080040cd
 8004110:	0800424f 	.word	0x0800424f
 8004114:	0800417b 	.word	0x0800417b
 8004118:	08004209 	.word	0x08004209
 800411c:	080040cd 	.word	0x080040cd
 8004120:	080040cd 	.word	0x080040cd
 8004124:	08004271 	.word	0x08004271
 8004128:	080040cd 	.word	0x080040cd
 800412c:	0800417b 	.word	0x0800417b
 8004130:	080040cd 	.word	0x080040cd
 8004134:	080040cd 	.word	0x080040cd
 8004138:	08004211 	.word	0x08004211
 800413c:	6833      	ldr	r3, [r6, #0]
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6032      	str	r2, [r6, #0]
 8004144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800414c:	2301      	movs	r3, #1
 800414e:	e09c      	b.n	800428a <_printf_i+0x1e6>
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	6031      	str	r1, [r6, #0]
 8004158:	0606      	lsls	r6, r0, #24
 800415a:	d501      	bpl.n	8004160 <_printf_i+0xbc>
 800415c:	681d      	ldr	r5, [r3, #0]
 800415e:	e003      	b.n	8004168 <_printf_i+0xc4>
 8004160:	0645      	lsls	r5, r0, #25
 8004162:	d5fb      	bpl.n	800415c <_printf_i+0xb8>
 8004164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004168:	2d00      	cmp	r5, #0
 800416a:	da03      	bge.n	8004174 <_printf_i+0xd0>
 800416c:	232d      	movs	r3, #45	@ 0x2d
 800416e:	426d      	negs	r5, r5
 8004170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004174:	230a      	movs	r3, #10
 8004176:	4858      	ldr	r0, [pc, #352]	@ (80042d8 <_printf_i+0x234>)
 8004178:	e011      	b.n	800419e <_printf_i+0xfa>
 800417a:	6821      	ldr	r1, [r4, #0]
 800417c:	6833      	ldr	r3, [r6, #0]
 800417e:	0608      	lsls	r0, r1, #24
 8004180:	f853 5b04 	ldr.w	r5, [r3], #4
 8004184:	d402      	bmi.n	800418c <_printf_i+0xe8>
 8004186:	0649      	lsls	r1, r1, #25
 8004188:	bf48      	it	mi
 800418a:	b2ad      	uxthmi	r5, r5
 800418c:	2f6f      	cmp	r7, #111	@ 0x6f
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	bf14      	ite	ne
 8004192:	230a      	movne	r3, #10
 8004194:	2308      	moveq	r3, #8
 8004196:	4850      	ldr	r0, [pc, #320]	@ (80042d8 <_printf_i+0x234>)
 8004198:	2100      	movs	r1, #0
 800419a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800419e:	6866      	ldr	r6, [r4, #4]
 80041a0:	2e00      	cmp	r6, #0
 80041a2:	60a6      	str	r6, [r4, #8]
 80041a4:	db05      	blt.n	80041b2 <_printf_i+0x10e>
 80041a6:	6821      	ldr	r1, [r4, #0]
 80041a8:	432e      	orrs	r6, r5
 80041aa:	f021 0104 	bic.w	r1, r1, #4
 80041ae:	6021      	str	r1, [r4, #0]
 80041b0:	d04b      	beq.n	800424a <_printf_i+0x1a6>
 80041b2:	4616      	mov	r6, r2
 80041b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80041b8:	fb03 5711 	mls	r7, r3, r1, r5
 80041bc:	5dc7      	ldrb	r7, [r0, r7]
 80041be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041c2:	462f      	mov	r7, r5
 80041c4:	42bb      	cmp	r3, r7
 80041c6:	460d      	mov	r5, r1
 80041c8:	d9f4      	bls.n	80041b4 <_printf_i+0x110>
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d10b      	bne.n	80041e6 <_printf_i+0x142>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	07df      	lsls	r7, r3, #31
 80041d2:	d508      	bpl.n	80041e6 <_printf_i+0x142>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	6861      	ldr	r1, [r4, #4]
 80041d8:	4299      	cmp	r1, r3
 80041da:	bfde      	ittt	le
 80041dc:	2330      	movle	r3, #48	@ 0x30
 80041de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041e6:	1b92      	subs	r2, r2, r6
 80041e8:	6122      	str	r2, [r4, #16]
 80041ea:	464b      	mov	r3, r9
 80041ec:	4621      	mov	r1, r4
 80041ee:	4640      	mov	r0, r8
 80041f0:	f8cd a000 	str.w	sl, [sp]
 80041f4:	aa03      	add	r2, sp, #12
 80041f6:	f7ff fee3 	bl	8003fc0 <_printf_common>
 80041fa:	3001      	adds	r0, #1
 80041fc:	d14a      	bne.n	8004294 <_printf_i+0x1f0>
 80041fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004202:	b004      	add	sp, #16
 8004204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	f043 0320 	orr.w	r3, r3, #32
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	2778      	movs	r7, #120	@ 0x78
 8004212:	4832      	ldr	r0, [pc, #200]	@ (80042dc <_printf_i+0x238>)
 8004214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	6831      	ldr	r1, [r6, #0]
 800421c:	061f      	lsls	r7, r3, #24
 800421e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004222:	d402      	bmi.n	800422a <_printf_i+0x186>
 8004224:	065f      	lsls	r7, r3, #25
 8004226:	bf48      	it	mi
 8004228:	b2ad      	uxthmi	r5, r5
 800422a:	6031      	str	r1, [r6, #0]
 800422c:	07d9      	lsls	r1, r3, #31
 800422e:	bf44      	itt	mi
 8004230:	f043 0320 	orrmi.w	r3, r3, #32
 8004234:	6023      	strmi	r3, [r4, #0]
 8004236:	b11d      	cbz	r5, 8004240 <_printf_i+0x19c>
 8004238:	2310      	movs	r3, #16
 800423a:	e7ad      	b.n	8004198 <_printf_i+0xf4>
 800423c:	4826      	ldr	r0, [pc, #152]	@ (80042d8 <_printf_i+0x234>)
 800423e:	e7e9      	b.n	8004214 <_printf_i+0x170>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f023 0320 	bic.w	r3, r3, #32
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	e7f6      	b.n	8004238 <_printf_i+0x194>
 800424a:	4616      	mov	r6, r2
 800424c:	e7bd      	b.n	80041ca <_printf_i+0x126>
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	6825      	ldr	r5, [r4, #0]
 8004252:	1d18      	adds	r0, r3, #4
 8004254:	6961      	ldr	r1, [r4, #20]
 8004256:	6030      	str	r0, [r6, #0]
 8004258:	062e      	lsls	r6, r5, #24
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	d501      	bpl.n	8004262 <_printf_i+0x1be>
 800425e:	6019      	str	r1, [r3, #0]
 8004260:	e002      	b.n	8004268 <_printf_i+0x1c4>
 8004262:	0668      	lsls	r0, r5, #25
 8004264:	d5fb      	bpl.n	800425e <_printf_i+0x1ba>
 8004266:	8019      	strh	r1, [r3, #0]
 8004268:	2300      	movs	r3, #0
 800426a:	4616      	mov	r6, r2
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	e7bc      	b.n	80041ea <_printf_i+0x146>
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	2100      	movs	r1, #0
 8004274:	1d1a      	adds	r2, r3, #4
 8004276:	6032      	str	r2, [r6, #0]
 8004278:	681e      	ldr	r6, [r3, #0]
 800427a:	6862      	ldr	r2, [r4, #4]
 800427c:	4630      	mov	r0, r6
 800427e:	f000 fbe0 	bl	8004a42 <memchr>
 8004282:	b108      	cbz	r0, 8004288 <_printf_i+0x1e4>
 8004284:	1b80      	subs	r0, r0, r6
 8004286:	6060      	str	r0, [r4, #4]
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	2300      	movs	r3, #0
 800428e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004292:	e7aa      	b.n	80041ea <_printf_i+0x146>
 8004294:	4632      	mov	r2, r6
 8004296:	4649      	mov	r1, r9
 8004298:	4640      	mov	r0, r8
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	47d0      	blx	sl
 800429e:	3001      	adds	r0, #1
 80042a0:	d0ad      	beq.n	80041fe <_printf_i+0x15a>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	079b      	lsls	r3, r3, #30
 80042a6:	d413      	bmi.n	80042d0 <_printf_i+0x22c>
 80042a8:	68e0      	ldr	r0, [r4, #12]
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	4298      	cmp	r0, r3
 80042ae:	bfb8      	it	lt
 80042b0:	4618      	movlt	r0, r3
 80042b2:	e7a6      	b.n	8004202 <_printf_i+0x15e>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4632      	mov	r2, r6
 80042b8:	4649      	mov	r1, r9
 80042ba:	4640      	mov	r0, r8
 80042bc:	47d0      	blx	sl
 80042be:	3001      	adds	r0, #1
 80042c0:	d09d      	beq.n	80041fe <_printf_i+0x15a>
 80042c2:	3501      	adds	r5, #1
 80042c4:	68e3      	ldr	r3, [r4, #12]
 80042c6:	9903      	ldr	r1, [sp, #12]
 80042c8:	1a5b      	subs	r3, r3, r1
 80042ca:	42ab      	cmp	r3, r5
 80042cc:	dcf2      	bgt.n	80042b4 <_printf_i+0x210>
 80042ce:	e7eb      	b.n	80042a8 <_printf_i+0x204>
 80042d0:	2500      	movs	r5, #0
 80042d2:	f104 0619 	add.w	r6, r4, #25
 80042d6:	e7f5      	b.n	80042c4 <_printf_i+0x220>
 80042d8:	08008168 	.word	0x08008168
 80042dc:	08008179 	.word	0x08008179

080042e0 <_scanf_float>:
 80042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	b087      	sub	sp, #28
 80042e6:	9303      	str	r3, [sp, #12]
 80042e8:	688b      	ldr	r3, [r1, #8]
 80042ea:	4691      	mov	r9, r2
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80042f2:	bf82      	ittt	hi
 80042f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80042f8:	eb03 0b05 	addhi.w	fp, r3, r5
 80042fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004300:	460a      	mov	r2, r1
 8004302:	f04f 0500 	mov.w	r5, #0
 8004306:	bf88      	it	hi
 8004308:	608b      	strhi	r3, [r1, #8]
 800430a:	680b      	ldr	r3, [r1, #0]
 800430c:	4680      	mov	r8, r0
 800430e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004312:	f842 3b1c 	str.w	r3, [r2], #28
 8004316:	460c      	mov	r4, r1
 8004318:	bf98      	it	ls
 800431a:	f04f 0b00 	movls.w	fp, #0
 800431e:	4616      	mov	r6, r2
 8004320:	46aa      	mov	sl, r5
 8004322:	462f      	mov	r7, r5
 8004324:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004328:	9201      	str	r2, [sp, #4]
 800432a:	9502      	str	r5, [sp, #8]
 800432c:	68a2      	ldr	r2, [r4, #8]
 800432e:	b15a      	cbz	r2, 8004348 <_scanf_float+0x68>
 8004330:	f8d9 3000 	ldr.w	r3, [r9]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b4e      	cmp	r3, #78	@ 0x4e
 8004338:	d862      	bhi.n	8004400 <_scanf_float+0x120>
 800433a:	2b40      	cmp	r3, #64	@ 0x40
 800433c:	d83a      	bhi.n	80043b4 <_scanf_float+0xd4>
 800433e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004342:	b2c8      	uxtb	r0, r1
 8004344:	280e      	cmp	r0, #14
 8004346:	d938      	bls.n	80043ba <_scanf_float+0xda>
 8004348:	b11f      	cbz	r7, 8004352 <_scanf_float+0x72>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004356:	f1ba 0f01 	cmp.w	sl, #1
 800435a:	f200 8114 	bhi.w	8004586 <_scanf_float+0x2a6>
 800435e:	9b01      	ldr	r3, [sp, #4]
 8004360:	429e      	cmp	r6, r3
 8004362:	f200 8105 	bhi.w	8004570 <_scanf_float+0x290>
 8004366:	2001      	movs	r0, #1
 8004368:	b007      	add	sp, #28
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004372:	2a0d      	cmp	r2, #13
 8004374:	d8e8      	bhi.n	8004348 <_scanf_float+0x68>
 8004376:	a101      	add	r1, pc, #4	@ (adr r1, 800437c <_scanf_float+0x9c>)
 8004378:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800437c:	080044c5 	.word	0x080044c5
 8004380:	08004349 	.word	0x08004349
 8004384:	08004349 	.word	0x08004349
 8004388:	08004349 	.word	0x08004349
 800438c:	08004521 	.word	0x08004521
 8004390:	080044fb 	.word	0x080044fb
 8004394:	08004349 	.word	0x08004349
 8004398:	08004349 	.word	0x08004349
 800439c:	080044d3 	.word	0x080044d3
 80043a0:	08004349 	.word	0x08004349
 80043a4:	08004349 	.word	0x08004349
 80043a8:	08004349 	.word	0x08004349
 80043ac:	08004349 	.word	0x08004349
 80043b0:	0800448f 	.word	0x0800448f
 80043b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80043b8:	e7db      	b.n	8004372 <_scanf_float+0x92>
 80043ba:	290e      	cmp	r1, #14
 80043bc:	d8c4      	bhi.n	8004348 <_scanf_float+0x68>
 80043be:	a001      	add	r0, pc, #4	@ (adr r0, 80043c4 <_scanf_float+0xe4>)
 80043c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80043c4:	0800447f 	.word	0x0800447f
 80043c8:	08004349 	.word	0x08004349
 80043cc:	0800447f 	.word	0x0800447f
 80043d0:	0800450f 	.word	0x0800450f
 80043d4:	08004349 	.word	0x08004349
 80043d8:	08004421 	.word	0x08004421
 80043dc:	08004465 	.word	0x08004465
 80043e0:	08004465 	.word	0x08004465
 80043e4:	08004465 	.word	0x08004465
 80043e8:	08004465 	.word	0x08004465
 80043ec:	08004465 	.word	0x08004465
 80043f0:	08004465 	.word	0x08004465
 80043f4:	08004465 	.word	0x08004465
 80043f8:	08004465 	.word	0x08004465
 80043fc:	08004465 	.word	0x08004465
 8004400:	2b6e      	cmp	r3, #110	@ 0x6e
 8004402:	d809      	bhi.n	8004418 <_scanf_float+0x138>
 8004404:	2b60      	cmp	r3, #96	@ 0x60
 8004406:	d8b2      	bhi.n	800436e <_scanf_float+0x8e>
 8004408:	2b54      	cmp	r3, #84	@ 0x54
 800440a:	d07b      	beq.n	8004504 <_scanf_float+0x224>
 800440c:	2b59      	cmp	r3, #89	@ 0x59
 800440e:	d19b      	bne.n	8004348 <_scanf_float+0x68>
 8004410:	2d07      	cmp	r5, #7
 8004412:	d199      	bne.n	8004348 <_scanf_float+0x68>
 8004414:	2508      	movs	r5, #8
 8004416:	e02f      	b.n	8004478 <_scanf_float+0x198>
 8004418:	2b74      	cmp	r3, #116	@ 0x74
 800441a:	d073      	beq.n	8004504 <_scanf_float+0x224>
 800441c:	2b79      	cmp	r3, #121	@ 0x79
 800441e:	e7f6      	b.n	800440e <_scanf_float+0x12e>
 8004420:	6821      	ldr	r1, [r4, #0]
 8004422:	05c8      	lsls	r0, r1, #23
 8004424:	d51e      	bpl.n	8004464 <_scanf_float+0x184>
 8004426:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800442a:	6021      	str	r1, [r4, #0]
 800442c:	3701      	adds	r7, #1
 800442e:	f1bb 0f00 	cmp.w	fp, #0
 8004432:	d003      	beq.n	800443c <_scanf_float+0x15c>
 8004434:	3201      	adds	r2, #1
 8004436:	f10b 3bff 	add.w	fp, fp, #4294967295
 800443a:	60a2      	str	r2, [r4, #8]
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	3b01      	subs	r3, #1
 8004440:	60a3      	str	r3, [r4, #8]
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	3301      	adds	r3, #1
 8004446:	6123      	str	r3, [r4, #16]
 8004448:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f8c9 3004 	str.w	r3, [r9, #4]
 8004454:	f340 8083 	ble.w	800455e <_scanf_float+0x27e>
 8004458:	f8d9 3000 	ldr.w	r3, [r9]
 800445c:	3301      	adds	r3, #1
 800445e:	f8c9 3000 	str.w	r3, [r9]
 8004462:	e763      	b.n	800432c <_scanf_float+0x4c>
 8004464:	eb1a 0105 	adds.w	r1, sl, r5
 8004468:	f47f af6e 	bne.w	8004348 <_scanf_float+0x68>
 800446c:	460d      	mov	r5, r1
 800446e:	468a      	mov	sl, r1
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004476:	6022      	str	r2, [r4, #0]
 8004478:	f806 3b01 	strb.w	r3, [r6], #1
 800447c:	e7de      	b.n	800443c <_scanf_float+0x15c>
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	0610      	lsls	r0, r2, #24
 8004482:	f57f af61 	bpl.w	8004348 <_scanf_float+0x68>
 8004486:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800448a:	6022      	str	r2, [r4, #0]
 800448c:	e7f4      	b.n	8004478 <_scanf_float+0x198>
 800448e:	f1ba 0f00 	cmp.w	sl, #0
 8004492:	d10c      	bne.n	80044ae <_scanf_float+0x1ce>
 8004494:	b977      	cbnz	r7, 80044b4 <_scanf_float+0x1d4>
 8004496:	6822      	ldr	r2, [r4, #0]
 8004498:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800449c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80044a0:	d108      	bne.n	80044b4 <_scanf_float+0x1d4>
 80044a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80044a6:	f04f 0a01 	mov.w	sl, #1
 80044aa:	6022      	str	r2, [r4, #0]
 80044ac:	e7e4      	b.n	8004478 <_scanf_float+0x198>
 80044ae:	f1ba 0f02 	cmp.w	sl, #2
 80044b2:	d051      	beq.n	8004558 <_scanf_float+0x278>
 80044b4:	2d01      	cmp	r5, #1
 80044b6:	d002      	beq.n	80044be <_scanf_float+0x1de>
 80044b8:	2d04      	cmp	r5, #4
 80044ba:	f47f af45 	bne.w	8004348 <_scanf_float+0x68>
 80044be:	3501      	adds	r5, #1
 80044c0:	b2ed      	uxtb	r5, r5
 80044c2:	e7d9      	b.n	8004478 <_scanf_float+0x198>
 80044c4:	f1ba 0f01 	cmp.w	sl, #1
 80044c8:	f47f af3e 	bne.w	8004348 <_scanf_float+0x68>
 80044cc:	f04f 0a02 	mov.w	sl, #2
 80044d0:	e7d2      	b.n	8004478 <_scanf_float+0x198>
 80044d2:	b975      	cbnz	r5, 80044f2 <_scanf_float+0x212>
 80044d4:	2f00      	cmp	r7, #0
 80044d6:	f47f af38 	bne.w	800434a <_scanf_float+0x6a>
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80044e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80044e4:	f040 80ff 	bne.w	80046e6 <_scanf_float+0x406>
 80044e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80044ec:	2501      	movs	r5, #1
 80044ee:	6022      	str	r2, [r4, #0]
 80044f0:	e7c2      	b.n	8004478 <_scanf_float+0x198>
 80044f2:	2d03      	cmp	r5, #3
 80044f4:	d0e3      	beq.n	80044be <_scanf_float+0x1de>
 80044f6:	2d05      	cmp	r5, #5
 80044f8:	e7df      	b.n	80044ba <_scanf_float+0x1da>
 80044fa:	2d02      	cmp	r5, #2
 80044fc:	f47f af24 	bne.w	8004348 <_scanf_float+0x68>
 8004500:	2503      	movs	r5, #3
 8004502:	e7b9      	b.n	8004478 <_scanf_float+0x198>
 8004504:	2d06      	cmp	r5, #6
 8004506:	f47f af1f 	bne.w	8004348 <_scanf_float+0x68>
 800450a:	2507      	movs	r5, #7
 800450c:	e7b4      	b.n	8004478 <_scanf_float+0x198>
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	0591      	lsls	r1, r2, #22
 8004512:	f57f af19 	bpl.w	8004348 <_scanf_float+0x68>
 8004516:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800451a:	6022      	str	r2, [r4, #0]
 800451c:	9702      	str	r7, [sp, #8]
 800451e:	e7ab      	b.n	8004478 <_scanf_float+0x198>
 8004520:	6822      	ldr	r2, [r4, #0]
 8004522:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004526:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800452a:	d005      	beq.n	8004538 <_scanf_float+0x258>
 800452c:	0550      	lsls	r0, r2, #21
 800452e:	f57f af0b 	bpl.w	8004348 <_scanf_float+0x68>
 8004532:	2f00      	cmp	r7, #0
 8004534:	f000 80d7 	beq.w	80046e6 <_scanf_float+0x406>
 8004538:	0591      	lsls	r1, r2, #22
 800453a:	bf58      	it	pl
 800453c:	9902      	ldrpl	r1, [sp, #8]
 800453e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004542:	bf58      	it	pl
 8004544:	1a79      	subpl	r1, r7, r1
 8004546:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800454a:	f04f 0700 	mov.w	r7, #0
 800454e:	bf58      	it	pl
 8004550:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	e78f      	b.n	8004478 <_scanf_float+0x198>
 8004558:	f04f 0a03 	mov.w	sl, #3
 800455c:	e78c      	b.n	8004478 <_scanf_float+0x198>
 800455e:	4649      	mov	r1, r9
 8004560:	4640      	mov	r0, r8
 8004562:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004566:	4798      	blx	r3
 8004568:	2800      	cmp	r0, #0
 800456a:	f43f aedf 	beq.w	800432c <_scanf_float+0x4c>
 800456e:	e6eb      	b.n	8004348 <_scanf_float+0x68>
 8004570:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004574:	464a      	mov	r2, r9
 8004576:	4640      	mov	r0, r8
 8004578:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800457c:	4798      	blx	r3
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	3b01      	subs	r3, #1
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	e6eb      	b.n	800435e <_scanf_float+0x7e>
 8004586:	1e6b      	subs	r3, r5, #1
 8004588:	2b06      	cmp	r3, #6
 800458a:	d824      	bhi.n	80045d6 <_scanf_float+0x2f6>
 800458c:	2d02      	cmp	r5, #2
 800458e:	d836      	bhi.n	80045fe <_scanf_float+0x31e>
 8004590:	9b01      	ldr	r3, [sp, #4]
 8004592:	429e      	cmp	r6, r3
 8004594:	f67f aee7 	bls.w	8004366 <_scanf_float+0x86>
 8004598:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800459c:	464a      	mov	r2, r9
 800459e:	4640      	mov	r0, r8
 80045a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045a4:	4798      	blx	r3
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	6123      	str	r3, [r4, #16]
 80045ac:	e7f0      	b.n	8004590 <_scanf_float+0x2b0>
 80045ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80045b2:	464a      	mov	r2, r9
 80045b4:	4640      	mov	r0, r8
 80045b6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80045ba:	4798      	blx	r3
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	3b01      	subs	r3, #1
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045c6:	fa5f fa8a 	uxtb.w	sl, sl
 80045ca:	f1ba 0f02 	cmp.w	sl, #2
 80045ce:	d1ee      	bne.n	80045ae <_scanf_float+0x2ce>
 80045d0:	3d03      	subs	r5, #3
 80045d2:	b2ed      	uxtb	r5, r5
 80045d4:	1b76      	subs	r6, r6, r5
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	05da      	lsls	r2, r3, #23
 80045da:	d530      	bpl.n	800463e <_scanf_float+0x35e>
 80045dc:	055b      	lsls	r3, r3, #21
 80045de:	d511      	bpl.n	8004604 <_scanf_float+0x324>
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	429e      	cmp	r6, r3
 80045e4:	f67f aebf 	bls.w	8004366 <_scanf_float+0x86>
 80045e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80045ec:	464a      	mov	r2, r9
 80045ee:	4640      	mov	r0, r8
 80045f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045f4:	4798      	blx	r3
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	e7f0      	b.n	80045e0 <_scanf_float+0x300>
 80045fe:	46aa      	mov	sl, r5
 8004600:	46b3      	mov	fp, r6
 8004602:	e7de      	b.n	80045c2 <_scanf_float+0x2e2>
 8004604:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	2965      	cmp	r1, #101	@ 0x65
 800460c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004610:	f106 35ff 	add.w	r5, r6, #4294967295
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	d00c      	beq.n	8004632 <_scanf_float+0x352>
 8004618:	2945      	cmp	r1, #69	@ 0x45
 800461a:	d00a      	beq.n	8004632 <_scanf_float+0x352>
 800461c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004620:	464a      	mov	r2, r9
 8004622:	4640      	mov	r0, r8
 8004624:	4798      	blx	r3
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800462c:	3b01      	subs	r3, #1
 800462e:	1eb5      	subs	r5, r6, #2
 8004630:	6123      	str	r3, [r4, #16]
 8004632:	464a      	mov	r2, r9
 8004634:	4640      	mov	r0, r8
 8004636:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800463a:	4798      	blx	r3
 800463c:	462e      	mov	r6, r5
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	f012 0210 	ands.w	r2, r2, #16
 8004644:	d001      	beq.n	800464a <_scanf_float+0x36a>
 8004646:	2000      	movs	r0, #0
 8004648:	e68e      	b.n	8004368 <_scanf_float+0x88>
 800464a:	7032      	strb	r2, [r6, #0]
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d125      	bne.n	80046a4 <_scanf_float+0x3c4>
 8004658:	9b02      	ldr	r3, [sp, #8]
 800465a:	429f      	cmp	r7, r3
 800465c:	d00a      	beq.n	8004674 <_scanf_float+0x394>
 800465e:	1bda      	subs	r2, r3, r7
 8004660:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004664:	429e      	cmp	r6, r3
 8004666:	bf28      	it	cs
 8004668:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800466c:	4630      	mov	r0, r6
 800466e:	491f      	ldr	r1, [pc, #124]	@ (80046ec <_scanf_float+0x40c>)
 8004670:	f000 f902 	bl	8004878 <siprintf>
 8004674:	2200      	movs	r2, #0
 8004676:	4640      	mov	r0, r8
 8004678:	9901      	ldr	r1, [sp, #4]
 800467a:	f002 fbe9 	bl	8006e50 <_strtod_r>
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	6825      	ldr	r5, [r4, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f015 0f02 	tst.w	r5, #2
 8004688:	4606      	mov	r6, r0
 800468a:	460f      	mov	r7, r1
 800468c:	f103 0204 	add.w	r2, r3, #4
 8004690:	d015      	beq.n	80046be <_scanf_float+0x3de>
 8004692:	9903      	ldr	r1, [sp, #12]
 8004694:	600a      	str	r2, [r1, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	e9c3 6700 	strd	r6, r7, [r3]
 800469c:	68e3      	ldr	r3, [r4, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60e3      	str	r3, [r4, #12]
 80046a2:	e7d0      	b.n	8004646 <_scanf_float+0x366>
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0e4      	beq.n	8004674 <_scanf_float+0x394>
 80046aa:	9905      	ldr	r1, [sp, #20]
 80046ac:	230a      	movs	r3, #10
 80046ae:	4640      	mov	r0, r8
 80046b0:	3101      	adds	r1, #1
 80046b2:	f002 fc4d 	bl	8006f50 <_strtol_r>
 80046b6:	9b04      	ldr	r3, [sp, #16]
 80046b8:	9e05      	ldr	r6, [sp, #20]
 80046ba:	1ac2      	subs	r2, r0, r3
 80046bc:	e7d0      	b.n	8004660 <_scanf_float+0x380>
 80046be:	076d      	lsls	r5, r5, #29
 80046c0:	d4e7      	bmi.n	8004692 <_scanf_float+0x3b2>
 80046c2:	9d03      	ldr	r5, [sp, #12]
 80046c4:	602a      	str	r2, [r5, #0]
 80046c6:	681d      	ldr	r5, [r3, #0]
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	f7fc f99e 	bl	8000a0c <__aeabi_dcmpun>
 80046d0:	b120      	cbz	r0, 80046dc <_scanf_float+0x3fc>
 80046d2:	4807      	ldr	r0, [pc, #28]	@ (80046f0 <_scanf_float+0x410>)
 80046d4:	f000 f9c4 	bl	8004a60 <nanf>
 80046d8:	6028      	str	r0, [r5, #0]
 80046da:	e7df      	b.n	800469c <_scanf_float+0x3bc>
 80046dc:	4630      	mov	r0, r6
 80046de:	4639      	mov	r1, r7
 80046e0:	f7fc f9f2 	bl	8000ac8 <__aeabi_d2f>
 80046e4:	e7f8      	b.n	80046d8 <_scanf_float+0x3f8>
 80046e6:	2700      	movs	r7, #0
 80046e8:	e633      	b.n	8004352 <_scanf_float+0x72>
 80046ea:	bf00      	nop
 80046ec:	0800818a 	.word	0x0800818a
 80046f0:	080082cb 	.word	0x080082cb

080046f4 <std>:
 80046f4:	2300      	movs	r3, #0
 80046f6:	b510      	push	{r4, lr}
 80046f8:	4604      	mov	r4, r0
 80046fa:	e9c0 3300 	strd	r3, r3, [r0]
 80046fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004702:	6083      	str	r3, [r0, #8]
 8004704:	8181      	strh	r1, [r0, #12]
 8004706:	6643      	str	r3, [r0, #100]	@ 0x64
 8004708:	81c2      	strh	r2, [r0, #14]
 800470a:	6183      	str	r3, [r0, #24]
 800470c:	4619      	mov	r1, r3
 800470e:	2208      	movs	r2, #8
 8004710:	305c      	adds	r0, #92	@ 0x5c
 8004712:	f000 f916 	bl	8004942 <memset>
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <std+0x58>)
 8004718:	6224      	str	r4, [r4, #32]
 800471a:	6263      	str	r3, [r4, #36]	@ 0x24
 800471c:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <std+0x5c>)
 800471e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <std+0x60>)
 8004722:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <std+0x64>)
 8004726:	6323      	str	r3, [r4, #48]	@ 0x30
 8004728:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <std+0x68>)
 800472a:	429c      	cmp	r4, r3
 800472c:	d006      	beq.n	800473c <std+0x48>
 800472e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004732:	4294      	cmp	r4, r2
 8004734:	d002      	beq.n	800473c <std+0x48>
 8004736:	33d0      	adds	r3, #208	@ 0xd0
 8004738:	429c      	cmp	r4, r3
 800473a:	d105      	bne.n	8004748 <std+0x54>
 800473c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004744:	f000 b97a 	b.w	8004a3c <__retarget_lock_init_recursive>
 8004748:	bd10      	pop	{r4, pc}
 800474a:	bf00      	nop
 800474c:	080048bd 	.word	0x080048bd
 8004750:	080048df 	.word	0x080048df
 8004754:	08004917 	.word	0x08004917
 8004758:	0800493b 	.word	0x0800493b
 800475c:	2000029c 	.word	0x2000029c

08004760 <stdio_exit_handler>:
 8004760:	4a02      	ldr	r2, [pc, #8]	@ (800476c <stdio_exit_handler+0xc>)
 8004762:	4903      	ldr	r1, [pc, #12]	@ (8004770 <stdio_exit_handler+0x10>)
 8004764:	4803      	ldr	r0, [pc, #12]	@ (8004774 <stdio_exit_handler+0x14>)
 8004766:	f000 b869 	b.w	800483c <_fwalk_sglue>
 800476a:	bf00      	nop
 800476c:	2000000c 	.word	0x2000000c
 8004770:	08007305 	.word	0x08007305
 8004774:	2000001c 	.word	0x2000001c

08004778 <cleanup_stdio>:
 8004778:	6841      	ldr	r1, [r0, #4]
 800477a:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <cleanup_stdio+0x34>)
 800477c:	b510      	push	{r4, lr}
 800477e:	4299      	cmp	r1, r3
 8004780:	4604      	mov	r4, r0
 8004782:	d001      	beq.n	8004788 <cleanup_stdio+0x10>
 8004784:	f002 fdbe 	bl	8007304 <_fflush_r>
 8004788:	68a1      	ldr	r1, [r4, #8]
 800478a:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <cleanup_stdio+0x38>)
 800478c:	4299      	cmp	r1, r3
 800478e:	d002      	beq.n	8004796 <cleanup_stdio+0x1e>
 8004790:	4620      	mov	r0, r4
 8004792:	f002 fdb7 	bl	8007304 <_fflush_r>
 8004796:	68e1      	ldr	r1, [r4, #12]
 8004798:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <cleanup_stdio+0x3c>)
 800479a:	4299      	cmp	r1, r3
 800479c:	d004      	beq.n	80047a8 <cleanup_stdio+0x30>
 800479e:	4620      	mov	r0, r4
 80047a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a4:	f002 bdae 	b.w	8007304 <_fflush_r>
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop
 80047ac:	2000029c 	.word	0x2000029c
 80047b0:	20000304 	.word	0x20000304
 80047b4:	2000036c 	.word	0x2000036c

080047b8 <global_stdio_init.part.0>:
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <global_stdio_init.part.0+0x30>)
 80047bc:	4c0b      	ldr	r4, [pc, #44]	@ (80047ec <global_stdio_init.part.0+0x34>)
 80047be:	4a0c      	ldr	r2, [pc, #48]	@ (80047f0 <global_stdio_init.part.0+0x38>)
 80047c0:	4620      	mov	r0, r4
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	2104      	movs	r1, #4
 80047c6:	2200      	movs	r2, #0
 80047c8:	f7ff ff94 	bl	80046f4 <std>
 80047cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047d0:	2201      	movs	r2, #1
 80047d2:	2109      	movs	r1, #9
 80047d4:	f7ff ff8e 	bl	80046f4 <std>
 80047d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047dc:	2202      	movs	r2, #2
 80047de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e2:	2112      	movs	r1, #18
 80047e4:	f7ff bf86 	b.w	80046f4 <std>
 80047e8:	200003d4 	.word	0x200003d4
 80047ec:	2000029c 	.word	0x2000029c
 80047f0:	08004761 	.word	0x08004761

080047f4 <__sfp_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__sfp_lock_acquire+0x8>)
 80047f6:	f000 b922 	b.w	8004a3e <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	200003dd 	.word	0x200003dd

08004800 <__sfp_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	@ (8004808 <__sfp_lock_release+0x8>)
 8004802:	f000 b91d 	b.w	8004a40 <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	200003dd 	.word	0x200003dd

0800480c <__sinit>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	f7ff fff0 	bl	80047f4 <__sfp_lock_acquire>
 8004814:	6a23      	ldr	r3, [r4, #32]
 8004816:	b11b      	cbz	r3, 8004820 <__sinit+0x14>
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f7ff bff0 	b.w	8004800 <__sfp_lock_release>
 8004820:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <__sinit+0x28>)
 8004822:	6223      	str	r3, [r4, #32]
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <__sinit+0x2c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f5      	bne.n	8004818 <__sinit+0xc>
 800482c:	f7ff ffc4 	bl	80047b8 <global_stdio_init.part.0>
 8004830:	e7f2      	b.n	8004818 <__sinit+0xc>
 8004832:	bf00      	nop
 8004834:	08004779 	.word	0x08004779
 8004838:	200003d4 	.word	0x200003d4

0800483c <_fwalk_sglue>:
 800483c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004840:	4607      	mov	r7, r0
 8004842:	4688      	mov	r8, r1
 8004844:	4614      	mov	r4, r2
 8004846:	2600      	movs	r6, #0
 8004848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800484c:	f1b9 0901 	subs.w	r9, r9, #1
 8004850:	d505      	bpl.n	800485e <_fwalk_sglue+0x22>
 8004852:	6824      	ldr	r4, [r4, #0]
 8004854:	2c00      	cmp	r4, #0
 8004856:	d1f7      	bne.n	8004848 <_fwalk_sglue+0xc>
 8004858:	4630      	mov	r0, r6
 800485a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485e:	89ab      	ldrh	r3, [r5, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d907      	bls.n	8004874 <_fwalk_sglue+0x38>
 8004864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004868:	3301      	adds	r3, #1
 800486a:	d003      	beq.n	8004874 <_fwalk_sglue+0x38>
 800486c:	4629      	mov	r1, r5
 800486e:	4638      	mov	r0, r7
 8004870:	47c0      	blx	r8
 8004872:	4306      	orrs	r6, r0
 8004874:	3568      	adds	r5, #104	@ 0x68
 8004876:	e7e9      	b.n	800484c <_fwalk_sglue+0x10>

08004878 <siprintf>:
 8004878:	b40e      	push	{r1, r2, r3}
 800487a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800487e:	b510      	push	{r4, lr}
 8004880:	2400      	movs	r4, #0
 8004882:	b09d      	sub	sp, #116	@ 0x74
 8004884:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004886:	9002      	str	r0, [sp, #8]
 8004888:	9006      	str	r0, [sp, #24]
 800488a:	9107      	str	r1, [sp, #28]
 800488c:	9104      	str	r1, [sp, #16]
 800488e:	4809      	ldr	r0, [pc, #36]	@ (80048b4 <siprintf+0x3c>)
 8004890:	4909      	ldr	r1, [pc, #36]	@ (80048b8 <siprintf+0x40>)
 8004892:	f853 2b04 	ldr.w	r2, [r3], #4
 8004896:	9105      	str	r1, [sp, #20]
 8004898:	6800      	ldr	r0, [r0, #0]
 800489a:	a902      	add	r1, sp, #8
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048a0:	f002 fbb4 	bl	800700c <_svfiprintf_r>
 80048a4:	9b02      	ldr	r3, [sp, #8]
 80048a6:	701c      	strb	r4, [r3, #0]
 80048a8:	b01d      	add	sp, #116	@ 0x74
 80048aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ae:	b003      	add	sp, #12
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000018 	.word	0x20000018
 80048b8:	ffff0208 	.word	0xffff0208

080048bc <__sread>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	460c      	mov	r4, r1
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	f000 f86c 	bl	80049a0 <_read_r>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	bfab      	itete	ge
 80048cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048ce:	89a3      	ldrhlt	r3, [r4, #12]
 80048d0:	181b      	addge	r3, r3, r0
 80048d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048d6:	bfac      	ite	ge
 80048d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048da:	81a3      	strhlt	r3, [r4, #12]
 80048dc:	bd10      	pop	{r4, pc}

080048de <__swrite>:
 80048de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	461f      	mov	r7, r3
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	4605      	mov	r5, r0
 80048e8:	05db      	lsls	r3, r3, #23
 80048ea:	460c      	mov	r4, r1
 80048ec:	4616      	mov	r6, r2
 80048ee:	d505      	bpl.n	80048fc <__swrite+0x1e>
 80048f0:	2302      	movs	r3, #2
 80048f2:	2200      	movs	r2, #0
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	f000 f840 	bl	800497c <_lseek_r>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	4632      	mov	r2, r6
 8004900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	4628      	mov	r0, r5
 8004908:	463b      	mov	r3, r7
 800490a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	f000 b857 	b.w	80049c4 <_write_r>

08004916 <__sseek>:
 8004916:	b510      	push	{r4, lr}
 8004918:	460c      	mov	r4, r1
 800491a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491e:	f000 f82d 	bl	800497c <_lseek_r>
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	bf15      	itete	ne
 8004928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800492a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800492e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004932:	81a3      	strheq	r3, [r4, #12]
 8004934:	bf18      	it	ne
 8004936:	81a3      	strhne	r3, [r4, #12]
 8004938:	bd10      	pop	{r4, pc}

0800493a <__sclose>:
 800493a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493e:	f000 b80d 	b.w	800495c <_close_r>

08004942 <memset>:
 8004942:	4603      	mov	r3, r0
 8004944:	4402      	add	r2, r0
 8004946:	4293      	cmp	r3, r2
 8004948:	d100      	bne.n	800494c <memset+0xa>
 800494a:	4770      	bx	lr
 800494c:	f803 1b01 	strb.w	r1, [r3], #1
 8004950:	e7f9      	b.n	8004946 <memset+0x4>
	...

08004954 <_localeconv_r>:
 8004954:	4800      	ldr	r0, [pc, #0]	@ (8004958 <_localeconv_r+0x4>)
 8004956:	4770      	bx	lr
 8004958:	20000158 	.word	0x20000158

0800495c <_close_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	2300      	movs	r3, #0
 8004960:	4d05      	ldr	r5, [pc, #20]	@ (8004978 <_close_r+0x1c>)
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	602b      	str	r3, [r5, #0]
 8004968:	f7fc fe03 	bl	8001572 <_close>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_close_r+0x1a>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_close_r+0x1a>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	200003d8 	.word	0x200003d8

0800497c <_lseek_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	2200      	movs	r2, #0
 8004986:	4d05      	ldr	r5, [pc, #20]	@ (800499c <_lseek_r+0x20>)
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f7fc fe15 	bl	80015ba <_lseek>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_lseek_r+0x1e>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_lseek_r+0x1e>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	200003d8 	.word	0x200003d8

080049a0 <_read_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	2200      	movs	r2, #0
 80049aa:	4d05      	ldr	r5, [pc, #20]	@ (80049c0 <_read_r+0x20>)
 80049ac:	602a      	str	r2, [r5, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f7fc fda6 	bl	8001500 <_read>
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	d102      	bne.n	80049be <_read_r+0x1e>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	b103      	cbz	r3, 80049be <_read_r+0x1e>
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	bd38      	pop	{r3, r4, r5, pc}
 80049c0:	200003d8 	.word	0x200003d8

080049c4 <_write_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	2200      	movs	r2, #0
 80049ce:	4d05      	ldr	r5, [pc, #20]	@ (80049e4 <_write_r+0x20>)
 80049d0:	602a      	str	r2, [r5, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f7fc fdb1 	bl	800153a <_write>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_write_r+0x1e>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_write_r+0x1e>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	200003d8 	.word	0x200003d8

080049e8 <__errno>:
 80049e8:	4b01      	ldr	r3, [pc, #4]	@ (80049f0 <__errno+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000018 	.word	0x20000018

080049f4 <__libc_init_array>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	2600      	movs	r6, #0
 80049f8:	4d0c      	ldr	r5, [pc, #48]	@ (8004a2c <__libc_init_array+0x38>)
 80049fa:	4c0d      	ldr	r4, [pc, #52]	@ (8004a30 <__libc_init_array+0x3c>)
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	42a6      	cmp	r6, r4
 8004a02:	d109      	bne.n	8004a18 <__libc_init_array+0x24>
 8004a04:	f003 fb6a 	bl	80080dc <_init>
 8004a08:	2600      	movs	r6, #0
 8004a0a:	4d0a      	ldr	r5, [pc, #40]	@ (8004a34 <__libc_init_array+0x40>)
 8004a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a38 <__libc_init_array+0x44>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	42a6      	cmp	r6, r4
 8004a14:	d105      	bne.n	8004a22 <__libc_init_array+0x2e>
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
 8004a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1c:	4798      	blx	r3
 8004a1e:	3601      	adds	r6, #1
 8004a20:	e7ee      	b.n	8004a00 <__libc_init_array+0xc>
 8004a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a26:	4798      	blx	r3
 8004a28:	3601      	adds	r6, #1
 8004a2a:	e7f2      	b.n	8004a12 <__libc_init_array+0x1e>
 8004a2c:	08008584 	.word	0x08008584
 8004a30:	08008584 	.word	0x08008584
 8004a34:	08008584 	.word	0x08008584
 8004a38:	08008588 	.word	0x08008588

08004a3c <__retarget_lock_init_recursive>:
 8004a3c:	4770      	bx	lr

08004a3e <__retarget_lock_acquire_recursive>:
 8004a3e:	4770      	bx	lr

08004a40 <__retarget_lock_release_recursive>:
 8004a40:	4770      	bx	lr

08004a42 <memchr>:
 8004a42:	4603      	mov	r3, r0
 8004a44:	b510      	push	{r4, lr}
 8004a46:	b2c9      	uxtb	r1, r1
 8004a48:	4402      	add	r2, r0
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	d101      	bne.n	8004a54 <memchr+0x12>
 8004a50:	2000      	movs	r0, #0
 8004a52:	e003      	b.n	8004a5c <memchr+0x1a>
 8004a54:	7804      	ldrb	r4, [r0, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	428c      	cmp	r4, r1
 8004a5a:	d1f6      	bne.n	8004a4a <memchr+0x8>
 8004a5c:	bd10      	pop	{r4, pc}
	...

08004a60 <nanf>:
 8004a60:	4800      	ldr	r0, [pc, #0]	@ (8004a64 <nanf+0x4>)
 8004a62:	4770      	bx	lr
 8004a64:	7fc00000 	.word	0x7fc00000

08004a68 <quorem>:
 8004a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	6903      	ldr	r3, [r0, #16]
 8004a6e:	690c      	ldr	r4, [r1, #16]
 8004a70:	4607      	mov	r7, r0
 8004a72:	42a3      	cmp	r3, r4
 8004a74:	db7e      	blt.n	8004b74 <quorem+0x10c>
 8004a76:	3c01      	subs	r4, #1
 8004a78:	00a3      	lsls	r3, r4, #2
 8004a7a:	f100 0514 	add.w	r5, r0, #20
 8004a7e:	f101 0814 	add.w	r8, r1, #20
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a92:	3301      	adds	r3, #1
 8004a94:	429a      	cmp	r2, r3
 8004a96:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a9e:	d32e      	bcc.n	8004afe <quorem+0x96>
 8004aa0:	f04f 0a00 	mov.w	sl, #0
 8004aa4:	46c4      	mov	ip, r8
 8004aa6:	46ae      	mov	lr, r5
 8004aa8:	46d3      	mov	fp, sl
 8004aaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004aae:	b298      	uxth	r0, r3
 8004ab0:	fb06 a000 	mla	r0, r6, r0, sl
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	0c02      	lsrs	r2, r0, #16
 8004ab8:	fb06 2303 	mla	r3, r6, r3, r2
 8004abc:	f8de 2000 	ldr.w	r2, [lr]
 8004ac0:	b280      	uxth	r0, r0
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	1a12      	subs	r2, r2, r0
 8004ac6:	445a      	add	r2, fp
 8004ac8:	f8de 0000 	ldr.w	r0, [lr]
 8004acc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ad6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ada:	b292      	uxth	r2, r2
 8004adc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ae0:	45e1      	cmp	r9, ip
 8004ae2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ae6:	f84e 2b04 	str.w	r2, [lr], #4
 8004aea:	d2de      	bcs.n	8004aaa <quorem+0x42>
 8004aec:	9b00      	ldr	r3, [sp, #0]
 8004aee:	58eb      	ldr	r3, [r5, r3]
 8004af0:	b92b      	cbnz	r3, 8004afe <quorem+0x96>
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	429d      	cmp	r5, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	d32f      	bcc.n	8004b5c <quorem+0xf4>
 8004afc:	613c      	str	r4, [r7, #16]
 8004afe:	4638      	mov	r0, r7
 8004b00:	f001 f9c8 	bl	8005e94 <__mcmp>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	db25      	blt.n	8004b54 <quorem+0xec>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b10:	f8d1 c000 	ldr.w	ip, [r1]
 8004b14:	fa1f fe82 	uxth.w	lr, r2
 8004b18:	fa1f f38c 	uxth.w	r3, ip
 8004b1c:	eba3 030e 	sub.w	r3, r3, lr
 8004b20:	4403      	add	r3, r0
 8004b22:	0c12      	lsrs	r2, r2, #16
 8004b24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b32:	45c1      	cmp	r9, r8
 8004b34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b38:	f841 3b04 	str.w	r3, [r1], #4
 8004b3c:	d2e6      	bcs.n	8004b0c <quorem+0xa4>
 8004b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b46:	b922      	cbnz	r2, 8004b52 <quorem+0xea>
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	429d      	cmp	r5, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	d30b      	bcc.n	8004b68 <quorem+0x100>
 8004b50:	613c      	str	r4, [r7, #16]
 8004b52:	3601      	adds	r6, #1
 8004b54:	4630      	mov	r0, r6
 8004b56:	b003      	add	sp, #12
 8004b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	3b04      	subs	r3, #4
 8004b60:	2a00      	cmp	r2, #0
 8004b62:	d1cb      	bne.n	8004afc <quorem+0x94>
 8004b64:	3c01      	subs	r4, #1
 8004b66:	e7c6      	b.n	8004af6 <quorem+0x8e>
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	3b04      	subs	r3, #4
 8004b6c:	2a00      	cmp	r2, #0
 8004b6e:	d1ef      	bne.n	8004b50 <quorem+0xe8>
 8004b70:	3c01      	subs	r4, #1
 8004b72:	e7ea      	b.n	8004b4a <quorem+0xe2>
 8004b74:	2000      	movs	r0, #0
 8004b76:	e7ee      	b.n	8004b56 <quorem+0xee>

08004b78 <_dtoa_r>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	69c7      	ldr	r7, [r0, #28]
 8004b82:	b097      	sub	sp, #92	@ 0x5c
 8004b84:	4681      	mov	r9, r0
 8004b86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004b8c:	b97f      	cbnz	r7, 8004bae <_dtoa_r+0x36>
 8004b8e:	2010      	movs	r0, #16
 8004b90:	f000 fe0e 	bl	80057b0 <malloc>
 8004b94:	4602      	mov	r2, r0
 8004b96:	f8c9 001c 	str.w	r0, [r9, #28]
 8004b9a:	b920      	cbnz	r0, 8004ba6 <_dtoa_r+0x2e>
 8004b9c:	21ef      	movs	r1, #239	@ 0xef
 8004b9e:	4bac      	ldr	r3, [pc, #688]	@ (8004e50 <_dtoa_r+0x2d8>)
 8004ba0:	48ac      	ldr	r0, [pc, #688]	@ (8004e54 <_dtoa_r+0x2dc>)
 8004ba2:	f002 fc27 	bl	80073f4 <__assert_func>
 8004ba6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004baa:	6007      	str	r7, [r0, #0]
 8004bac:	60c7      	str	r7, [r0, #12]
 8004bae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	b159      	cbz	r1, 8004bce <_dtoa_r+0x56>
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4093      	lsls	r3, r2
 8004bbc:	604a      	str	r2, [r1, #4]
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	4648      	mov	r0, r9
 8004bc2:	f000 feeb 	bl	800599c <_Bfree>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	1e2b      	subs	r3, r5, #0
 8004bd0:	bfaf      	iteee	ge
 8004bd2:	2300      	movge	r3, #0
 8004bd4:	2201      	movlt	r2, #1
 8004bd6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004bda:	9307      	strlt	r3, [sp, #28]
 8004bdc:	bfa8      	it	ge
 8004bde:	6033      	strge	r3, [r6, #0]
 8004be0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004be4:	4b9c      	ldr	r3, [pc, #624]	@ (8004e58 <_dtoa_r+0x2e0>)
 8004be6:	bfb8      	it	lt
 8004be8:	6032      	strlt	r2, [r6, #0]
 8004bea:	ea33 0308 	bics.w	r3, r3, r8
 8004bee:	d112      	bne.n	8004c16 <_dtoa_r+0x9e>
 8004bf0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004bf4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004bfc:	4323      	orrs	r3, r4
 8004bfe:	f000 855e 	beq.w	80056be <_dtoa_r+0xb46>
 8004c02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004e5c <_dtoa_r+0x2e4>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8560 	beq.w	80056ce <_dtoa_r+0xb56>
 8004c0e:	f10a 0303 	add.w	r3, sl, #3
 8004c12:	f000 bd5a 	b.w	80056ca <_dtoa_r+0xb52>
 8004c16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c22:	2200      	movs	r2, #0
 8004c24:	2300      	movs	r3, #0
 8004c26:	f7fb febf 	bl	80009a8 <__aeabi_dcmpeq>
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	b158      	cbz	r0, 8004c46 <_dtoa_r+0xce>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c36:	b113      	cbz	r3, 8004c3e <_dtoa_r+0xc6>
 8004c38:	4b89      	ldr	r3, [pc, #548]	@ (8004e60 <_dtoa_r+0x2e8>)
 8004c3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004e64 <_dtoa_r+0x2ec>
 8004c42:	f000 bd44 	b.w	80056ce <_dtoa_r+0xb56>
 8004c46:	ab14      	add	r3, sp, #80	@ 0x50
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	ab15      	add	r3, sp, #84	@ 0x54
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4648      	mov	r0, r9
 8004c50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c54:	f001 fa36 	bl	80060c4 <__d2b>
 8004c58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004c5c:	9003      	str	r0, [sp, #12]
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	d078      	beq.n	8004d54 <_dtoa_r+0x1dc>
 8004c62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c78:	9712      	str	r7, [sp, #72]	@ 0x48
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e68 <_dtoa_r+0x2f0>)
 8004c80:	f7fb fa72 	bl	8000168 <__aeabi_dsub>
 8004c84:	a36c      	add	r3, pc, #432	@ (adr r3, 8004e38 <_dtoa_r+0x2c0>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb fc25 	bl	80004d8 <__aeabi_dmul>
 8004c8e:	a36c      	add	r3, pc, #432	@ (adr r3, 8004e40 <_dtoa_r+0x2c8>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fa6a 	bl	800016c <__adddf3>
 8004c98:	4604      	mov	r4, r0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	f7fb fbb1 	bl	8000404 <__aeabi_i2d>
 8004ca2:	a369      	add	r3, pc, #420	@ (adr r3, 8004e48 <_dtoa_r+0x2d0>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fc16 	bl	80004d8 <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	f7fb fa5a 	bl	800016c <__adddf3>
 8004cb8:	4604      	mov	r4, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	f7fb febc 	bl	8000a38 <__aeabi_d2iz>
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fe77 	bl	80009bc <__aeabi_dcmplt>
 8004cce:	b140      	cbz	r0, 8004ce2 <_dtoa_r+0x16a>
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f7fb fb97 	bl	8000404 <__aeabi_i2d>
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	462b      	mov	r3, r5
 8004cda:	f7fb fe65 	bl	80009a8 <__aeabi_dcmpeq>
 8004cde:	b900      	cbnz	r0, 8004ce2 <_dtoa_r+0x16a>
 8004ce0:	3f01      	subs	r7, #1
 8004ce2:	2f16      	cmp	r7, #22
 8004ce4:	d854      	bhi.n	8004d90 <_dtoa_r+0x218>
 8004ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cea:	4b60      	ldr	r3, [pc, #384]	@ (8004e6c <_dtoa_r+0x2f4>)
 8004cec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fe62 	bl	80009bc <__aeabi_dcmplt>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d04b      	beq.n	8004d94 <_dtoa_r+0x21c>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	3f01      	subs	r7, #1
 8004d00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d04:	1b9b      	subs	r3, r3, r6
 8004d06:	1e5a      	subs	r2, r3, #1
 8004d08:	bf49      	itett	mi
 8004d0a:	f1c3 0301 	rsbmi	r3, r3, #1
 8004d0e:	2300      	movpl	r3, #0
 8004d10:	9304      	strmi	r3, [sp, #16]
 8004d12:	2300      	movmi	r3, #0
 8004d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d16:	bf54      	ite	pl
 8004d18:	9304      	strpl	r3, [sp, #16]
 8004d1a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004d1c:	2f00      	cmp	r7, #0
 8004d1e:	db3b      	blt.n	8004d98 <_dtoa_r+0x220>
 8004d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d22:	970e      	str	r7, [sp, #56]	@ 0x38
 8004d24:	443b      	add	r3, r7
 8004d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d28:	2300      	movs	r3, #0
 8004d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d865      	bhi.n	8004dfe <_dtoa_r+0x286>
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	bfc4      	itt	gt
 8004d36:	3b04      	subgt	r3, #4
 8004d38:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004d3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d3c:	bfc8      	it	gt
 8004d3e:	2400      	movgt	r4, #0
 8004d40:	f1a3 0302 	sub.w	r3, r3, #2
 8004d44:	bfd8      	it	le
 8004d46:	2401      	movle	r4, #1
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d864      	bhi.n	8004e16 <_dtoa_r+0x29e>
 8004d4c:	e8df f003 	tbb	[pc, r3]
 8004d50:	2c385553 	.word	0x2c385553
 8004d54:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004d58:	441e      	add	r6, r3
 8004d5a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	bfc1      	itttt	gt
 8004d62:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d66:	fa08 f803 	lslgt.w	r8, r8, r3
 8004d6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004d6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004d72:	bfd6      	itet	le
 8004d74:	f1c3 0320 	rsble	r3, r3, #32
 8004d78:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d7c:	fa04 f003 	lslle.w	r0, r4, r3
 8004d80:	f7fb fb30 	bl	80003e4 <__aeabi_ui2d>
 8004d84:	2201      	movs	r2, #1
 8004d86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d8a:	3e01      	subs	r6, #1
 8004d8c:	9212      	str	r2, [sp, #72]	@ 0x48
 8004d8e:	e774      	b.n	8004c7a <_dtoa_r+0x102>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e7b5      	b.n	8004d00 <_dtoa_r+0x188>
 8004d94:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d96:	e7b4      	b.n	8004d02 <_dtoa_r+0x18a>
 8004d98:	9b04      	ldr	r3, [sp, #16]
 8004d9a:	1bdb      	subs	r3, r3, r7
 8004d9c:	9304      	str	r3, [sp, #16]
 8004d9e:	427b      	negs	r3, r7
 8004da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004da2:	2300      	movs	r3, #0
 8004da4:	930e      	str	r3, [sp, #56]	@ 0x38
 8004da6:	e7c1      	b.n	8004d2c <_dtoa_r+0x1b4>
 8004da8:	2301      	movs	r3, #1
 8004daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dae:	eb07 0b03 	add.w	fp, r7, r3
 8004db2:	f10b 0301 	add.w	r3, fp, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	9308      	str	r3, [sp, #32]
 8004dba:	bfb8      	it	lt
 8004dbc:	2301      	movlt	r3, #1
 8004dbe:	e006      	b.n	8004dce <_dtoa_r+0x256>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dd28      	ble.n	8004e1c <_dtoa_r+0x2a4>
 8004dca:	469b      	mov	fp, r3
 8004dcc:	9308      	str	r3, [sp, #32]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004dd6:	f102 0514 	add.w	r5, r2, #20
 8004dda:	429d      	cmp	r5, r3
 8004ddc:	d926      	bls.n	8004e2c <_dtoa_r+0x2b4>
 8004dde:	6041      	str	r1, [r0, #4]
 8004de0:	4648      	mov	r0, r9
 8004de2:	f000 fd9b 	bl	800591c <_Balloc>
 8004de6:	4682      	mov	sl, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d143      	bne.n	8004e74 <_dtoa_r+0x2fc>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f240 11af 	movw	r1, #431	@ 0x1af
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <_dtoa_r+0x2f8>)
 8004df4:	e6d4      	b.n	8004ba0 <_dtoa_r+0x28>
 8004df6:	2300      	movs	r3, #0
 8004df8:	e7e3      	b.n	8004dc2 <_dtoa_r+0x24a>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e7d5      	b.n	8004daa <_dtoa_r+0x232>
 8004dfe:	2401      	movs	r4, #1
 8004e00:	2300      	movs	r3, #0
 8004e02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e04:	9320      	str	r3, [sp, #128]	@ 0x80
 8004e06:	f04f 3bff 	mov.w	fp, #4294967295
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2312      	movs	r3, #18
 8004e0e:	f8cd b020 	str.w	fp, [sp, #32]
 8004e12:	9221      	str	r2, [sp, #132]	@ 0x84
 8004e14:	e7db      	b.n	8004dce <_dtoa_r+0x256>
 8004e16:	2301      	movs	r3, #1
 8004e18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e1a:	e7f4      	b.n	8004e06 <_dtoa_r+0x28e>
 8004e1c:	f04f 0b01 	mov.w	fp, #1
 8004e20:	465b      	mov	r3, fp
 8004e22:	f8cd b020 	str.w	fp, [sp, #32]
 8004e26:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004e2a:	e7d0      	b.n	8004dce <_dtoa_r+0x256>
 8004e2c:	3101      	adds	r1, #1
 8004e2e:	0052      	lsls	r2, r2, #1
 8004e30:	e7d1      	b.n	8004dd6 <_dtoa_r+0x25e>
 8004e32:	bf00      	nop
 8004e34:	f3af 8000 	nop.w
 8004e38:	636f4361 	.word	0x636f4361
 8004e3c:	3fd287a7 	.word	0x3fd287a7
 8004e40:	8b60c8b3 	.word	0x8b60c8b3
 8004e44:	3fc68a28 	.word	0x3fc68a28
 8004e48:	509f79fb 	.word	0x509f79fb
 8004e4c:	3fd34413 	.word	0x3fd34413
 8004e50:	0800819c 	.word	0x0800819c
 8004e54:	080081b3 	.word	0x080081b3
 8004e58:	7ff00000 	.word	0x7ff00000
 8004e5c:	08008198 	.word	0x08008198
 8004e60:	08008167 	.word	0x08008167
 8004e64:	08008166 	.word	0x08008166
 8004e68:	3ff80000 	.word	0x3ff80000
 8004e6c:	08008360 	.word	0x08008360
 8004e70:	0800820b 	.word	0x0800820b
 8004e74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e78:	6018      	str	r0, [r3, #0]
 8004e7a:	9b08      	ldr	r3, [sp, #32]
 8004e7c:	2b0e      	cmp	r3, #14
 8004e7e:	f200 80a1 	bhi.w	8004fc4 <_dtoa_r+0x44c>
 8004e82:	2c00      	cmp	r4, #0
 8004e84:	f000 809e 	beq.w	8004fc4 <_dtoa_r+0x44c>
 8004e88:	2f00      	cmp	r7, #0
 8004e8a:	dd33      	ble.n	8004ef4 <_dtoa_r+0x37c>
 8004e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8005100 <_dtoa_r+0x588>)
 8004e8e:	f007 020f 	and.w	r2, r7, #15
 8004e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e96:	05f8      	lsls	r0, r7, #23
 8004e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004ea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004ea4:	d516      	bpl.n	8004ed4 <_dtoa_r+0x35c>
 8004ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004eaa:	4b96      	ldr	r3, [pc, #600]	@ (8005104 <_dtoa_r+0x58c>)
 8004eac:	2603      	movs	r6, #3
 8004eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eb2:	f7fb fc3b 	bl	800072c <__aeabi_ddiv>
 8004eb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004eba:	f004 040f 	and.w	r4, r4, #15
 8004ebe:	4d91      	ldr	r5, [pc, #580]	@ (8005104 <_dtoa_r+0x58c>)
 8004ec0:	b954      	cbnz	r4, 8004ed8 <_dtoa_r+0x360>
 8004ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eca:	f7fb fc2f 	bl	800072c <__aeabi_ddiv>
 8004ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ed2:	e028      	b.n	8004f26 <_dtoa_r+0x3ae>
 8004ed4:	2602      	movs	r6, #2
 8004ed6:	e7f2      	b.n	8004ebe <_dtoa_r+0x346>
 8004ed8:	07e1      	lsls	r1, r4, #31
 8004eda:	d508      	bpl.n	8004eee <_dtoa_r+0x376>
 8004edc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ee4:	f7fb faf8 	bl	80004d8 <__aeabi_dmul>
 8004ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004eec:	3601      	adds	r6, #1
 8004eee:	1064      	asrs	r4, r4, #1
 8004ef0:	3508      	adds	r5, #8
 8004ef2:	e7e5      	b.n	8004ec0 <_dtoa_r+0x348>
 8004ef4:	f000 80af 	beq.w	8005056 <_dtoa_r+0x4de>
 8004ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004efc:	427c      	negs	r4, r7
 8004efe:	4b80      	ldr	r3, [pc, #512]	@ (8005100 <_dtoa_r+0x588>)
 8004f00:	f004 020f 	and.w	r2, r4, #15
 8004f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f7fb fae4 	bl	80004d8 <__aeabi_dmul>
 8004f10:	2602      	movs	r6, #2
 8004f12:	2300      	movs	r3, #0
 8004f14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f18:	4d7a      	ldr	r5, [pc, #488]	@ (8005104 <_dtoa_r+0x58c>)
 8004f1a:	1124      	asrs	r4, r4, #4
 8004f1c:	2c00      	cmp	r4, #0
 8004f1e:	f040 808f 	bne.w	8005040 <_dtoa_r+0x4c8>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1d3      	bne.n	8004ece <_dtoa_r+0x356>
 8004f26:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8094 	beq.w	800505a <_dtoa_r+0x4e2>
 8004f32:	2200      	movs	r2, #0
 8004f34:	4620      	mov	r0, r4
 8004f36:	4629      	mov	r1, r5
 8004f38:	4b73      	ldr	r3, [pc, #460]	@ (8005108 <_dtoa_r+0x590>)
 8004f3a:	f7fb fd3f 	bl	80009bc <__aeabi_dcmplt>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	f000 808b 	beq.w	800505a <_dtoa_r+0x4e2>
 8004f44:	9b08      	ldr	r3, [sp, #32]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 8087 	beq.w	800505a <_dtoa_r+0x4e2>
 8004f4c:	f1bb 0f00 	cmp.w	fp, #0
 8004f50:	dd34      	ble.n	8004fbc <_dtoa_r+0x444>
 8004f52:	4620      	mov	r0, r4
 8004f54:	2200      	movs	r2, #0
 8004f56:	4629      	mov	r1, r5
 8004f58:	4b6c      	ldr	r3, [pc, #432]	@ (800510c <_dtoa_r+0x594>)
 8004f5a:	f7fb fabd 	bl	80004d8 <__aeabi_dmul>
 8004f5e:	465c      	mov	r4, fp
 8004f60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f64:	f107 38ff 	add.w	r8, r7, #4294967295
 8004f68:	3601      	adds	r6, #1
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7fb fa4a 	bl	8000404 <__aeabi_i2d>
 8004f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f74:	f7fb fab0 	bl	80004d8 <__aeabi_dmul>
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4b65      	ldr	r3, [pc, #404]	@ (8005110 <_dtoa_r+0x598>)
 8004f7c:	f7fb f8f6 	bl	800016c <__adddf3>
 8004f80:	4605      	mov	r5, r0
 8004f82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	d16a      	bne.n	8005060 <_dtoa_r+0x4e8>
 8004f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4b60      	ldr	r3, [pc, #384]	@ (8005114 <_dtoa_r+0x59c>)
 8004f92:	f7fb f8e9 	bl	8000168 <__aeabi_dsub>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4633      	mov	r3, r6
 8004fa2:	f7fb fd29 	bl	80009f8 <__aeabi_dcmpgt>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f040 8298 	bne.w	80054dc <_dtoa_r+0x964>
 8004fac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fb0:	462a      	mov	r2, r5
 8004fb2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004fb6:	f7fb fd01 	bl	80009bc <__aeabi_dcmplt>
 8004fba:	bb38      	cbnz	r0, 800500c <_dtoa_r+0x494>
 8004fbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004fc0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004fc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f2c0 8157 	blt.w	800527a <_dtoa_r+0x702>
 8004fcc:	2f0e      	cmp	r7, #14
 8004fce:	f300 8154 	bgt.w	800527a <_dtoa_r+0x702>
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005100 <_dtoa_r+0x588>)
 8004fd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fdc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fe0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f280 80e5 	bge.w	80051b2 <_dtoa_r+0x63a>
 8004fe8:	9b08      	ldr	r3, [sp, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f300 80e1 	bgt.w	80051b2 <_dtoa_r+0x63a>
 8004ff0:	d10c      	bne.n	800500c <_dtoa_r+0x494>
 8004ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4b46      	ldr	r3, [pc, #280]	@ (8005114 <_dtoa_r+0x59c>)
 8004ffa:	f7fb fa6d 	bl	80004d8 <__aeabi_dmul>
 8004ffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005002:	f7fb fcef 	bl	80009e4 <__aeabi_dcmpge>
 8005006:	2800      	cmp	r0, #0
 8005008:	f000 8266 	beq.w	80054d8 <_dtoa_r+0x960>
 800500c:	2400      	movs	r4, #0
 800500e:	4625      	mov	r5, r4
 8005010:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005012:	4656      	mov	r6, sl
 8005014:	ea6f 0803 	mvn.w	r8, r3
 8005018:	2700      	movs	r7, #0
 800501a:	4621      	mov	r1, r4
 800501c:	4648      	mov	r0, r9
 800501e:	f000 fcbd 	bl	800599c <_Bfree>
 8005022:	2d00      	cmp	r5, #0
 8005024:	f000 80bd 	beq.w	80051a2 <_dtoa_r+0x62a>
 8005028:	b12f      	cbz	r7, 8005036 <_dtoa_r+0x4be>
 800502a:	42af      	cmp	r7, r5
 800502c:	d003      	beq.n	8005036 <_dtoa_r+0x4be>
 800502e:	4639      	mov	r1, r7
 8005030:	4648      	mov	r0, r9
 8005032:	f000 fcb3 	bl	800599c <_Bfree>
 8005036:	4629      	mov	r1, r5
 8005038:	4648      	mov	r0, r9
 800503a:	f000 fcaf 	bl	800599c <_Bfree>
 800503e:	e0b0      	b.n	80051a2 <_dtoa_r+0x62a>
 8005040:	07e2      	lsls	r2, r4, #31
 8005042:	d505      	bpl.n	8005050 <_dtoa_r+0x4d8>
 8005044:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005048:	f7fb fa46 	bl	80004d8 <__aeabi_dmul>
 800504c:	2301      	movs	r3, #1
 800504e:	3601      	adds	r6, #1
 8005050:	1064      	asrs	r4, r4, #1
 8005052:	3508      	adds	r5, #8
 8005054:	e762      	b.n	8004f1c <_dtoa_r+0x3a4>
 8005056:	2602      	movs	r6, #2
 8005058:	e765      	b.n	8004f26 <_dtoa_r+0x3ae>
 800505a:	46b8      	mov	r8, r7
 800505c:	9c08      	ldr	r4, [sp, #32]
 800505e:	e784      	b.n	8004f6a <_dtoa_r+0x3f2>
 8005060:	4b27      	ldr	r3, [pc, #156]	@ (8005100 <_dtoa_r+0x588>)
 8005062:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005064:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005068:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800506c:	4454      	add	r4, sl
 800506e:	2900      	cmp	r1, #0
 8005070:	d054      	beq.n	800511c <_dtoa_r+0x5a4>
 8005072:	2000      	movs	r0, #0
 8005074:	4928      	ldr	r1, [pc, #160]	@ (8005118 <_dtoa_r+0x5a0>)
 8005076:	f7fb fb59 	bl	800072c <__aeabi_ddiv>
 800507a:	4633      	mov	r3, r6
 800507c:	462a      	mov	r2, r5
 800507e:	f7fb f873 	bl	8000168 <__aeabi_dsub>
 8005082:	4656      	mov	r6, sl
 8005084:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800508c:	f7fb fcd4 	bl	8000a38 <__aeabi_d2iz>
 8005090:	4605      	mov	r5, r0
 8005092:	f7fb f9b7 	bl	8000404 <__aeabi_i2d>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509e:	f7fb f863 	bl	8000168 <__aeabi_dsub>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	3530      	adds	r5, #48	@ 0x30
 80050a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050b0:	f806 5b01 	strb.w	r5, [r6], #1
 80050b4:	f7fb fc82 	bl	80009bc <__aeabi_dcmplt>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d172      	bne.n	80051a2 <_dtoa_r+0x62a>
 80050bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050c0:	2000      	movs	r0, #0
 80050c2:	4911      	ldr	r1, [pc, #68]	@ (8005108 <_dtoa_r+0x590>)
 80050c4:	f7fb f850 	bl	8000168 <__aeabi_dsub>
 80050c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050cc:	f7fb fc76 	bl	80009bc <__aeabi_dcmplt>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f040 80b4 	bne.w	800523e <_dtoa_r+0x6c6>
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	f43f af70 	beq.w	8004fbc <_dtoa_r+0x444>
 80050dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80050e0:	2200      	movs	r2, #0
 80050e2:	4b0a      	ldr	r3, [pc, #40]	@ (800510c <_dtoa_r+0x594>)
 80050e4:	f7fb f9f8 	bl	80004d8 <__aeabi_dmul>
 80050e8:	2200      	movs	r2, #0
 80050ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050f2:	4b06      	ldr	r3, [pc, #24]	@ (800510c <_dtoa_r+0x594>)
 80050f4:	f7fb f9f0 	bl	80004d8 <__aeabi_dmul>
 80050f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80050fc:	e7c4      	b.n	8005088 <_dtoa_r+0x510>
 80050fe:	bf00      	nop
 8005100:	08008360 	.word	0x08008360
 8005104:	08008338 	.word	0x08008338
 8005108:	3ff00000 	.word	0x3ff00000
 800510c:	40240000 	.word	0x40240000
 8005110:	401c0000 	.word	0x401c0000
 8005114:	40140000 	.word	0x40140000
 8005118:	3fe00000 	.word	0x3fe00000
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	f7fb f9da 	bl	80004d8 <__aeabi_dmul>
 8005124:	4656      	mov	r6, sl
 8005126:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800512a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800512c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005130:	f7fb fc82 	bl	8000a38 <__aeabi_d2iz>
 8005134:	4605      	mov	r5, r0
 8005136:	f7fb f965 	bl	8000404 <__aeabi_i2d>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005142:	f7fb f811 	bl	8000168 <__aeabi_dsub>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	3530      	adds	r5, #48	@ 0x30
 800514c:	f806 5b01 	strb.w	r5, [r6], #1
 8005150:	42a6      	cmp	r6, r4
 8005152:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	d124      	bne.n	80051a6 <_dtoa_r+0x62e>
 800515c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005160:	4bae      	ldr	r3, [pc, #696]	@ (800541c <_dtoa_r+0x8a4>)
 8005162:	f7fb f803 	bl	800016c <__adddf3>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800516e:	f7fb fc43 	bl	80009f8 <__aeabi_dcmpgt>
 8005172:	2800      	cmp	r0, #0
 8005174:	d163      	bne.n	800523e <_dtoa_r+0x6c6>
 8005176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800517a:	2000      	movs	r0, #0
 800517c:	49a7      	ldr	r1, [pc, #668]	@ (800541c <_dtoa_r+0x8a4>)
 800517e:	f7fa fff3 	bl	8000168 <__aeabi_dsub>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800518a:	f7fb fc17 	bl	80009bc <__aeabi_dcmplt>
 800518e:	2800      	cmp	r0, #0
 8005190:	f43f af14 	beq.w	8004fbc <_dtoa_r+0x444>
 8005194:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005196:	1e73      	subs	r3, r6, #1
 8005198:	9313      	str	r3, [sp, #76]	@ 0x4c
 800519a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800519e:	2b30      	cmp	r3, #48	@ 0x30
 80051a0:	d0f8      	beq.n	8005194 <_dtoa_r+0x61c>
 80051a2:	4647      	mov	r7, r8
 80051a4:	e03b      	b.n	800521e <_dtoa_r+0x6a6>
 80051a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005420 <_dtoa_r+0x8a8>)
 80051a8:	f7fb f996 	bl	80004d8 <__aeabi_dmul>
 80051ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80051b0:	e7bc      	b.n	800512c <_dtoa_r+0x5b4>
 80051b2:	4656      	mov	r6, sl
 80051b4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80051b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb fab4 	bl	800072c <__aeabi_ddiv>
 80051c4:	f7fb fc38 	bl	8000a38 <__aeabi_d2iz>
 80051c8:	4680      	mov	r8, r0
 80051ca:	f7fb f91b 	bl	8000404 <__aeabi_i2d>
 80051ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d2:	f7fb f981 	bl	80004d8 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4620      	mov	r0, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	f7fa ffc3 	bl	8000168 <__aeabi_dsub>
 80051e2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80051e6:	9d08      	ldr	r5, [sp, #32]
 80051e8:	f806 4b01 	strb.w	r4, [r6], #1
 80051ec:	eba6 040a 	sub.w	r4, r6, sl
 80051f0:	42a5      	cmp	r5, r4
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	d133      	bne.n	8005260 <_dtoa_r+0x6e8>
 80051f8:	f7fa ffb8 	bl	800016c <__adddf3>
 80051fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	f7fb fbf8 	bl	80009f8 <__aeabi_dcmpgt>
 8005208:	b9c0      	cbnz	r0, 800523c <_dtoa_r+0x6c4>
 800520a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb fbc9 	bl	80009a8 <__aeabi_dcmpeq>
 8005216:	b110      	cbz	r0, 800521e <_dtoa_r+0x6a6>
 8005218:	f018 0f01 	tst.w	r8, #1
 800521c:	d10e      	bne.n	800523c <_dtoa_r+0x6c4>
 800521e:	4648      	mov	r0, r9
 8005220:	9903      	ldr	r1, [sp, #12]
 8005222:	f000 fbbb 	bl	800599c <_Bfree>
 8005226:	2300      	movs	r3, #0
 8005228:	7033      	strb	r3, [r6, #0]
 800522a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800522c:	3701      	adds	r7, #1
 800522e:	601f      	str	r7, [r3, #0]
 8005230:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 824b 	beq.w	80056ce <_dtoa_r+0xb56>
 8005238:	601e      	str	r6, [r3, #0]
 800523a:	e248      	b.n	80056ce <_dtoa_r+0xb56>
 800523c:	46b8      	mov	r8, r7
 800523e:	4633      	mov	r3, r6
 8005240:	461e      	mov	r6, r3
 8005242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005246:	2a39      	cmp	r2, #57	@ 0x39
 8005248:	d106      	bne.n	8005258 <_dtoa_r+0x6e0>
 800524a:	459a      	cmp	sl, r3
 800524c:	d1f8      	bne.n	8005240 <_dtoa_r+0x6c8>
 800524e:	2230      	movs	r2, #48	@ 0x30
 8005250:	f108 0801 	add.w	r8, r8, #1
 8005254:	f88a 2000 	strb.w	r2, [sl]
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	3201      	adds	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e7a0      	b.n	80051a2 <_dtoa_r+0x62a>
 8005260:	2200      	movs	r2, #0
 8005262:	4b6f      	ldr	r3, [pc, #444]	@ (8005420 <_dtoa_r+0x8a8>)
 8005264:	f7fb f938 	bl	80004d8 <__aeabi_dmul>
 8005268:	2200      	movs	r2, #0
 800526a:	2300      	movs	r3, #0
 800526c:	4604      	mov	r4, r0
 800526e:	460d      	mov	r5, r1
 8005270:	f7fb fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005274:	2800      	cmp	r0, #0
 8005276:	d09f      	beq.n	80051b8 <_dtoa_r+0x640>
 8005278:	e7d1      	b.n	800521e <_dtoa_r+0x6a6>
 800527a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800527c:	2a00      	cmp	r2, #0
 800527e:	f000 80ea 	beq.w	8005456 <_dtoa_r+0x8de>
 8005282:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005284:	2a01      	cmp	r2, #1
 8005286:	f300 80cd 	bgt.w	8005424 <_dtoa_r+0x8ac>
 800528a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800528c:	2a00      	cmp	r2, #0
 800528e:	f000 80c1 	beq.w	8005414 <_dtoa_r+0x89c>
 8005292:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005296:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005298:	9e04      	ldr	r6, [sp, #16]
 800529a:	9a04      	ldr	r2, [sp, #16]
 800529c:	2101      	movs	r1, #1
 800529e:	441a      	add	r2, r3
 80052a0:	9204      	str	r2, [sp, #16]
 80052a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052a4:	4648      	mov	r0, r9
 80052a6:	441a      	add	r2, r3
 80052a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80052aa:	f000 fc75 	bl	8005b98 <__i2b>
 80052ae:	4605      	mov	r5, r0
 80052b0:	b166      	cbz	r6, 80052cc <_dtoa_r+0x754>
 80052b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dd09      	ble.n	80052cc <_dtoa_r+0x754>
 80052b8:	42b3      	cmp	r3, r6
 80052ba:	bfa8      	it	ge
 80052bc:	4633      	movge	r3, r6
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	1af6      	subs	r6, r6, r3
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	9204      	str	r2, [sp, #16]
 80052c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80052cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052ce:	b30b      	cbz	r3, 8005314 <_dtoa_r+0x79c>
 80052d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80c6 	beq.w	8005464 <_dtoa_r+0x8ec>
 80052d8:	2c00      	cmp	r4, #0
 80052da:	f000 80c0 	beq.w	800545e <_dtoa_r+0x8e6>
 80052de:	4629      	mov	r1, r5
 80052e0:	4622      	mov	r2, r4
 80052e2:	4648      	mov	r0, r9
 80052e4:	f000 fd10 	bl	8005d08 <__pow5mult>
 80052e8:	9a03      	ldr	r2, [sp, #12]
 80052ea:	4601      	mov	r1, r0
 80052ec:	4605      	mov	r5, r0
 80052ee:	4648      	mov	r0, r9
 80052f0:	f000 fc68 	bl	8005bc4 <__multiply>
 80052f4:	9903      	ldr	r1, [sp, #12]
 80052f6:	4680      	mov	r8, r0
 80052f8:	4648      	mov	r0, r9
 80052fa:	f000 fb4f 	bl	800599c <_Bfree>
 80052fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005300:	1b1b      	subs	r3, r3, r4
 8005302:	930a      	str	r3, [sp, #40]	@ 0x28
 8005304:	f000 80b1 	beq.w	800546a <_dtoa_r+0x8f2>
 8005308:	4641      	mov	r1, r8
 800530a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800530c:	4648      	mov	r0, r9
 800530e:	f000 fcfb 	bl	8005d08 <__pow5mult>
 8005312:	9003      	str	r0, [sp, #12]
 8005314:	2101      	movs	r1, #1
 8005316:	4648      	mov	r0, r9
 8005318:	f000 fc3e 	bl	8005b98 <__i2b>
 800531c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800531e:	4604      	mov	r4, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 81d8 	beq.w	80056d6 <_dtoa_r+0xb5e>
 8005326:	461a      	mov	r2, r3
 8005328:	4601      	mov	r1, r0
 800532a:	4648      	mov	r0, r9
 800532c:	f000 fcec 	bl	8005d08 <__pow5mult>
 8005330:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005332:	4604      	mov	r4, r0
 8005334:	2b01      	cmp	r3, #1
 8005336:	f300 809f 	bgt.w	8005478 <_dtoa_r+0x900>
 800533a:	9b06      	ldr	r3, [sp, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8097 	bne.w	8005470 <_dtoa_r+0x8f8>
 8005342:	9b07      	ldr	r3, [sp, #28]
 8005344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 8093 	bne.w	8005474 <_dtoa_r+0x8fc>
 800534e:	9b07      	ldr	r3, [sp, #28]
 8005350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005354:	0d1b      	lsrs	r3, r3, #20
 8005356:	051b      	lsls	r3, r3, #20
 8005358:	b133      	cbz	r3, 8005368 <_dtoa_r+0x7f0>
 800535a:	9b04      	ldr	r3, [sp, #16]
 800535c:	3301      	adds	r3, #1
 800535e:	9304      	str	r3, [sp, #16]
 8005360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005362:	3301      	adds	r3, #1
 8005364:	9309      	str	r3, [sp, #36]	@ 0x24
 8005366:	2301      	movs	r3, #1
 8005368:	930a      	str	r3, [sp, #40]	@ 0x28
 800536a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 81b8 	beq.w	80056e2 <_dtoa_r+0xb6a>
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005378:	6918      	ldr	r0, [r3, #16]
 800537a:	f000 fbc1 	bl	8005b00 <__hi0bits>
 800537e:	f1c0 0020 	rsb	r0, r0, #32
 8005382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005384:	4418      	add	r0, r3
 8005386:	f010 001f 	ands.w	r0, r0, #31
 800538a:	f000 8082 	beq.w	8005492 <_dtoa_r+0x91a>
 800538e:	f1c0 0320 	rsb	r3, r0, #32
 8005392:	2b04      	cmp	r3, #4
 8005394:	dd73      	ble.n	800547e <_dtoa_r+0x906>
 8005396:	9b04      	ldr	r3, [sp, #16]
 8005398:	f1c0 001c 	rsb	r0, r0, #28
 800539c:	4403      	add	r3, r0
 800539e:	9304      	str	r3, [sp, #16]
 80053a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a2:	4406      	add	r6, r0
 80053a4:	4403      	add	r3, r0
 80053a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dd05      	ble.n	80053ba <_dtoa_r+0x842>
 80053ae:	461a      	mov	r2, r3
 80053b0:	4648      	mov	r0, r9
 80053b2:	9903      	ldr	r1, [sp, #12]
 80053b4:	f000 fd02 	bl	8005dbc <__lshift>
 80053b8:	9003      	str	r0, [sp, #12]
 80053ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dd05      	ble.n	80053cc <_dtoa_r+0x854>
 80053c0:	4621      	mov	r1, r4
 80053c2:	461a      	mov	r2, r3
 80053c4:	4648      	mov	r0, r9
 80053c6:	f000 fcf9 	bl	8005dbc <__lshift>
 80053ca:	4604      	mov	r4, r0
 80053cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d061      	beq.n	8005496 <_dtoa_r+0x91e>
 80053d2:	4621      	mov	r1, r4
 80053d4:	9803      	ldr	r0, [sp, #12]
 80053d6:	f000 fd5d 	bl	8005e94 <__mcmp>
 80053da:	2800      	cmp	r0, #0
 80053dc:	da5b      	bge.n	8005496 <_dtoa_r+0x91e>
 80053de:	2300      	movs	r3, #0
 80053e0:	220a      	movs	r2, #10
 80053e2:	4648      	mov	r0, r9
 80053e4:	9903      	ldr	r1, [sp, #12]
 80053e6:	f000 fafb 	bl	80059e0 <__multadd>
 80053ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053ec:	f107 38ff 	add.w	r8, r7, #4294967295
 80053f0:	9003      	str	r0, [sp, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8177 	beq.w	80056e6 <_dtoa_r+0xb6e>
 80053f8:	4629      	mov	r1, r5
 80053fa:	2300      	movs	r3, #0
 80053fc:	220a      	movs	r2, #10
 80053fe:	4648      	mov	r0, r9
 8005400:	f000 faee 	bl	80059e0 <__multadd>
 8005404:	f1bb 0f00 	cmp.w	fp, #0
 8005408:	4605      	mov	r5, r0
 800540a:	dc6f      	bgt.n	80054ec <_dtoa_r+0x974>
 800540c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800540e:	2b02      	cmp	r3, #2
 8005410:	dc49      	bgt.n	80054a6 <_dtoa_r+0x92e>
 8005412:	e06b      	b.n	80054ec <_dtoa_r+0x974>
 8005414:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005416:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800541a:	e73c      	b.n	8005296 <_dtoa_r+0x71e>
 800541c:	3fe00000 	.word	0x3fe00000
 8005420:	40240000 	.word	0x40240000
 8005424:	9b08      	ldr	r3, [sp, #32]
 8005426:	1e5c      	subs	r4, r3, #1
 8005428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800542a:	42a3      	cmp	r3, r4
 800542c:	db09      	blt.n	8005442 <_dtoa_r+0x8ca>
 800542e:	1b1c      	subs	r4, r3, r4
 8005430:	9b08      	ldr	r3, [sp, #32]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f6bf af30 	bge.w	8005298 <_dtoa_r+0x720>
 8005438:	9b04      	ldr	r3, [sp, #16]
 800543a:	9a08      	ldr	r2, [sp, #32]
 800543c:	1a9e      	subs	r6, r3, r2
 800543e:	2300      	movs	r3, #0
 8005440:	e72b      	b.n	800529a <_dtoa_r+0x722>
 8005442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005444:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005446:	1ae3      	subs	r3, r4, r3
 8005448:	441a      	add	r2, r3
 800544a:	940a      	str	r4, [sp, #40]	@ 0x28
 800544c:	9e04      	ldr	r6, [sp, #16]
 800544e:	2400      	movs	r4, #0
 8005450:	9b08      	ldr	r3, [sp, #32]
 8005452:	920e      	str	r2, [sp, #56]	@ 0x38
 8005454:	e721      	b.n	800529a <_dtoa_r+0x722>
 8005456:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005458:	9e04      	ldr	r6, [sp, #16]
 800545a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800545c:	e728      	b.n	80052b0 <_dtoa_r+0x738>
 800545e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005462:	e751      	b.n	8005308 <_dtoa_r+0x790>
 8005464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005466:	9903      	ldr	r1, [sp, #12]
 8005468:	e750      	b.n	800530c <_dtoa_r+0x794>
 800546a:	f8cd 800c 	str.w	r8, [sp, #12]
 800546e:	e751      	b.n	8005314 <_dtoa_r+0x79c>
 8005470:	2300      	movs	r3, #0
 8005472:	e779      	b.n	8005368 <_dtoa_r+0x7f0>
 8005474:	9b06      	ldr	r3, [sp, #24]
 8005476:	e777      	b.n	8005368 <_dtoa_r+0x7f0>
 8005478:	2300      	movs	r3, #0
 800547a:	930a      	str	r3, [sp, #40]	@ 0x28
 800547c:	e779      	b.n	8005372 <_dtoa_r+0x7fa>
 800547e:	d093      	beq.n	80053a8 <_dtoa_r+0x830>
 8005480:	9a04      	ldr	r2, [sp, #16]
 8005482:	331c      	adds	r3, #28
 8005484:	441a      	add	r2, r3
 8005486:	9204      	str	r2, [sp, #16]
 8005488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800548a:	441e      	add	r6, r3
 800548c:	441a      	add	r2, r3
 800548e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005490:	e78a      	b.n	80053a8 <_dtoa_r+0x830>
 8005492:	4603      	mov	r3, r0
 8005494:	e7f4      	b.n	8005480 <_dtoa_r+0x908>
 8005496:	9b08      	ldr	r3, [sp, #32]
 8005498:	46b8      	mov	r8, r7
 800549a:	2b00      	cmp	r3, #0
 800549c:	dc20      	bgt.n	80054e0 <_dtoa_r+0x968>
 800549e:	469b      	mov	fp, r3
 80054a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	dd1e      	ble.n	80054e4 <_dtoa_r+0x96c>
 80054a6:	f1bb 0f00 	cmp.w	fp, #0
 80054aa:	f47f adb1 	bne.w	8005010 <_dtoa_r+0x498>
 80054ae:	4621      	mov	r1, r4
 80054b0:	465b      	mov	r3, fp
 80054b2:	2205      	movs	r2, #5
 80054b4:	4648      	mov	r0, r9
 80054b6:	f000 fa93 	bl	80059e0 <__multadd>
 80054ba:	4601      	mov	r1, r0
 80054bc:	4604      	mov	r4, r0
 80054be:	9803      	ldr	r0, [sp, #12]
 80054c0:	f000 fce8 	bl	8005e94 <__mcmp>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f77f ada3 	ble.w	8005010 <_dtoa_r+0x498>
 80054ca:	4656      	mov	r6, sl
 80054cc:	2331      	movs	r3, #49	@ 0x31
 80054ce:	f108 0801 	add.w	r8, r8, #1
 80054d2:	f806 3b01 	strb.w	r3, [r6], #1
 80054d6:	e59f      	b.n	8005018 <_dtoa_r+0x4a0>
 80054d8:	46b8      	mov	r8, r7
 80054da:	9c08      	ldr	r4, [sp, #32]
 80054dc:	4625      	mov	r5, r4
 80054de:	e7f4      	b.n	80054ca <_dtoa_r+0x952>
 80054e0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80054e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8101 	beq.w	80056ee <_dtoa_r+0xb76>
 80054ec:	2e00      	cmp	r6, #0
 80054ee:	dd05      	ble.n	80054fc <_dtoa_r+0x984>
 80054f0:	4629      	mov	r1, r5
 80054f2:	4632      	mov	r2, r6
 80054f4:	4648      	mov	r0, r9
 80054f6:	f000 fc61 	bl	8005dbc <__lshift>
 80054fa:	4605      	mov	r5, r0
 80054fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d05c      	beq.n	80055bc <_dtoa_r+0xa44>
 8005502:	4648      	mov	r0, r9
 8005504:	6869      	ldr	r1, [r5, #4]
 8005506:	f000 fa09 	bl	800591c <_Balloc>
 800550a:	4606      	mov	r6, r0
 800550c:	b928      	cbnz	r0, 800551a <_dtoa_r+0x9a2>
 800550e:	4602      	mov	r2, r0
 8005510:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005514:	4b80      	ldr	r3, [pc, #512]	@ (8005718 <_dtoa_r+0xba0>)
 8005516:	f7ff bb43 	b.w	8004ba0 <_dtoa_r+0x28>
 800551a:	692a      	ldr	r2, [r5, #16]
 800551c:	f105 010c 	add.w	r1, r5, #12
 8005520:	3202      	adds	r2, #2
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	300c      	adds	r0, #12
 8005526:	f001 ff51 	bl	80073cc <memcpy>
 800552a:	2201      	movs	r2, #1
 800552c:	4631      	mov	r1, r6
 800552e:	4648      	mov	r0, r9
 8005530:	f000 fc44 	bl	8005dbc <__lshift>
 8005534:	462f      	mov	r7, r5
 8005536:	4605      	mov	r5, r0
 8005538:	f10a 0301 	add.w	r3, sl, #1
 800553c:	9304      	str	r3, [sp, #16]
 800553e:	eb0a 030b 	add.w	r3, sl, fp
 8005542:	930a      	str	r3, [sp, #40]	@ 0x28
 8005544:	9b06      	ldr	r3, [sp, #24]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	9309      	str	r3, [sp, #36]	@ 0x24
 800554c:	9b04      	ldr	r3, [sp, #16]
 800554e:	4621      	mov	r1, r4
 8005550:	9803      	ldr	r0, [sp, #12]
 8005552:	f103 3bff 	add.w	fp, r3, #4294967295
 8005556:	f7ff fa87 	bl	8004a68 <quorem>
 800555a:	4603      	mov	r3, r0
 800555c:	4639      	mov	r1, r7
 800555e:	3330      	adds	r3, #48	@ 0x30
 8005560:	9006      	str	r0, [sp, #24]
 8005562:	9803      	ldr	r0, [sp, #12]
 8005564:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005566:	f000 fc95 	bl	8005e94 <__mcmp>
 800556a:	462a      	mov	r2, r5
 800556c:	9008      	str	r0, [sp, #32]
 800556e:	4621      	mov	r1, r4
 8005570:	4648      	mov	r0, r9
 8005572:	f000 fcab 	bl	8005ecc <__mdiff>
 8005576:	68c2      	ldr	r2, [r0, #12]
 8005578:	4606      	mov	r6, r0
 800557a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800557c:	bb02      	cbnz	r2, 80055c0 <_dtoa_r+0xa48>
 800557e:	4601      	mov	r1, r0
 8005580:	9803      	ldr	r0, [sp, #12]
 8005582:	f000 fc87 	bl	8005e94 <__mcmp>
 8005586:	4602      	mov	r2, r0
 8005588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800558a:	4631      	mov	r1, r6
 800558c:	4648      	mov	r0, r9
 800558e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005592:	f000 fa03 	bl	800599c <_Bfree>
 8005596:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005598:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800559a:	9e04      	ldr	r6, [sp, #16]
 800559c:	ea42 0103 	orr.w	r1, r2, r3
 80055a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055a2:	4319      	orrs	r1, r3
 80055a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055a6:	d10d      	bne.n	80055c4 <_dtoa_r+0xa4c>
 80055a8:	2b39      	cmp	r3, #57	@ 0x39
 80055aa:	d027      	beq.n	80055fc <_dtoa_r+0xa84>
 80055ac:	9a08      	ldr	r2, [sp, #32]
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	dd01      	ble.n	80055b6 <_dtoa_r+0xa3e>
 80055b2:	9b06      	ldr	r3, [sp, #24]
 80055b4:	3331      	adds	r3, #49	@ 0x31
 80055b6:	f88b 3000 	strb.w	r3, [fp]
 80055ba:	e52e      	b.n	800501a <_dtoa_r+0x4a2>
 80055bc:	4628      	mov	r0, r5
 80055be:	e7b9      	b.n	8005534 <_dtoa_r+0x9bc>
 80055c0:	2201      	movs	r2, #1
 80055c2:	e7e2      	b.n	800558a <_dtoa_r+0xa12>
 80055c4:	9908      	ldr	r1, [sp, #32]
 80055c6:	2900      	cmp	r1, #0
 80055c8:	db04      	blt.n	80055d4 <_dtoa_r+0xa5c>
 80055ca:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80055cc:	4301      	orrs	r1, r0
 80055ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055d0:	4301      	orrs	r1, r0
 80055d2:	d120      	bne.n	8005616 <_dtoa_r+0xa9e>
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	ddee      	ble.n	80055b6 <_dtoa_r+0xa3e>
 80055d8:	2201      	movs	r2, #1
 80055da:	9903      	ldr	r1, [sp, #12]
 80055dc:	4648      	mov	r0, r9
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	f000 fbec 	bl	8005dbc <__lshift>
 80055e4:	4621      	mov	r1, r4
 80055e6:	9003      	str	r0, [sp, #12]
 80055e8:	f000 fc54 	bl	8005e94 <__mcmp>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	dc02      	bgt.n	80055f8 <_dtoa_r+0xa80>
 80055f2:	d1e0      	bne.n	80055b6 <_dtoa_r+0xa3e>
 80055f4:	07da      	lsls	r2, r3, #31
 80055f6:	d5de      	bpl.n	80055b6 <_dtoa_r+0xa3e>
 80055f8:	2b39      	cmp	r3, #57	@ 0x39
 80055fa:	d1da      	bne.n	80055b2 <_dtoa_r+0xa3a>
 80055fc:	2339      	movs	r3, #57	@ 0x39
 80055fe:	f88b 3000 	strb.w	r3, [fp]
 8005602:	4633      	mov	r3, r6
 8005604:	461e      	mov	r6, r3
 8005606:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800560a:	3b01      	subs	r3, #1
 800560c:	2a39      	cmp	r2, #57	@ 0x39
 800560e:	d04e      	beq.n	80056ae <_dtoa_r+0xb36>
 8005610:	3201      	adds	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	e501      	b.n	800501a <_dtoa_r+0x4a2>
 8005616:	2a00      	cmp	r2, #0
 8005618:	dd03      	ble.n	8005622 <_dtoa_r+0xaaa>
 800561a:	2b39      	cmp	r3, #57	@ 0x39
 800561c:	d0ee      	beq.n	80055fc <_dtoa_r+0xa84>
 800561e:	3301      	adds	r3, #1
 8005620:	e7c9      	b.n	80055b6 <_dtoa_r+0xa3e>
 8005622:	9a04      	ldr	r2, [sp, #16]
 8005624:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005626:	f802 3c01 	strb.w	r3, [r2, #-1]
 800562a:	428a      	cmp	r2, r1
 800562c:	d028      	beq.n	8005680 <_dtoa_r+0xb08>
 800562e:	2300      	movs	r3, #0
 8005630:	220a      	movs	r2, #10
 8005632:	9903      	ldr	r1, [sp, #12]
 8005634:	4648      	mov	r0, r9
 8005636:	f000 f9d3 	bl	80059e0 <__multadd>
 800563a:	42af      	cmp	r7, r5
 800563c:	9003      	str	r0, [sp, #12]
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	f04f 020a 	mov.w	r2, #10
 8005646:	4639      	mov	r1, r7
 8005648:	4648      	mov	r0, r9
 800564a:	d107      	bne.n	800565c <_dtoa_r+0xae4>
 800564c:	f000 f9c8 	bl	80059e0 <__multadd>
 8005650:	4607      	mov	r7, r0
 8005652:	4605      	mov	r5, r0
 8005654:	9b04      	ldr	r3, [sp, #16]
 8005656:	3301      	adds	r3, #1
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	e777      	b.n	800554c <_dtoa_r+0x9d4>
 800565c:	f000 f9c0 	bl	80059e0 <__multadd>
 8005660:	4629      	mov	r1, r5
 8005662:	4607      	mov	r7, r0
 8005664:	2300      	movs	r3, #0
 8005666:	220a      	movs	r2, #10
 8005668:	4648      	mov	r0, r9
 800566a:	f000 f9b9 	bl	80059e0 <__multadd>
 800566e:	4605      	mov	r5, r0
 8005670:	e7f0      	b.n	8005654 <_dtoa_r+0xadc>
 8005672:	f1bb 0f00 	cmp.w	fp, #0
 8005676:	bfcc      	ite	gt
 8005678:	465e      	movgt	r6, fp
 800567a:	2601      	movle	r6, #1
 800567c:	2700      	movs	r7, #0
 800567e:	4456      	add	r6, sl
 8005680:	2201      	movs	r2, #1
 8005682:	9903      	ldr	r1, [sp, #12]
 8005684:	4648      	mov	r0, r9
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	f000 fb98 	bl	8005dbc <__lshift>
 800568c:	4621      	mov	r1, r4
 800568e:	9003      	str	r0, [sp, #12]
 8005690:	f000 fc00 	bl	8005e94 <__mcmp>
 8005694:	2800      	cmp	r0, #0
 8005696:	dcb4      	bgt.n	8005602 <_dtoa_r+0xa8a>
 8005698:	d102      	bne.n	80056a0 <_dtoa_r+0xb28>
 800569a:	9b04      	ldr	r3, [sp, #16]
 800569c:	07db      	lsls	r3, r3, #31
 800569e:	d4b0      	bmi.n	8005602 <_dtoa_r+0xa8a>
 80056a0:	4633      	mov	r3, r6
 80056a2:	461e      	mov	r6, r3
 80056a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a8:	2a30      	cmp	r2, #48	@ 0x30
 80056aa:	d0fa      	beq.n	80056a2 <_dtoa_r+0xb2a>
 80056ac:	e4b5      	b.n	800501a <_dtoa_r+0x4a2>
 80056ae:	459a      	cmp	sl, r3
 80056b0:	d1a8      	bne.n	8005604 <_dtoa_r+0xa8c>
 80056b2:	2331      	movs	r3, #49	@ 0x31
 80056b4:	f108 0801 	add.w	r8, r8, #1
 80056b8:	f88a 3000 	strb.w	r3, [sl]
 80056bc:	e4ad      	b.n	800501a <_dtoa_r+0x4a2>
 80056be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800571c <_dtoa_r+0xba4>
 80056c4:	b11b      	cbz	r3, 80056ce <_dtoa_r+0xb56>
 80056c6:	f10a 0308 	add.w	r3, sl, #8
 80056ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	4650      	mov	r0, sl
 80056d0:	b017      	add	sp, #92	@ 0x5c
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f77f ae2e 	ble.w	800533a <_dtoa_r+0x7c2>
 80056de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80056e2:	2001      	movs	r0, #1
 80056e4:	e64d      	b.n	8005382 <_dtoa_r+0x80a>
 80056e6:	f1bb 0f00 	cmp.w	fp, #0
 80056ea:	f77f aed9 	ble.w	80054a0 <_dtoa_r+0x928>
 80056ee:	4656      	mov	r6, sl
 80056f0:	4621      	mov	r1, r4
 80056f2:	9803      	ldr	r0, [sp, #12]
 80056f4:	f7ff f9b8 	bl	8004a68 <quorem>
 80056f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80056fc:	f806 3b01 	strb.w	r3, [r6], #1
 8005700:	eba6 020a 	sub.w	r2, r6, sl
 8005704:	4593      	cmp	fp, r2
 8005706:	ddb4      	ble.n	8005672 <_dtoa_r+0xafa>
 8005708:	2300      	movs	r3, #0
 800570a:	220a      	movs	r2, #10
 800570c:	4648      	mov	r0, r9
 800570e:	9903      	ldr	r1, [sp, #12]
 8005710:	f000 f966 	bl	80059e0 <__multadd>
 8005714:	9003      	str	r0, [sp, #12]
 8005716:	e7eb      	b.n	80056f0 <_dtoa_r+0xb78>
 8005718:	0800820b 	.word	0x0800820b
 800571c:	0800818f 	.word	0x0800818f

08005720 <_free_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4605      	mov	r5, r0
 8005724:	2900      	cmp	r1, #0
 8005726:	d040      	beq.n	80057aa <_free_r+0x8a>
 8005728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800572c:	1f0c      	subs	r4, r1, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	bfb8      	it	lt
 8005732:	18e4      	addlt	r4, r4, r3
 8005734:	f000 f8e6 	bl	8005904 <__malloc_lock>
 8005738:	4a1c      	ldr	r2, [pc, #112]	@ (80057ac <_free_r+0x8c>)
 800573a:	6813      	ldr	r3, [r2, #0]
 800573c:	b933      	cbnz	r3, 800574c <_free_r+0x2c>
 800573e:	6063      	str	r3, [r4, #4]
 8005740:	6014      	str	r4, [r2, #0]
 8005742:	4628      	mov	r0, r5
 8005744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005748:	f000 b8e2 	b.w	8005910 <__malloc_unlock>
 800574c:	42a3      	cmp	r3, r4
 800574e:	d908      	bls.n	8005762 <_free_r+0x42>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	1821      	adds	r1, r4, r0
 8005754:	428b      	cmp	r3, r1
 8005756:	bf01      	itttt	eq
 8005758:	6819      	ldreq	r1, [r3, #0]
 800575a:	685b      	ldreq	r3, [r3, #4]
 800575c:	1809      	addeq	r1, r1, r0
 800575e:	6021      	streq	r1, [r4, #0]
 8005760:	e7ed      	b.n	800573e <_free_r+0x1e>
 8005762:	461a      	mov	r2, r3
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	b10b      	cbz	r3, 800576c <_free_r+0x4c>
 8005768:	42a3      	cmp	r3, r4
 800576a:	d9fa      	bls.n	8005762 <_free_r+0x42>
 800576c:	6811      	ldr	r1, [r2, #0]
 800576e:	1850      	adds	r0, r2, r1
 8005770:	42a0      	cmp	r0, r4
 8005772:	d10b      	bne.n	800578c <_free_r+0x6c>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	4401      	add	r1, r0
 8005778:	1850      	adds	r0, r2, r1
 800577a:	4283      	cmp	r3, r0
 800577c:	6011      	str	r1, [r2, #0]
 800577e:	d1e0      	bne.n	8005742 <_free_r+0x22>
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4408      	add	r0, r1
 8005786:	6010      	str	r0, [r2, #0]
 8005788:	6053      	str	r3, [r2, #4]
 800578a:	e7da      	b.n	8005742 <_free_r+0x22>
 800578c:	d902      	bls.n	8005794 <_free_r+0x74>
 800578e:	230c      	movs	r3, #12
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	e7d6      	b.n	8005742 <_free_r+0x22>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	1821      	adds	r1, r4, r0
 8005798:	428b      	cmp	r3, r1
 800579a:	bf01      	itttt	eq
 800579c:	6819      	ldreq	r1, [r3, #0]
 800579e:	685b      	ldreq	r3, [r3, #4]
 80057a0:	1809      	addeq	r1, r1, r0
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6054      	str	r4, [r2, #4]
 80057a8:	e7cb      	b.n	8005742 <_free_r+0x22>
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200003e4 	.word	0x200003e4

080057b0 <malloc>:
 80057b0:	4b02      	ldr	r3, [pc, #8]	@ (80057bc <malloc+0xc>)
 80057b2:	4601      	mov	r1, r0
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	f000 b825 	b.w	8005804 <_malloc_r>
 80057ba:	bf00      	nop
 80057bc:	20000018 	.word	0x20000018

080057c0 <sbrk_aligned>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005800 <sbrk_aligned+0x40>)
 80057c4:	460c      	mov	r4, r1
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	b911      	cbnz	r1, 80057d2 <sbrk_aligned+0x12>
 80057cc:	f001 fdee 	bl	80073ac <_sbrk_r>
 80057d0:	6030      	str	r0, [r6, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f001 fde9 	bl	80073ac <_sbrk_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d103      	bne.n	80057e6 <sbrk_aligned+0x26>
 80057de:	f04f 34ff 	mov.w	r4, #4294967295
 80057e2:	4620      	mov	r0, r4
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d0f8      	beq.n	80057e2 <sbrk_aligned+0x22>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f001 fdda 	bl	80073ac <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d1f2      	bne.n	80057e2 <sbrk_aligned+0x22>
 80057fc:	e7ef      	b.n	80057de <sbrk_aligned+0x1e>
 80057fe:	bf00      	nop
 8005800:	200003e0 	.word	0x200003e0

08005804 <_malloc_r>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4606      	mov	r6, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d904      	bls.n	800582a <_malloc_r+0x26>
 8005820:	230c      	movs	r3, #12
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005900 <_malloc_r+0xfc>
 800582e:	f000 f869 	bl	8005904 <__malloc_lock>
 8005832:	f8d8 3000 	ldr.w	r3, [r8]
 8005836:	461c      	mov	r4, r3
 8005838:	bb44      	cbnz	r4, 800588c <_malloc_r+0x88>
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff ffbf 	bl	80057c0 <sbrk_aligned>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	4604      	mov	r4, r0
 8005846:	d158      	bne.n	80058fa <_malloc_r+0xf6>
 8005848:	f8d8 4000 	ldr.w	r4, [r8]
 800584c:	4627      	mov	r7, r4
 800584e:	2f00      	cmp	r7, #0
 8005850:	d143      	bne.n	80058da <_malloc_r+0xd6>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d04b      	beq.n	80058ee <_malloc_r+0xea>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	eb04 0903 	add.w	r9, r4, r3
 8005860:	f001 fda4 	bl	80073ac <_sbrk_r>
 8005864:	4581      	cmp	r9, r0
 8005866:	d142      	bne.n	80058ee <_malloc_r+0xea>
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	4630      	mov	r0, r6
 800586c:	1a6d      	subs	r5, r5, r1
 800586e:	4629      	mov	r1, r5
 8005870:	f7ff ffa6 	bl	80057c0 <sbrk_aligned>
 8005874:	3001      	adds	r0, #1
 8005876:	d03a      	beq.n	80058ee <_malloc_r+0xea>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	442b      	add	r3, r5
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	bb62      	cbnz	r2, 80058e0 <_malloc_r+0xdc>
 8005886:	f8c8 7000 	str.w	r7, [r8]
 800588a:	e00f      	b.n	80058ac <_malloc_r+0xa8>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	1b52      	subs	r2, r2, r5
 8005890:	d420      	bmi.n	80058d4 <_malloc_r+0xd0>
 8005892:	2a0b      	cmp	r2, #11
 8005894:	d917      	bls.n	80058c6 <_malloc_r+0xc2>
 8005896:	1961      	adds	r1, r4, r5
 8005898:	42a3      	cmp	r3, r4
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	6059      	strne	r1, [r3, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	bf08      	it	eq
 80058a4:	f8c8 1000 	streq.w	r1, [r8]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f82f 	bl	8005910 <__malloc_unlock>
 80058b2:	f104 000b 	add.w	r0, r4, #11
 80058b6:	1d23      	adds	r3, r4, #4
 80058b8:	f020 0007 	bic.w	r0, r0, #7
 80058bc:	1ac2      	subs	r2, r0, r3
 80058be:	bf1c      	itt	ne
 80058c0:	1a1b      	subne	r3, r3, r0
 80058c2:	50a3      	strne	r3, [r4, r2]
 80058c4:	e7af      	b.n	8005826 <_malloc_r+0x22>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	bf0c      	ite	eq
 80058cc:	f8c8 2000 	streq.w	r2, [r8]
 80058d0:	605a      	strne	r2, [r3, #4]
 80058d2:	e7eb      	b.n	80058ac <_malloc_r+0xa8>
 80058d4:	4623      	mov	r3, r4
 80058d6:	6864      	ldr	r4, [r4, #4]
 80058d8:	e7ae      	b.n	8005838 <_malloc_r+0x34>
 80058da:	463c      	mov	r4, r7
 80058dc:	687f      	ldr	r7, [r7, #4]
 80058de:	e7b6      	b.n	800584e <_malloc_r+0x4a>
 80058e0:	461a      	mov	r2, r3
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d1fb      	bne.n	80058e0 <_malloc_r+0xdc>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6053      	str	r3, [r2, #4]
 80058ec:	e7de      	b.n	80058ac <_malloc_r+0xa8>
 80058ee:	230c      	movs	r3, #12
 80058f0:	4630      	mov	r0, r6
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f000 f80c 	bl	8005910 <__malloc_unlock>
 80058f8:	e794      	b.n	8005824 <_malloc_r+0x20>
 80058fa:	6005      	str	r5, [r0, #0]
 80058fc:	e7d6      	b.n	80058ac <_malloc_r+0xa8>
 80058fe:	bf00      	nop
 8005900:	200003e4 	.word	0x200003e4

08005904 <__malloc_lock>:
 8005904:	4801      	ldr	r0, [pc, #4]	@ (800590c <__malloc_lock+0x8>)
 8005906:	f7ff b89a 	b.w	8004a3e <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	200003dc 	.word	0x200003dc

08005910 <__malloc_unlock>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__malloc_unlock+0x8>)
 8005912:	f7ff b895 	b.w	8004a40 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	200003dc 	.word	0x200003dc

0800591c <_Balloc>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	69c6      	ldr	r6, [r0, #28]
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	b976      	cbnz	r6, 8005944 <_Balloc+0x28>
 8005926:	2010      	movs	r0, #16
 8005928:	f7ff ff42 	bl	80057b0 <malloc>
 800592c:	4602      	mov	r2, r0
 800592e:	61e0      	str	r0, [r4, #28]
 8005930:	b920      	cbnz	r0, 800593c <_Balloc+0x20>
 8005932:	216b      	movs	r1, #107	@ 0x6b
 8005934:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <_Balloc+0x78>)
 8005936:	4818      	ldr	r0, [pc, #96]	@ (8005998 <_Balloc+0x7c>)
 8005938:	f001 fd5c 	bl	80073f4 <__assert_func>
 800593c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005940:	6006      	str	r6, [r0, #0]
 8005942:	60c6      	str	r6, [r0, #12]
 8005944:	69e6      	ldr	r6, [r4, #28]
 8005946:	68f3      	ldr	r3, [r6, #12]
 8005948:	b183      	cbz	r3, 800596c <_Balloc+0x50>
 800594a:	69e3      	ldr	r3, [r4, #28]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005952:	b9b8      	cbnz	r0, 8005984 <_Balloc+0x68>
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f605 	lsl.w	r6, r1, r5
 800595a:	1d72      	adds	r2, r6, #5
 800595c:	4620      	mov	r0, r4
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	f001 fd66 	bl	8007430 <_calloc_r>
 8005964:	b160      	cbz	r0, 8005980 <_Balloc+0x64>
 8005966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800596a:	e00e      	b.n	800598a <_Balloc+0x6e>
 800596c:	2221      	movs	r2, #33	@ 0x21
 800596e:	2104      	movs	r1, #4
 8005970:	4620      	mov	r0, r4
 8005972:	f001 fd5d 	bl	8007430 <_calloc_r>
 8005976:	69e3      	ldr	r3, [r4, #28]
 8005978:	60f0      	str	r0, [r6, #12]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e4      	bne.n	800594a <_Balloc+0x2e>
 8005980:	2000      	movs	r0, #0
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	6802      	ldr	r2, [r0, #0]
 8005986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800598a:	2300      	movs	r3, #0
 800598c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005990:	e7f7      	b.n	8005982 <_Balloc+0x66>
 8005992:	bf00      	nop
 8005994:	0800819c 	.word	0x0800819c
 8005998:	0800821c 	.word	0x0800821c

0800599c <_Bfree>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	69c6      	ldr	r6, [r0, #28]
 80059a0:	4605      	mov	r5, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	b976      	cbnz	r6, 80059c4 <_Bfree+0x28>
 80059a6:	2010      	movs	r0, #16
 80059a8:	f7ff ff02 	bl	80057b0 <malloc>
 80059ac:	4602      	mov	r2, r0
 80059ae:	61e8      	str	r0, [r5, #28]
 80059b0:	b920      	cbnz	r0, 80059bc <_Bfree+0x20>
 80059b2:	218f      	movs	r1, #143	@ 0x8f
 80059b4:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <_Bfree+0x3c>)
 80059b6:	4809      	ldr	r0, [pc, #36]	@ (80059dc <_Bfree+0x40>)
 80059b8:	f001 fd1c 	bl	80073f4 <__assert_func>
 80059bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059c0:	6006      	str	r6, [r0, #0]
 80059c2:	60c6      	str	r6, [r0, #12]
 80059c4:	b13c      	cbz	r4, 80059d6 <_Bfree+0x3a>
 80059c6:	69eb      	ldr	r3, [r5, #28]
 80059c8:	6862      	ldr	r2, [r4, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059d0:	6021      	str	r1, [r4, #0]
 80059d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	0800819c 	.word	0x0800819c
 80059dc:	0800821c 	.word	0x0800821c

080059e0 <__multadd>:
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	461e      	mov	r6, r3
 80059ea:	2000      	movs	r0, #0
 80059ec:	690d      	ldr	r5, [r1, #16]
 80059ee:	f101 0c14 	add.w	ip, r1, #20
 80059f2:	f8dc 3000 	ldr.w	r3, [ip]
 80059f6:	3001      	adds	r0, #1
 80059f8:	b299      	uxth	r1, r3
 80059fa:	fb02 6101 	mla	r1, r2, r1, r6
 80059fe:	0c1e      	lsrs	r6, r3, #16
 8005a00:	0c0b      	lsrs	r3, r1, #16
 8005a02:	fb02 3306 	mla	r3, r2, r6, r3
 8005a06:	b289      	uxth	r1, r1
 8005a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a0c:	4285      	cmp	r5, r0
 8005a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a12:	f84c 1b04 	str.w	r1, [ip], #4
 8005a16:	dcec      	bgt.n	80059f2 <__multadd+0x12>
 8005a18:	b30e      	cbz	r6, 8005a5e <__multadd+0x7e>
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dc19      	bgt.n	8005a54 <__multadd+0x74>
 8005a20:	6861      	ldr	r1, [r4, #4]
 8005a22:	4638      	mov	r0, r7
 8005a24:	3101      	adds	r1, #1
 8005a26:	f7ff ff79 	bl	800591c <_Balloc>
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	b928      	cbnz	r0, 8005a3a <__multadd+0x5a>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	21ba      	movs	r1, #186	@ 0xba
 8005a32:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <__multadd+0x84>)
 8005a34:	480c      	ldr	r0, [pc, #48]	@ (8005a68 <__multadd+0x88>)
 8005a36:	f001 fcdd 	bl	80073f4 <__assert_func>
 8005a3a:	6922      	ldr	r2, [r4, #16]
 8005a3c:	f104 010c 	add.w	r1, r4, #12
 8005a40:	3202      	adds	r2, #2
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	300c      	adds	r0, #12
 8005a46:	f001 fcc1 	bl	80073cc <memcpy>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ffa5 	bl	800599c <_Bfree>
 8005a52:	4644      	mov	r4, r8
 8005a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a58:	3501      	adds	r5, #1
 8005a5a:	615e      	str	r6, [r3, #20]
 8005a5c:	6125      	str	r5, [r4, #16]
 8005a5e:	4620      	mov	r0, r4
 8005a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a64:	0800820b 	.word	0x0800820b
 8005a68:	0800821c 	.word	0x0800821c

08005a6c <__s2b>:
 8005a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a70:	4615      	mov	r5, r2
 8005a72:	2209      	movs	r2, #9
 8005a74:	461f      	mov	r7, r3
 8005a76:	3308      	adds	r3, #8
 8005a78:	460c      	mov	r4, r1
 8005a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a7e:	4606      	mov	r6, r0
 8005a80:	2201      	movs	r2, #1
 8005a82:	2100      	movs	r1, #0
 8005a84:	429a      	cmp	r2, r3
 8005a86:	db09      	blt.n	8005a9c <__s2b+0x30>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff ff47 	bl	800591c <_Balloc>
 8005a8e:	b940      	cbnz	r0, 8005aa2 <__s2b+0x36>
 8005a90:	4602      	mov	r2, r0
 8005a92:	21d3      	movs	r1, #211	@ 0xd3
 8005a94:	4b18      	ldr	r3, [pc, #96]	@ (8005af8 <__s2b+0x8c>)
 8005a96:	4819      	ldr	r0, [pc, #100]	@ (8005afc <__s2b+0x90>)
 8005a98:	f001 fcac 	bl	80073f4 <__assert_func>
 8005a9c:	0052      	lsls	r2, r2, #1
 8005a9e:	3101      	adds	r1, #1
 8005aa0:	e7f0      	b.n	8005a84 <__s2b+0x18>
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	2d09      	cmp	r5, #9
 8005aa6:	6143      	str	r3, [r0, #20]
 8005aa8:	f04f 0301 	mov.w	r3, #1
 8005aac:	6103      	str	r3, [r0, #16]
 8005aae:	dd16      	ble.n	8005ade <__s2b+0x72>
 8005ab0:	f104 0909 	add.w	r9, r4, #9
 8005ab4:	46c8      	mov	r8, r9
 8005ab6:	442c      	add	r4, r5
 8005ab8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005abc:	4601      	mov	r1, r0
 8005abe:	220a      	movs	r2, #10
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	3b30      	subs	r3, #48	@ 0x30
 8005ac4:	f7ff ff8c 	bl	80059e0 <__multadd>
 8005ac8:	45a0      	cmp	r8, r4
 8005aca:	d1f5      	bne.n	8005ab8 <__s2b+0x4c>
 8005acc:	f1a5 0408 	sub.w	r4, r5, #8
 8005ad0:	444c      	add	r4, r9
 8005ad2:	1b2d      	subs	r5, r5, r4
 8005ad4:	1963      	adds	r3, r4, r5
 8005ad6:	42bb      	cmp	r3, r7
 8005ad8:	db04      	blt.n	8005ae4 <__s2b+0x78>
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	2509      	movs	r5, #9
 8005ae0:	340a      	adds	r4, #10
 8005ae2:	e7f6      	b.n	8005ad2 <__s2b+0x66>
 8005ae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ae8:	4601      	mov	r1, r0
 8005aea:	220a      	movs	r2, #10
 8005aec:	4630      	mov	r0, r6
 8005aee:	3b30      	subs	r3, #48	@ 0x30
 8005af0:	f7ff ff76 	bl	80059e0 <__multadd>
 8005af4:	e7ee      	b.n	8005ad4 <__s2b+0x68>
 8005af6:	bf00      	nop
 8005af8:	0800820b 	.word	0x0800820b
 8005afc:	0800821c 	.word	0x0800821c

08005b00 <__hi0bits>:
 8005b00:	4603      	mov	r3, r0
 8005b02:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b06:	bf3a      	itte	cc
 8005b08:	0403      	lslcc	r3, r0, #16
 8005b0a:	2010      	movcc	r0, #16
 8005b0c:	2000      	movcs	r0, #0
 8005b0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b12:	bf3c      	itt	cc
 8005b14:	021b      	lslcc	r3, r3, #8
 8005b16:	3008      	addcc	r0, #8
 8005b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1c:	bf3c      	itt	cc
 8005b1e:	011b      	lslcc	r3, r3, #4
 8005b20:	3004      	addcc	r0, #4
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b26:	bf3c      	itt	cc
 8005b28:	009b      	lslcc	r3, r3, #2
 8005b2a:	3002      	addcc	r0, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	db05      	blt.n	8005b3c <__hi0bits+0x3c>
 8005b30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005b34:	f100 0001 	add.w	r0, r0, #1
 8005b38:	bf08      	it	eq
 8005b3a:	2020      	moveq	r0, #32
 8005b3c:	4770      	bx	lr

08005b3e <__lo0bits>:
 8005b3e:	6803      	ldr	r3, [r0, #0]
 8005b40:	4602      	mov	r2, r0
 8005b42:	f013 0007 	ands.w	r0, r3, #7
 8005b46:	d00b      	beq.n	8005b60 <__lo0bits+0x22>
 8005b48:	07d9      	lsls	r1, r3, #31
 8005b4a:	d421      	bmi.n	8005b90 <__lo0bits+0x52>
 8005b4c:	0798      	lsls	r0, r3, #30
 8005b4e:	bf49      	itett	mi
 8005b50:	085b      	lsrmi	r3, r3, #1
 8005b52:	089b      	lsrpl	r3, r3, #2
 8005b54:	2001      	movmi	r0, #1
 8005b56:	6013      	strmi	r3, [r2, #0]
 8005b58:	bf5c      	itt	pl
 8005b5a:	2002      	movpl	r0, #2
 8005b5c:	6013      	strpl	r3, [r2, #0]
 8005b5e:	4770      	bx	lr
 8005b60:	b299      	uxth	r1, r3
 8005b62:	b909      	cbnz	r1, 8005b68 <__lo0bits+0x2a>
 8005b64:	2010      	movs	r0, #16
 8005b66:	0c1b      	lsrs	r3, r3, #16
 8005b68:	b2d9      	uxtb	r1, r3
 8005b6a:	b909      	cbnz	r1, 8005b70 <__lo0bits+0x32>
 8005b6c:	3008      	adds	r0, #8
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	0719      	lsls	r1, r3, #28
 8005b72:	bf04      	itt	eq
 8005b74:	091b      	lsreq	r3, r3, #4
 8005b76:	3004      	addeq	r0, #4
 8005b78:	0799      	lsls	r1, r3, #30
 8005b7a:	bf04      	itt	eq
 8005b7c:	089b      	lsreq	r3, r3, #2
 8005b7e:	3002      	addeq	r0, #2
 8005b80:	07d9      	lsls	r1, r3, #31
 8005b82:	d403      	bmi.n	8005b8c <__lo0bits+0x4e>
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f100 0001 	add.w	r0, r0, #1
 8005b8a:	d003      	beq.n	8005b94 <__lo0bits+0x56>
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4770      	bx	lr
 8005b90:	2000      	movs	r0, #0
 8005b92:	4770      	bx	lr
 8005b94:	2020      	movs	r0, #32
 8005b96:	4770      	bx	lr

08005b98 <__i2b>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	f7ff febd 	bl	800591c <_Balloc>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__i2b+0x1a>
 8005ba6:	f240 1145 	movw	r1, #325	@ 0x145
 8005baa:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <__i2b+0x24>)
 8005bac:	4804      	ldr	r0, [pc, #16]	@ (8005bc0 <__i2b+0x28>)
 8005bae:	f001 fc21 	bl	80073f4 <__assert_func>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	6144      	str	r4, [r0, #20]
 8005bb6:	6103      	str	r3, [r0, #16]
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	0800820b 	.word	0x0800820b
 8005bc0:	0800821c 	.word	0x0800821c

08005bc4 <__multiply>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	4617      	mov	r7, r2
 8005bca:	690a      	ldr	r2, [r1, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4689      	mov	r9, r1
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	bfa2      	ittt	ge
 8005bd4:	463b      	movge	r3, r7
 8005bd6:	460f      	movge	r7, r1
 8005bd8:	4699      	movge	r9, r3
 8005bda:	693d      	ldr	r5, [r7, #16]
 8005bdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	eb05 060a 	add.w	r6, r5, sl
 8005be8:	42b3      	cmp	r3, r6
 8005bea:	b085      	sub	sp, #20
 8005bec:	bfb8      	it	lt
 8005bee:	3101      	addlt	r1, #1
 8005bf0:	f7ff fe94 	bl	800591c <_Balloc>
 8005bf4:	b930      	cbnz	r0, 8005c04 <__multiply+0x40>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005bfc:	4b40      	ldr	r3, [pc, #256]	@ (8005d00 <__multiply+0x13c>)
 8005bfe:	4841      	ldr	r0, [pc, #260]	@ (8005d04 <__multiply+0x140>)
 8005c00:	f001 fbf8 	bl	80073f4 <__assert_func>
 8005c04:	f100 0414 	add.w	r4, r0, #20
 8005c08:	4623      	mov	r3, r4
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005c10:	4573      	cmp	r3, lr
 8005c12:	d320      	bcc.n	8005c56 <__multiply+0x92>
 8005c14:	f107 0814 	add.w	r8, r7, #20
 8005c18:	f109 0114 	add.w	r1, r9, #20
 8005c1c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005c20:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005c24:	9302      	str	r3, [sp, #8]
 8005c26:	1beb      	subs	r3, r5, r7
 8005c28:	3b15      	subs	r3, #21
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	3304      	adds	r3, #4
 8005c30:	3715      	adds	r7, #21
 8005c32:	42bd      	cmp	r5, r7
 8005c34:	bf38      	it	cc
 8005c36:	2304      	movcc	r3, #4
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	9103      	str	r1, [sp, #12]
 8005c3e:	428b      	cmp	r3, r1
 8005c40:	d80c      	bhi.n	8005c5c <__multiply+0x98>
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	dd03      	ble.n	8005c4e <__multiply+0x8a>
 8005c46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d055      	beq.n	8005cfa <__multiply+0x136>
 8005c4e:	6106      	str	r6, [r0, #16]
 8005c50:	b005      	add	sp, #20
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	f843 2b04 	str.w	r2, [r3], #4
 8005c5a:	e7d9      	b.n	8005c10 <__multiply+0x4c>
 8005c5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	d01f      	beq.n	8005ca6 <__multiply+0xe2>
 8005c66:	46c4      	mov	ip, r8
 8005c68:	46a1      	mov	r9, r4
 8005c6a:	2700      	movs	r7, #0
 8005c6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c70:	f8d9 3000 	ldr.w	r3, [r9]
 8005c74:	fa1f fb82 	uxth.w	fp, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	fb0a 330b 	mla	r3, sl, fp, r3
 8005c7e:	443b      	add	r3, r7
 8005c80:	f8d9 7000 	ldr.w	r7, [r9]
 8005c84:	0c12      	lsrs	r2, r2, #16
 8005c86:	0c3f      	lsrs	r7, r7, #16
 8005c88:	fb0a 7202 	mla	r2, sl, r2, r7
 8005c8c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c96:	4565      	cmp	r5, ip
 8005c98:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005c9c:	f849 3b04 	str.w	r3, [r9], #4
 8005ca0:	d8e4      	bhi.n	8005c6c <__multiply+0xa8>
 8005ca2:	9b01      	ldr	r3, [sp, #4]
 8005ca4:	50e7      	str	r7, [r4, r3]
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	3104      	adds	r1, #4
 8005caa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005cae:	f1b9 0f00 	cmp.w	r9, #0
 8005cb2:	d020      	beq.n	8005cf6 <__multiply+0x132>
 8005cb4:	4647      	mov	r7, r8
 8005cb6:	46a4      	mov	ip, r4
 8005cb8:	f04f 0a00 	mov.w	sl, #0
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	f8b7 b000 	ldrh.w	fp, [r7]
 8005cc2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	fb09 220b 	mla	r2, r9, fp, r2
 8005ccc:	4452      	add	r2, sl
 8005cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd2:	f84c 3b04 	str.w	r3, [ip], #4
 8005cd6:	f857 3b04 	ldr.w	r3, [r7], #4
 8005cda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cde:	f8bc 3000 	ldrh.w	r3, [ip]
 8005ce2:	42bd      	cmp	r5, r7
 8005ce4:	fb09 330a 	mla	r3, r9, sl, r3
 8005ce8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005cec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cf0:	d8e5      	bhi.n	8005cbe <__multiply+0xfa>
 8005cf2:	9a01      	ldr	r2, [sp, #4]
 8005cf4:	50a3      	str	r3, [r4, r2]
 8005cf6:	3404      	adds	r4, #4
 8005cf8:	e79f      	b.n	8005c3a <__multiply+0x76>
 8005cfa:	3e01      	subs	r6, #1
 8005cfc:	e7a1      	b.n	8005c42 <__multiply+0x7e>
 8005cfe:	bf00      	nop
 8005d00:	0800820b 	.word	0x0800820b
 8005d04:	0800821c 	.word	0x0800821c

08005d08 <__pow5mult>:
 8005d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d0c:	4615      	mov	r5, r2
 8005d0e:	f012 0203 	ands.w	r2, r2, #3
 8005d12:	4607      	mov	r7, r0
 8005d14:	460e      	mov	r6, r1
 8005d16:	d007      	beq.n	8005d28 <__pow5mult+0x20>
 8005d18:	4c25      	ldr	r4, [pc, #148]	@ (8005db0 <__pow5mult+0xa8>)
 8005d1a:	3a01      	subs	r2, #1
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d22:	f7ff fe5d 	bl	80059e0 <__multadd>
 8005d26:	4606      	mov	r6, r0
 8005d28:	10ad      	asrs	r5, r5, #2
 8005d2a:	d03d      	beq.n	8005da8 <__pow5mult+0xa0>
 8005d2c:	69fc      	ldr	r4, [r7, #28]
 8005d2e:	b97c      	cbnz	r4, 8005d50 <__pow5mult+0x48>
 8005d30:	2010      	movs	r0, #16
 8005d32:	f7ff fd3d 	bl	80057b0 <malloc>
 8005d36:	4602      	mov	r2, r0
 8005d38:	61f8      	str	r0, [r7, #28]
 8005d3a:	b928      	cbnz	r0, 8005d48 <__pow5mult+0x40>
 8005d3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005d40:	4b1c      	ldr	r3, [pc, #112]	@ (8005db4 <__pow5mult+0xac>)
 8005d42:	481d      	ldr	r0, [pc, #116]	@ (8005db8 <__pow5mult+0xb0>)
 8005d44:	f001 fb56 	bl	80073f4 <__assert_func>
 8005d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d4c:	6004      	str	r4, [r0, #0]
 8005d4e:	60c4      	str	r4, [r0, #12]
 8005d50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d58:	b94c      	cbnz	r4, 8005d6e <__pow5mult+0x66>
 8005d5a:	f240 2171 	movw	r1, #625	@ 0x271
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f7ff ff1a 	bl	8005b98 <__i2b>
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d6c:	6003      	str	r3, [r0, #0]
 8005d6e:	f04f 0900 	mov.w	r9, #0
 8005d72:	07eb      	lsls	r3, r5, #31
 8005d74:	d50a      	bpl.n	8005d8c <__pow5mult+0x84>
 8005d76:	4631      	mov	r1, r6
 8005d78:	4622      	mov	r2, r4
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f7ff ff22 	bl	8005bc4 <__multiply>
 8005d80:	4680      	mov	r8, r0
 8005d82:	4631      	mov	r1, r6
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff fe09 	bl	800599c <_Bfree>
 8005d8a:	4646      	mov	r6, r8
 8005d8c:	106d      	asrs	r5, r5, #1
 8005d8e:	d00b      	beq.n	8005da8 <__pow5mult+0xa0>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	b938      	cbnz	r0, 8005da4 <__pow5mult+0x9c>
 8005d94:	4622      	mov	r2, r4
 8005d96:	4621      	mov	r1, r4
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f7ff ff13 	bl	8005bc4 <__multiply>
 8005d9e:	6020      	str	r0, [r4, #0]
 8005da0:	f8c0 9000 	str.w	r9, [r0]
 8005da4:	4604      	mov	r4, r0
 8005da6:	e7e4      	b.n	8005d72 <__pow5mult+0x6a>
 8005da8:	4630      	mov	r0, r6
 8005daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dae:	bf00      	nop
 8005db0:	0800832c 	.word	0x0800832c
 8005db4:	0800819c 	.word	0x0800819c
 8005db8:	0800821c 	.word	0x0800821c

08005dbc <__lshift>:
 8005dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	4691      	mov	r9, r2
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	6849      	ldr	r1, [r1, #4]
 8005dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dd4:	f108 0601 	add.w	r6, r8, #1
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	db0b      	blt.n	8005df4 <__lshift+0x38>
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff fd9d 	bl	800591c <_Balloc>
 8005de2:	4605      	mov	r5, r0
 8005de4:	b948      	cbnz	r0, 8005dfa <__lshift+0x3e>
 8005de6:	4602      	mov	r2, r0
 8005de8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005dec:	4b27      	ldr	r3, [pc, #156]	@ (8005e8c <__lshift+0xd0>)
 8005dee:	4828      	ldr	r0, [pc, #160]	@ (8005e90 <__lshift+0xd4>)
 8005df0:	f001 fb00 	bl	80073f4 <__assert_func>
 8005df4:	3101      	adds	r1, #1
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	e7ee      	b.n	8005dd8 <__lshift+0x1c>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f100 0114 	add.w	r1, r0, #20
 8005e00:	f100 0210 	add.w	r2, r0, #16
 8005e04:	4618      	mov	r0, r3
 8005e06:	4553      	cmp	r3, sl
 8005e08:	db33      	blt.n	8005e72 <__lshift+0xb6>
 8005e0a:	6920      	ldr	r0, [r4, #16]
 8005e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e10:	f104 0314 	add.w	r3, r4, #20
 8005e14:	f019 091f 	ands.w	r9, r9, #31
 8005e18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e20:	d02b      	beq.n	8005e7a <__lshift+0xbe>
 8005e22:	468a      	mov	sl, r1
 8005e24:	2200      	movs	r2, #0
 8005e26:	f1c9 0e20 	rsb	lr, r9, #32
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	fa00 f009 	lsl.w	r0, r0, r9
 8005e30:	4310      	orrs	r0, r2
 8005e32:	f84a 0b04 	str.w	r0, [sl], #4
 8005e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3a:	459c      	cmp	ip, r3
 8005e3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e40:	d8f3      	bhi.n	8005e2a <__lshift+0x6e>
 8005e42:	ebac 0304 	sub.w	r3, ip, r4
 8005e46:	3b15      	subs	r3, #21
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	f104 0015 	add.w	r0, r4, #21
 8005e52:	4560      	cmp	r0, ip
 8005e54:	bf88      	it	hi
 8005e56:	2304      	movhi	r3, #4
 8005e58:	50ca      	str	r2, [r1, r3]
 8005e5a:	b10a      	cbz	r2, 8005e60 <__lshift+0xa4>
 8005e5c:	f108 0602 	add.w	r6, r8, #2
 8005e60:	3e01      	subs	r6, #1
 8005e62:	4638      	mov	r0, r7
 8005e64:	4621      	mov	r1, r4
 8005e66:	612e      	str	r6, [r5, #16]
 8005e68:	f7ff fd98 	bl	800599c <_Bfree>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7c5      	b.n	8005e06 <__lshift+0x4a>
 8005e7a:	3904      	subs	r1, #4
 8005e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e80:	459c      	cmp	ip, r3
 8005e82:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e86:	d8f9      	bhi.n	8005e7c <__lshift+0xc0>
 8005e88:	e7ea      	b.n	8005e60 <__lshift+0xa4>
 8005e8a:	bf00      	nop
 8005e8c:	0800820b 	.word	0x0800820b
 8005e90:	0800821c 	.word	0x0800821c

08005e94 <__mcmp>:
 8005e94:	4603      	mov	r3, r0
 8005e96:	690a      	ldr	r2, [r1, #16]
 8005e98:	6900      	ldr	r0, [r0, #16]
 8005e9a:	b530      	push	{r4, r5, lr}
 8005e9c:	1a80      	subs	r0, r0, r2
 8005e9e:	d10e      	bne.n	8005ebe <__mcmp+0x2a>
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	3114      	adds	r1, #20
 8005ea4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ea8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005eac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005eb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005eb4:	4295      	cmp	r5, r2
 8005eb6:	d003      	beq.n	8005ec0 <__mcmp+0x2c>
 8005eb8:	d205      	bcs.n	8005ec6 <__mcmp+0x32>
 8005eba:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebe:	bd30      	pop	{r4, r5, pc}
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d3f3      	bcc.n	8005eac <__mcmp+0x18>
 8005ec4:	e7fb      	b.n	8005ebe <__mcmp+0x2a>
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	e7f9      	b.n	8005ebe <__mcmp+0x2a>
	...

08005ecc <__mdiff>:
 8005ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	4689      	mov	r9, r1
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4648      	mov	r0, r9
 8005ed8:	4614      	mov	r4, r2
 8005eda:	f7ff ffdb 	bl	8005e94 <__mcmp>
 8005ede:	1e05      	subs	r5, r0, #0
 8005ee0:	d112      	bne.n	8005f08 <__mdiff+0x3c>
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7ff fd19 	bl	800591c <_Balloc>
 8005eea:	4602      	mov	r2, r0
 8005eec:	b928      	cbnz	r0, 8005efa <__mdiff+0x2e>
 8005eee:	f240 2137 	movw	r1, #567	@ 0x237
 8005ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fec <__mdiff+0x120>)
 8005ef4:	483e      	ldr	r0, [pc, #248]	@ (8005ff0 <__mdiff+0x124>)
 8005ef6:	f001 fa7d 	bl	80073f4 <__assert_func>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f00:	4610      	mov	r0, r2
 8005f02:	b003      	add	sp, #12
 8005f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f08:	bfbc      	itt	lt
 8005f0a:	464b      	movlt	r3, r9
 8005f0c:	46a1      	movlt	r9, r4
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005f14:	bfba      	itte	lt
 8005f16:	461c      	movlt	r4, r3
 8005f18:	2501      	movlt	r5, #1
 8005f1a:	2500      	movge	r5, #0
 8005f1c:	f7ff fcfe 	bl	800591c <_Balloc>
 8005f20:	4602      	mov	r2, r0
 8005f22:	b918      	cbnz	r0, 8005f2c <__mdiff+0x60>
 8005f24:	f240 2145 	movw	r1, #581	@ 0x245
 8005f28:	4b30      	ldr	r3, [pc, #192]	@ (8005fec <__mdiff+0x120>)
 8005f2a:	e7e3      	b.n	8005ef4 <__mdiff+0x28>
 8005f2c:	f100 0b14 	add.w	fp, r0, #20
 8005f30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005f34:	f109 0310 	add.w	r3, r9, #16
 8005f38:	60c5      	str	r5, [r0, #12]
 8005f3a:	f04f 0c00 	mov.w	ip, #0
 8005f3e:	f109 0514 	add.w	r5, r9, #20
 8005f42:	46d9      	mov	r9, fp
 8005f44:	6926      	ldr	r6, [r4, #16]
 8005f46:	f104 0e14 	add.w	lr, r4, #20
 8005f4a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005f4e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	9b01      	ldr	r3, [sp, #4]
 8005f56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005f5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005f5e:	b281      	uxth	r1, r0
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	fa1f f38a 	uxth.w	r3, sl
 8005f66:	1a5b      	subs	r3, r3, r1
 8005f68:	0c00      	lsrs	r0, r0, #16
 8005f6a:	4463      	add	r3, ip
 8005f6c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005f70:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f7a:	4576      	cmp	r6, lr
 8005f7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f80:	f849 3b04 	str.w	r3, [r9], #4
 8005f84:	d8e6      	bhi.n	8005f54 <__mdiff+0x88>
 8005f86:	1b33      	subs	r3, r6, r4
 8005f88:	3b15      	subs	r3, #21
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	3415      	adds	r4, #21
 8005f90:	3304      	adds	r3, #4
 8005f92:	42a6      	cmp	r6, r4
 8005f94:	bf38      	it	cc
 8005f96:	2304      	movcc	r3, #4
 8005f98:	441d      	add	r5, r3
 8005f9a:	445b      	add	r3, fp
 8005f9c:	461e      	mov	r6, r3
 8005f9e:	462c      	mov	r4, r5
 8005fa0:	4544      	cmp	r4, r8
 8005fa2:	d30e      	bcc.n	8005fc2 <__mdiff+0xf6>
 8005fa4:	f108 0103 	add.w	r1, r8, #3
 8005fa8:	1b49      	subs	r1, r1, r5
 8005faa:	f021 0103 	bic.w	r1, r1, #3
 8005fae:	3d03      	subs	r5, #3
 8005fb0:	45a8      	cmp	r8, r5
 8005fb2:	bf38      	it	cc
 8005fb4:	2100      	movcc	r1, #0
 8005fb6:	440b      	add	r3, r1
 8005fb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005fbc:	b199      	cbz	r1, 8005fe6 <__mdiff+0x11a>
 8005fbe:	6117      	str	r7, [r2, #16]
 8005fc0:	e79e      	b.n	8005f00 <__mdiff+0x34>
 8005fc2:	46e6      	mov	lr, ip
 8005fc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005fc8:	fa1f fc81 	uxth.w	ip, r1
 8005fcc:	44f4      	add	ip, lr
 8005fce:	0c08      	lsrs	r0, r1, #16
 8005fd0:	4471      	add	r1, lr
 8005fd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fe0:	f846 1b04 	str.w	r1, [r6], #4
 8005fe4:	e7dc      	b.n	8005fa0 <__mdiff+0xd4>
 8005fe6:	3f01      	subs	r7, #1
 8005fe8:	e7e6      	b.n	8005fb8 <__mdiff+0xec>
 8005fea:	bf00      	nop
 8005fec:	0800820b 	.word	0x0800820b
 8005ff0:	0800821c 	.word	0x0800821c

08005ff4 <__ulp>:
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8006030 <__ulp+0x3c>)
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dc08      	bgt.n	8006012 <__ulp+0x1e>
 8006000:	425b      	negs	r3, r3
 8006002:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006006:	ea4f 5223 	mov.w	r2, r3, asr #20
 800600a:	da04      	bge.n	8006016 <__ulp+0x22>
 800600c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006010:	4113      	asrs	r3, r2
 8006012:	2200      	movs	r2, #0
 8006014:	e008      	b.n	8006028 <__ulp+0x34>
 8006016:	f1a2 0314 	sub.w	r3, r2, #20
 800601a:	2b1e      	cmp	r3, #30
 800601c:	bfd6      	itet	le
 800601e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006022:	2201      	movgt	r2, #1
 8006024:	40da      	lsrle	r2, r3
 8006026:	2300      	movs	r3, #0
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	7ff00000 	.word	0x7ff00000

08006034 <__b2d>:
 8006034:	6902      	ldr	r2, [r0, #16]
 8006036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006038:	f100 0614 	add.w	r6, r0, #20
 800603c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006040:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006044:	4f1e      	ldr	r7, [pc, #120]	@ (80060c0 <__b2d+0x8c>)
 8006046:	4620      	mov	r0, r4
 8006048:	f7ff fd5a 	bl	8005b00 <__hi0bits>
 800604c:	4603      	mov	r3, r0
 800604e:	f1c0 0020 	rsb	r0, r0, #32
 8006052:	2b0a      	cmp	r3, #10
 8006054:	f1a2 0504 	sub.w	r5, r2, #4
 8006058:	6008      	str	r0, [r1, #0]
 800605a:	dc12      	bgt.n	8006082 <__b2d+0x4e>
 800605c:	42ae      	cmp	r6, r5
 800605e:	bf2c      	ite	cs
 8006060:	2200      	movcs	r2, #0
 8006062:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006066:	f1c3 0c0b 	rsb	ip, r3, #11
 800606a:	3315      	adds	r3, #21
 800606c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006070:	fa04 f303 	lsl.w	r3, r4, r3
 8006074:	fa22 f20c 	lsr.w	r2, r2, ip
 8006078:	ea4e 0107 	orr.w	r1, lr, r7
 800607c:	431a      	orrs	r2, r3
 800607e:	4610      	mov	r0, r2
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006082:	42ae      	cmp	r6, r5
 8006084:	bf36      	itet	cc
 8006086:	f1a2 0508 	subcc.w	r5, r2, #8
 800608a:	2200      	movcs	r2, #0
 800608c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006090:	3b0b      	subs	r3, #11
 8006092:	d012      	beq.n	80060ba <__b2d+0x86>
 8006094:	f1c3 0720 	rsb	r7, r3, #32
 8006098:	fa22 f107 	lsr.w	r1, r2, r7
 800609c:	409c      	lsls	r4, r3
 800609e:	430c      	orrs	r4, r1
 80060a0:	42b5      	cmp	r5, r6
 80060a2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80060a6:	bf94      	ite	ls
 80060a8:	2400      	movls	r4, #0
 80060aa:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80060ae:	409a      	lsls	r2, r3
 80060b0:	40fc      	lsrs	r4, r7
 80060b2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80060b6:	4322      	orrs	r2, r4
 80060b8:	e7e1      	b.n	800607e <__b2d+0x4a>
 80060ba:	ea44 0107 	orr.w	r1, r4, r7
 80060be:	e7de      	b.n	800607e <__b2d+0x4a>
 80060c0:	3ff00000 	.word	0x3ff00000

080060c4 <__d2b>:
 80060c4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80060c8:	2101      	movs	r1, #1
 80060ca:	4690      	mov	r8, r2
 80060cc:	4699      	mov	r9, r3
 80060ce:	9e08      	ldr	r6, [sp, #32]
 80060d0:	f7ff fc24 	bl	800591c <_Balloc>
 80060d4:	4604      	mov	r4, r0
 80060d6:	b930      	cbnz	r0, 80060e6 <__d2b+0x22>
 80060d8:	4602      	mov	r2, r0
 80060da:	f240 310f 	movw	r1, #783	@ 0x30f
 80060de:	4b23      	ldr	r3, [pc, #140]	@ (800616c <__d2b+0xa8>)
 80060e0:	4823      	ldr	r0, [pc, #140]	@ (8006170 <__d2b+0xac>)
 80060e2:	f001 f987 	bl	80073f4 <__assert_func>
 80060e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060ee:	b10d      	cbz	r5, 80060f4 <__d2b+0x30>
 80060f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f1b8 0300 	subs.w	r3, r8, #0
 80060fa:	d024      	beq.n	8006146 <__d2b+0x82>
 80060fc:	4668      	mov	r0, sp
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	f7ff fd1d 	bl	8005b3e <__lo0bits>
 8006104:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006108:	b1d8      	cbz	r0, 8006142 <__d2b+0x7e>
 800610a:	f1c0 0320 	rsb	r3, r0, #32
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	430b      	orrs	r3, r1
 8006114:	40c2      	lsrs	r2, r0
 8006116:	6163      	str	r3, [r4, #20]
 8006118:	9201      	str	r2, [sp, #4]
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf0c      	ite	eq
 8006120:	2201      	moveq	r2, #1
 8006122:	2202      	movne	r2, #2
 8006124:	61a3      	str	r3, [r4, #24]
 8006126:	6122      	str	r2, [r4, #16]
 8006128:	b1ad      	cbz	r5, 8006156 <__d2b+0x92>
 800612a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800612e:	4405      	add	r5, r0
 8006130:	6035      	str	r5, [r6, #0]
 8006132:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006138:	6018      	str	r0, [r3, #0]
 800613a:	4620      	mov	r0, r4
 800613c:	b002      	add	sp, #8
 800613e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006142:	6161      	str	r1, [r4, #20]
 8006144:	e7e9      	b.n	800611a <__d2b+0x56>
 8006146:	a801      	add	r0, sp, #4
 8006148:	f7ff fcf9 	bl	8005b3e <__lo0bits>
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	6163      	str	r3, [r4, #20]
 8006152:	3020      	adds	r0, #32
 8006154:	e7e7      	b.n	8006126 <__d2b+0x62>
 8006156:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800615a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800615e:	6030      	str	r0, [r6, #0]
 8006160:	6918      	ldr	r0, [r3, #16]
 8006162:	f7ff fccd 	bl	8005b00 <__hi0bits>
 8006166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800616a:	e7e4      	b.n	8006136 <__d2b+0x72>
 800616c:	0800820b 	.word	0x0800820b
 8006170:	0800821c 	.word	0x0800821c

08006174 <__ratio>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	b085      	sub	sp, #20
 800617a:	e9cd 1000 	strd	r1, r0, [sp]
 800617e:	a902      	add	r1, sp, #8
 8006180:	f7ff ff58 	bl	8006034 <__b2d>
 8006184:	468b      	mov	fp, r1
 8006186:	4606      	mov	r6, r0
 8006188:	460f      	mov	r7, r1
 800618a:	9800      	ldr	r0, [sp, #0]
 800618c:	a903      	add	r1, sp, #12
 800618e:	f7ff ff51 	bl	8006034 <__b2d>
 8006192:	460d      	mov	r5, r1
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	4689      	mov	r9, r1
 8006198:	6919      	ldr	r1, [r3, #16]
 800619a:	9b00      	ldr	r3, [sp, #0]
 800619c:	4604      	mov	r4, r0
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4630      	mov	r0, r6
 80061a2:	1ac9      	subs	r1, r1, r3
 80061a4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfcd      	iteet	gt
 80061b2:	463a      	movgt	r2, r7
 80061b4:	462a      	movle	r2, r5
 80061b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80061ba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80061be:	bfd8      	it	le
 80061c0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80061c4:	464b      	mov	r3, r9
 80061c6:	4622      	mov	r2, r4
 80061c8:	4659      	mov	r1, fp
 80061ca:	f7fa faaf 	bl	800072c <__aeabi_ddiv>
 80061ce:	b005      	add	sp, #20
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061d4 <__copybits>:
 80061d4:	3901      	subs	r1, #1
 80061d6:	b570      	push	{r4, r5, r6, lr}
 80061d8:	1149      	asrs	r1, r1, #5
 80061da:	6914      	ldr	r4, [r2, #16]
 80061dc:	3101      	adds	r1, #1
 80061de:	f102 0314 	add.w	r3, r2, #20
 80061e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80061ea:	1f05      	subs	r5, r0, #4
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d30c      	bcc.n	800620a <__copybits+0x36>
 80061f0:	1aa3      	subs	r3, r4, r2
 80061f2:	3b11      	subs	r3, #17
 80061f4:	f023 0303 	bic.w	r3, r3, #3
 80061f8:	3211      	adds	r2, #17
 80061fa:	42a2      	cmp	r2, r4
 80061fc:	bf88      	it	hi
 80061fe:	2300      	movhi	r3, #0
 8006200:	4418      	add	r0, r3
 8006202:	2300      	movs	r3, #0
 8006204:	4288      	cmp	r0, r1
 8006206:	d305      	bcc.n	8006214 <__copybits+0x40>
 8006208:	bd70      	pop	{r4, r5, r6, pc}
 800620a:	f853 6b04 	ldr.w	r6, [r3], #4
 800620e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006212:	e7eb      	b.n	80061ec <__copybits+0x18>
 8006214:	f840 3b04 	str.w	r3, [r0], #4
 8006218:	e7f4      	b.n	8006204 <__copybits+0x30>

0800621a <__any_on>:
 800621a:	f100 0214 	add.w	r2, r0, #20
 800621e:	6900      	ldr	r0, [r0, #16]
 8006220:	114b      	asrs	r3, r1, #5
 8006222:	4298      	cmp	r0, r3
 8006224:	b510      	push	{r4, lr}
 8006226:	db11      	blt.n	800624c <__any_on+0x32>
 8006228:	dd0a      	ble.n	8006240 <__any_on+0x26>
 800622a:	f011 011f 	ands.w	r1, r1, #31
 800622e:	d007      	beq.n	8006240 <__any_on+0x26>
 8006230:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006234:	fa24 f001 	lsr.w	r0, r4, r1
 8006238:	fa00 f101 	lsl.w	r1, r0, r1
 800623c:	428c      	cmp	r4, r1
 800623e:	d10b      	bne.n	8006258 <__any_on+0x3e>
 8006240:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006244:	4293      	cmp	r3, r2
 8006246:	d803      	bhi.n	8006250 <__any_on+0x36>
 8006248:	2000      	movs	r0, #0
 800624a:	bd10      	pop	{r4, pc}
 800624c:	4603      	mov	r3, r0
 800624e:	e7f7      	b.n	8006240 <__any_on+0x26>
 8006250:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006254:	2900      	cmp	r1, #0
 8006256:	d0f5      	beq.n	8006244 <__any_on+0x2a>
 8006258:	2001      	movs	r0, #1
 800625a:	e7f6      	b.n	800624a <__any_on+0x30>

0800625c <sulp>:
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	460f      	mov	r7, r1
 8006262:	4690      	mov	r8, r2
 8006264:	f7ff fec6 	bl	8005ff4 <__ulp>
 8006268:	4604      	mov	r4, r0
 800626a:	460d      	mov	r5, r1
 800626c:	f1b8 0f00 	cmp.w	r8, #0
 8006270:	d011      	beq.n	8006296 <sulp+0x3a>
 8006272:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006276:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd0b      	ble.n	8006296 <sulp+0x3a>
 800627e:	2400      	movs	r4, #0
 8006280:	051b      	lsls	r3, r3, #20
 8006282:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006286:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800628a:	4622      	mov	r2, r4
 800628c:	462b      	mov	r3, r5
 800628e:	f7fa f923 	bl	80004d8 <__aeabi_dmul>
 8006292:	4604      	mov	r4, r0
 8006294:	460d      	mov	r5, r1
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080062a0 <_strtod_l>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	b09f      	sub	sp, #124	@ 0x7c
 80062a6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80062a8:	2200      	movs	r2, #0
 80062aa:	460c      	mov	r4, r1
 80062ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80062ae:	f04f 0a00 	mov.w	sl, #0
 80062b2:	f04f 0b00 	mov.w	fp, #0
 80062b6:	460a      	mov	r2, r1
 80062b8:	9005      	str	r0, [sp, #20]
 80062ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80062bc:	7811      	ldrb	r1, [r2, #0]
 80062be:	292b      	cmp	r1, #43	@ 0x2b
 80062c0:	d048      	beq.n	8006354 <_strtod_l+0xb4>
 80062c2:	d836      	bhi.n	8006332 <_strtod_l+0x92>
 80062c4:	290d      	cmp	r1, #13
 80062c6:	d830      	bhi.n	800632a <_strtod_l+0x8a>
 80062c8:	2908      	cmp	r1, #8
 80062ca:	d830      	bhi.n	800632e <_strtod_l+0x8e>
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d039      	beq.n	8006344 <_strtod_l+0xa4>
 80062d0:	2200      	movs	r2, #0
 80062d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80062d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80062d6:	782a      	ldrb	r2, [r5, #0]
 80062d8:	2a30      	cmp	r2, #48	@ 0x30
 80062da:	f040 80b0 	bne.w	800643e <_strtod_l+0x19e>
 80062de:	786a      	ldrb	r2, [r5, #1]
 80062e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80062e4:	2a58      	cmp	r2, #88	@ 0x58
 80062e6:	d16c      	bne.n	80063c2 <_strtod_l+0x122>
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ec:	4a8f      	ldr	r2, [pc, #572]	@ (800652c <_strtod_l+0x28c>)
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	ab1a      	add	r3, sp, #104	@ 0x68
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	9805      	ldr	r0, [sp, #20]
 80062f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80062f8:	a919      	add	r1, sp, #100	@ 0x64
 80062fa:	f001 f915 	bl	8007528 <__gethex>
 80062fe:	f010 060f 	ands.w	r6, r0, #15
 8006302:	4604      	mov	r4, r0
 8006304:	d005      	beq.n	8006312 <_strtod_l+0x72>
 8006306:	2e06      	cmp	r6, #6
 8006308:	d126      	bne.n	8006358 <_strtod_l+0xb8>
 800630a:	2300      	movs	r3, #0
 800630c:	3501      	adds	r5, #1
 800630e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006310:	930e      	str	r3, [sp, #56]	@ 0x38
 8006312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f040 8582 	bne.w	8006e1e <_strtod_l+0xb7e>
 800631a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800631c:	b1bb      	cbz	r3, 800634e <_strtod_l+0xae>
 800631e:	4650      	mov	r0, sl
 8006320:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006324:	b01f      	add	sp, #124	@ 0x7c
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	2920      	cmp	r1, #32
 800632c:	d1d0      	bne.n	80062d0 <_strtod_l+0x30>
 800632e:	3201      	adds	r2, #1
 8006330:	e7c3      	b.n	80062ba <_strtod_l+0x1a>
 8006332:	292d      	cmp	r1, #45	@ 0x2d
 8006334:	d1cc      	bne.n	80062d0 <_strtod_l+0x30>
 8006336:	2101      	movs	r1, #1
 8006338:	910e      	str	r1, [sp, #56]	@ 0x38
 800633a:	1c51      	adds	r1, r2, #1
 800633c:	9119      	str	r1, [sp, #100]	@ 0x64
 800633e:	7852      	ldrb	r2, [r2, #1]
 8006340:	2a00      	cmp	r2, #0
 8006342:	d1c7      	bne.n	80062d4 <_strtod_l+0x34>
 8006344:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006346:	9419      	str	r4, [sp, #100]	@ 0x64
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 8566 	bne.w	8006e1a <_strtod_l+0xb7a>
 800634e:	4650      	mov	r0, sl
 8006350:	4659      	mov	r1, fp
 8006352:	e7e7      	b.n	8006324 <_strtod_l+0x84>
 8006354:	2100      	movs	r1, #0
 8006356:	e7ef      	b.n	8006338 <_strtod_l+0x98>
 8006358:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800635a:	b13a      	cbz	r2, 800636c <_strtod_l+0xcc>
 800635c:	2135      	movs	r1, #53	@ 0x35
 800635e:	a81c      	add	r0, sp, #112	@ 0x70
 8006360:	f7ff ff38 	bl	80061d4 <__copybits>
 8006364:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006366:	9805      	ldr	r0, [sp, #20]
 8006368:	f7ff fb18 	bl	800599c <_Bfree>
 800636c:	3e01      	subs	r6, #1
 800636e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006370:	2e04      	cmp	r6, #4
 8006372:	d806      	bhi.n	8006382 <_strtod_l+0xe2>
 8006374:	e8df f006 	tbb	[pc, r6]
 8006378:	201d0314 	.word	0x201d0314
 800637c:	14          	.byte	0x14
 800637d:	00          	.byte	0x00
 800637e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006382:	05e1      	lsls	r1, r4, #23
 8006384:	bf48      	it	mi
 8006386:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800638a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800638e:	0d1b      	lsrs	r3, r3, #20
 8006390:	051b      	lsls	r3, r3, #20
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1bd      	bne.n	8006312 <_strtod_l+0x72>
 8006396:	f7fe fb27 	bl	80049e8 <__errno>
 800639a:	2322      	movs	r3, #34	@ 0x22
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	e7b8      	b.n	8006312 <_strtod_l+0x72>
 80063a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80063a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063ac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063b0:	e7e7      	b.n	8006382 <_strtod_l+0xe2>
 80063b2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006530 <_strtod_l+0x290>
 80063b6:	e7e4      	b.n	8006382 <_strtod_l+0xe2>
 80063b8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80063bc:	f04f 3aff 	mov.w	sl, #4294967295
 80063c0:	e7df      	b.n	8006382 <_strtod_l+0xe2>
 80063c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b30      	cmp	r3, #48	@ 0x30
 80063cc:	d0f9      	beq.n	80063c2 <_strtod_l+0x122>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d09f      	beq.n	8006312 <_strtod_l+0x72>
 80063d2:	2301      	movs	r3, #1
 80063d4:	2700      	movs	r7, #0
 80063d6:	220a      	movs	r2, #10
 80063d8:	46b9      	mov	r9, r7
 80063da:	9308      	str	r3, [sp, #32]
 80063dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063de:	970b      	str	r7, [sp, #44]	@ 0x2c
 80063e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80063e2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80063e4:	7805      	ldrb	r5, [r0, #0]
 80063e6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80063ea:	b2d9      	uxtb	r1, r3
 80063ec:	2909      	cmp	r1, #9
 80063ee:	d928      	bls.n	8006442 <_strtod_l+0x1a2>
 80063f0:	2201      	movs	r2, #1
 80063f2:	4950      	ldr	r1, [pc, #320]	@ (8006534 <_strtod_l+0x294>)
 80063f4:	f000 ffc8 	bl	8007388 <strncmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d032      	beq.n	8006462 <_strtod_l+0x1c2>
 80063fc:	2000      	movs	r0, #0
 80063fe:	462a      	mov	r2, r5
 8006400:	4603      	mov	r3, r0
 8006402:	464d      	mov	r5, r9
 8006404:	900a      	str	r0, [sp, #40]	@ 0x28
 8006406:	2a65      	cmp	r2, #101	@ 0x65
 8006408:	d001      	beq.n	800640e <_strtod_l+0x16e>
 800640a:	2a45      	cmp	r2, #69	@ 0x45
 800640c:	d114      	bne.n	8006438 <_strtod_l+0x198>
 800640e:	b91d      	cbnz	r5, 8006418 <_strtod_l+0x178>
 8006410:	9a08      	ldr	r2, [sp, #32]
 8006412:	4302      	orrs	r2, r0
 8006414:	d096      	beq.n	8006344 <_strtod_l+0xa4>
 8006416:	2500      	movs	r5, #0
 8006418:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800641a:	1c62      	adds	r2, r4, #1
 800641c:	9219      	str	r2, [sp, #100]	@ 0x64
 800641e:	7862      	ldrb	r2, [r4, #1]
 8006420:	2a2b      	cmp	r2, #43	@ 0x2b
 8006422:	d07a      	beq.n	800651a <_strtod_l+0x27a>
 8006424:	2a2d      	cmp	r2, #45	@ 0x2d
 8006426:	d07e      	beq.n	8006526 <_strtod_l+0x286>
 8006428:	f04f 0c00 	mov.w	ip, #0
 800642c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006430:	2909      	cmp	r1, #9
 8006432:	f240 8085 	bls.w	8006540 <_strtod_l+0x2a0>
 8006436:	9419      	str	r4, [sp, #100]	@ 0x64
 8006438:	f04f 0800 	mov.w	r8, #0
 800643c:	e0a5      	b.n	800658a <_strtod_l+0x2ea>
 800643e:	2300      	movs	r3, #0
 8006440:	e7c8      	b.n	80063d4 <_strtod_l+0x134>
 8006442:	f1b9 0f08 	cmp.w	r9, #8
 8006446:	bfd8      	it	le
 8006448:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800644a:	f100 0001 	add.w	r0, r0, #1
 800644e:	bfd6      	itet	le
 8006450:	fb02 3301 	mlale	r3, r2, r1, r3
 8006454:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006458:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800645a:	f109 0901 	add.w	r9, r9, #1
 800645e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006460:	e7bf      	b.n	80063e2 <_strtod_l+0x142>
 8006462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	9219      	str	r2, [sp, #100]	@ 0x64
 8006468:	785a      	ldrb	r2, [r3, #1]
 800646a:	f1b9 0f00 	cmp.w	r9, #0
 800646e:	d03b      	beq.n	80064e8 <_strtod_l+0x248>
 8006470:	464d      	mov	r5, r9
 8006472:	900a      	str	r0, [sp, #40]	@ 0x28
 8006474:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006478:	2b09      	cmp	r3, #9
 800647a:	d912      	bls.n	80064a2 <_strtod_l+0x202>
 800647c:	2301      	movs	r3, #1
 800647e:	e7c2      	b.n	8006406 <_strtod_l+0x166>
 8006480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006482:	3001      	adds	r0, #1
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	9219      	str	r2, [sp, #100]	@ 0x64
 8006488:	785a      	ldrb	r2, [r3, #1]
 800648a:	2a30      	cmp	r2, #48	@ 0x30
 800648c:	d0f8      	beq.n	8006480 <_strtod_l+0x1e0>
 800648e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006492:	2b08      	cmp	r3, #8
 8006494:	f200 84c8 	bhi.w	8006e28 <_strtod_l+0xb88>
 8006498:	900a      	str	r0, [sp, #40]	@ 0x28
 800649a:	2000      	movs	r0, #0
 800649c:	4605      	mov	r5, r0
 800649e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80064a2:	3a30      	subs	r2, #48	@ 0x30
 80064a4:	f100 0301 	add.w	r3, r0, #1
 80064a8:	d018      	beq.n	80064dc <_strtod_l+0x23c>
 80064aa:	462e      	mov	r6, r5
 80064ac:	f04f 0e0a 	mov.w	lr, #10
 80064b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064b2:	4419      	add	r1, r3
 80064b4:	910a      	str	r1, [sp, #40]	@ 0x28
 80064b6:	1c71      	adds	r1, r6, #1
 80064b8:	eba1 0c05 	sub.w	ip, r1, r5
 80064bc:	4563      	cmp	r3, ip
 80064be:	dc15      	bgt.n	80064ec <_strtod_l+0x24c>
 80064c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80064c4:	182b      	adds	r3, r5, r0
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	f105 0501 	add.w	r5, r5, #1
 80064cc:	4405      	add	r5, r0
 80064ce:	dc1a      	bgt.n	8006506 <_strtod_l+0x266>
 80064d0:	230a      	movs	r3, #10
 80064d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064d4:	fb03 2301 	mla	r3, r3, r1, r2
 80064d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064da:	2300      	movs	r3, #0
 80064dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80064de:	4618      	mov	r0, r3
 80064e0:	1c51      	adds	r1, r2, #1
 80064e2:	9119      	str	r1, [sp, #100]	@ 0x64
 80064e4:	7852      	ldrb	r2, [r2, #1]
 80064e6:	e7c5      	b.n	8006474 <_strtod_l+0x1d4>
 80064e8:	4648      	mov	r0, r9
 80064ea:	e7ce      	b.n	800648a <_strtod_l+0x1ea>
 80064ec:	2e08      	cmp	r6, #8
 80064ee:	dc05      	bgt.n	80064fc <_strtod_l+0x25c>
 80064f0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80064f2:	fb0e f606 	mul.w	r6, lr, r6
 80064f6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80064f8:	460e      	mov	r6, r1
 80064fa:	e7dc      	b.n	80064b6 <_strtod_l+0x216>
 80064fc:	2910      	cmp	r1, #16
 80064fe:	bfd8      	it	le
 8006500:	fb0e f707 	mulle.w	r7, lr, r7
 8006504:	e7f8      	b.n	80064f8 <_strtod_l+0x258>
 8006506:	2b0f      	cmp	r3, #15
 8006508:	bfdc      	itt	le
 800650a:	230a      	movle	r3, #10
 800650c:	fb03 2707 	mlale	r7, r3, r7, r2
 8006510:	e7e3      	b.n	80064da <_strtod_l+0x23a>
 8006512:	2300      	movs	r3, #0
 8006514:	930a      	str	r3, [sp, #40]	@ 0x28
 8006516:	2301      	movs	r3, #1
 8006518:	e77a      	b.n	8006410 <_strtod_l+0x170>
 800651a:	f04f 0c00 	mov.w	ip, #0
 800651e:	1ca2      	adds	r2, r4, #2
 8006520:	9219      	str	r2, [sp, #100]	@ 0x64
 8006522:	78a2      	ldrb	r2, [r4, #2]
 8006524:	e782      	b.n	800642c <_strtod_l+0x18c>
 8006526:	f04f 0c01 	mov.w	ip, #1
 800652a:	e7f8      	b.n	800651e <_strtod_l+0x27e>
 800652c:	0800843c 	.word	0x0800843c
 8006530:	7ff00000 	.word	0x7ff00000
 8006534:	08008275 	.word	0x08008275
 8006538:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800653a:	1c51      	adds	r1, r2, #1
 800653c:	9119      	str	r1, [sp, #100]	@ 0x64
 800653e:	7852      	ldrb	r2, [r2, #1]
 8006540:	2a30      	cmp	r2, #48	@ 0x30
 8006542:	d0f9      	beq.n	8006538 <_strtod_l+0x298>
 8006544:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006548:	2908      	cmp	r1, #8
 800654a:	f63f af75 	bhi.w	8006438 <_strtod_l+0x198>
 800654e:	f04f 080a 	mov.w	r8, #10
 8006552:	3a30      	subs	r2, #48	@ 0x30
 8006554:	9209      	str	r2, [sp, #36]	@ 0x24
 8006556:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006558:	920f      	str	r2, [sp, #60]	@ 0x3c
 800655a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800655c:	1c56      	adds	r6, r2, #1
 800655e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006560:	7852      	ldrb	r2, [r2, #1]
 8006562:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006566:	f1be 0f09 	cmp.w	lr, #9
 800656a:	d939      	bls.n	80065e0 <_strtod_l+0x340>
 800656c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800656e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006572:	1a76      	subs	r6, r6, r1
 8006574:	2e08      	cmp	r6, #8
 8006576:	dc03      	bgt.n	8006580 <_strtod_l+0x2e0>
 8006578:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800657a:	4588      	cmp	r8, r1
 800657c:	bfa8      	it	ge
 800657e:	4688      	movge	r8, r1
 8006580:	f1bc 0f00 	cmp.w	ip, #0
 8006584:	d001      	beq.n	800658a <_strtod_l+0x2ea>
 8006586:	f1c8 0800 	rsb	r8, r8, #0
 800658a:	2d00      	cmp	r5, #0
 800658c:	d14e      	bne.n	800662c <_strtod_l+0x38c>
 800658e:	9908      	ldr	r1, [sp, #32]
 8006590:	4308      	orrs	r0, r1
 8006592:	f47f aebe 	bne.w	8006312 <_strtod_l+0x72>
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f aed4 	bne.w	8006344 <_strtod_l+0xa4>
 800659c:	2a69      	cmp	r2, #105	@ 0x69
 800659e:	d028      	beq.n	80065f2 <_strtod_l+0x352>
 80065a0:	dc25      	bgt.n	80065ee <_strtod_l+0x34e>
 80065a2:	2a49      	cmp	r2, #73	@ 0x49
 80065a4:	d025      	beq.n	80065f2 <_strtod_l+0x352>
 80065a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80065a8:	f47f aecc 	bne.w	8006344 <_strtod_l+0xa4>
 80065ac:	4999      	ldr	r1, [pc, #612]	@ (8006814 <_strtod_l+0x574>)
 80065ae:	a819      	add	r0, sp, #100	@ 0x64
 80065b0:	f001 f9dc 	bl	800796c <__match>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f43f aec5 	beq.w	8006344 <_strtod_l+0xa4>
 80065ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b28      	cmp	r3, #40	@ 0x28
 80065c0:	d12e      	bne.n	8006620 <_strtod_l+0x380>
 80065c2:	4995      	ldr	r1, [pc, #596]	@ (8006818 <_strtod_l+0x578>)
 80065c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80065c6:	a819      	add	r0, sp, #100	@ 0x64
 80065c8:	f001 f9e4 	bl	8007994 <__hexnan>
 80065cc:	2805      	cmp	r0, #5
 80065ce:	d127      	bne.n	8006620 <_strtod_l+0x380>
 80065d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80065d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80065d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80065da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80065de:	e698      	b.n	8006312 <_strtod_l+0x72>
 80065e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065e2:	fb08 2101 	mla	r1, r8, r1, r2
 80065e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80065ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ec:	e7b5      	b.n	800655a <_strtod_l+0x2ba>
 80065ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80065f0:	e7da      	b.n	80065a8 <_strtod_l+0x308>
 80065f2:	498a      	ldr	r1, [pc, #552]	@ (800681c <_strtod_l+0x57c>)
 80065f4:	a819      	add	r0, sp, #100	@ 0x64
 80065f6:	f001 f9b9 	bl	800796c <__match>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f43f aea2 	beq.w	8006344 <_strtod_l+0xa4>
 8006600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006602:	4987      	ldr	r1, [pc, #540]	@ (8006820 <_strtod_l+0x580>)
 8006604:	3b01      	subs	r3, #1
 8006606:	a819      	add	r0, sp, #100	@ 0x64
 8006608:	9319      	str	r3, [sp, #100]	@ 0x64
 800660a:	f001 f9af 	bl	800796c <__match>
 800660e:	b910      	cbnz	r0, 8006616 <_strtod_l+0x376>
 8006610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006612:	3301      	adds	r3, #1
 8006614:	9319      	str	r3, [sp, #100]	@ 0x64
 8006616:	f04f 0a00 	mov.w	sl, #0
 800661a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006824 <_strtod_l+0x584>
 800661e:	e678      	b.n	8006312 <_strtod_l+0x72>
 8006620:	4881      	ldr	r0, [pc, #516]	@ (8006828 <_strtod_l+0x588>)
 8006622:	f000 fee1 	bl	80073e8 <nan>
 8006626:	4682      	mov	sl, r0
 8006628:	468b      	mov	fp, r1
 800662a:	e672      	b.n	8006312 <_strtod_l+0x72>
 800662c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800662e:	f1b9 0f00 	cmp.w	r9, #0
 8006632:	bf08      	it	eq
 8006634:	46a9      	moveq	r9, r5
 8006636:	eba8 0303 	sub.w	r3, r8, r3
 800663a:	2d10      	cmp	r5, #16
 800663c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800663e:	462c      	mov	r4, r5
 8006640:	9309      	str	r3, [sp, #36]	@ 0x24
 8006642:	bfa8      	it	ge
 8006644:	2410      	movge	r4, #16
 8006646:	f7f9 fecd 	bl	80003e4 <__aeabi_ui2d>
 800664a:	2d09      	cmp	r5, #9
 800664c:	4682      	mov	sl, r0
 800664e:	468b      	mov	fp, r1
 8006650:	dc11      	bgt.n	8006676 <_strtod_l+0x3d6>
 8006652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	f43f ae5c 	beq.w	8006312 <_strtod_l+0x72>
 800665a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800665c:	dd76      	ble.n	800674c <_strtod_l+0x4ac>
 800665e:	2b16      	cmp	r3, #22
 8006660:	dc5d      	bgt.n	800671e <_strtod_l+0x47e>
 8006662:	4972      	ldr	r1, [pc, #456]	@ (800682c <_strtod_l+0x58c>)
 8006664:	4652      	mov	r2, sl
 8006666:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800666a:	465b      	mov	r3, fp
 800666c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006670:	f7f9 ff32 	bl	80004d8 <__aeabi_dmul>
 8006674:	e7d7      	b.n	8006626 <_strtod_l+0x386>
 8006676:	4b6d      	ldr	r3, [pc, #436]	@ (800682c <_strtod_l+0x58c>)
 8006678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800667c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	4682      	mov	sl, r0
 8006686:	4638      	mov	r0, r7
 8006688:	468b      	mov	fp, r1
 800668a:	f7f9 feab 	bl	80003e4 <__aeabi_ui2d>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4650      	mov	r0, sl
 8006694:	4659      	mov	r1, fp
 8006696:	f7f9 fd69 	bl	800016c <__adddf3>
 800669a:	2d0f      	cmp	r5, #15
 800669c:	4682      	mov	sl, r0
 800669e:	468b      	mov	fp, r1
 80066a0:	ddd7      	ble.n	8006652 <_strtod_l+0x3b2>
 80066a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a4:	1b2c      	subs	r4, r5, r4
 80066a6:	441c      	add	r4, r3
 80066a8:	2c00      	cmp	r4, #0
 80066aa:	f340 8093 	ble.w	80067d4 <_strtod_l+0x534>
 80066ae:	f014 030f 	ands.w	r3, r4, #15
 80066b2:	d00a      	beq.n	80066ca <_strtod_l+0x42a>
 80066b4:	495d      	ldr	r1, [pc, #372]	@ (800682c <_strtod_l+0x58c>)
 80066b6:	4652      	mov	r2, sl
 80066b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c0:	465b      	mov	r3, fp
 80066c2:	f7f9 ff09 	bl	80004d8 <__aeabi_dmul>
 80066c6:	4682      	mov	sl, r0
 80066c8:	468b      	mov	fp, r1
 80066ca:	f034 040f 	bics.w	r4, r4, #15
 80066ce:	d073      	beq.n	80067b8 <_strtod_l+0x518>
 80066d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80066d4:	dd49      	ble.n	800676a <_strtod_l+0x4ca>
 80066d6:	2400      	movs	r4, #0
 80066d8:	46a0      	mov	r8, r4
 80066da:	46a1      	mov	r9, r4
 80066dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066de:	2322      	movs	r3, #34	@ 0x22
 80066e0:	f04f 0a00 	mov.w	sl, #0
 80066e4:	9a05      	ldr	r2, [sp, #20]
 80066e6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006824 <_strtod_l+0x584>
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f43f ae0f 	beq.w	8006312 <_strtod_l+0x72>
 80066f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066f6:	9805      	ldr	r0, [sp, #20]
 80066f8:	f7ff f950 	bl	800599c <_Bfree>
 80066fc:	4649      	mov	r1, r9
 80066fe:	9805      	ldr	r0, [sp, #20]
 8006700:	f7ff f94c 	bl	800599c <_Bfree>
 8006704:	4641      	mov	r1, r8
 8006706:	9805      	ldr	r0, [sp, #20]
 8006708:	f7ff f948 	bl	800599c <_Bfree>
 800670c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800670e:	9805      	ldr	r0, [sp, #20]
 8006710:	f7ff f944 	bl	800599c <_Bfree>
 8006714:	4621      	mov	r1, r4
 8006716:	9805      	ldr	r0, [sp, #20]
 8006718:	f7ff f940 	bl	800599c <_Bfree>
 800671c:	e5f9      	b.n	8006312 <_strtod_l+0x72>
 800671e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006720:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006724:	4293      	cmp	r3, r2
 8006726:	dbbc      	blt.n	80066a2 <_strtod_l+0x402>
 8006728:	4c40      	ldr	r4, [pc, #256]	@ (800682c <_strtod_l+0x58c>)
 800672a:	f1c5 050f 	rsb	r5, r5, #15
 800672e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006732:	4652      	mov	r2, sl
 8006734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006738:	465b      	mov	r3, fp
 800673a:	f7f9 fecd 	bl	80004d8 <__aeabi_dmul>
 800673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006740:	1b5d      	subs	r5, r3, r5
 8006742:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006746:	e9d4 2300 	ldrd	r2, r3, [r4]
 800674a:	e791      	b.n	8006670 <_strtod_l+0x3d0>
 800674c:	3316      	adds	r3, #22
 800674e:	dba8      	blt.n	80066a2 <_strtod_l+0x402>
 8006750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006752:	4650      	mov	r0, sl
 8006754:	eba3 0808 	sub.w	r8, r3, r8
 8006758:	4b34      	ldr	r3, [pc, #208]	@ (800682c <_strtod_l+0x58c>)
 800675a:	4659      	mov	r1, fp
 800675c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006760:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006764:	f7f9 ffe2 	bl	800072c <__aeabi_ddiv>
 8006768:	e75d      	b.n	8006626 <_strtod_l+0x386>
 800676a:	2300      	movs	r3, #0
 800676c:	4650      	mov	r0, sl
 800676e:	4659      	mov	r1, fp
 8006770:	461e      	mov	r6, r3
 8006772:	4f2f      	ldr	r7, [pc, #188]	@ (8006830 <_strtod_l+0x590>)
 8006774:	1124      	asrs	r4, r4, #4
 8006776:	2c01      	cmp	r4, #1
 8006778:	dc21      	bgt.n	80067be <_strtod_l+0x51e>
 800677a:	b10b      	cbz	r3, 8006780 <_strtod_l+0x4e0>
 800677c:	4682      	mov	sl, r0
 800677e:	468b      	mov	fp, r1
 8006780:	492b      	ldr	r1, [pc, #172]	@ (8006830 <_strtod_l+0x590>)
 8006782:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006786:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800678a:	4652      	mov	r2, sl
 800678c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006790:	465b      	mov	r3, fp
 8006792:	f7f9 fea1 	bl	80004d8 <__aeabi_dmul>
 8006796:	4b23      	ldr	r3, [pc, #140]	@ (8006824 <_strtod_l+0x584>)
 8006798:	460a      	mov	r2, r1
 800679a:	400b      	ands	r3, r1
 800679c:	4925      	ldr	r1, [pc, #148]	@ (8006834 <_strtod_l+0x594>)
 800679e:	4682      	mov	sl, r0
 80067a0:	428b      	cmp	r3, r1
 80067a2:	d898      	bhi.n	80066d6 <_strtod_l+0x436>
 80067a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80067a8:	428b      	cmp	r3, r1
 80067aa:	bf86      	itte	hi
 80067ac:	f04f 3aff 	movhi.w	sl, #4294967295
 80067b0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006838 <_strtod_l+0x598>
 80067b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80067b8:	2300      	movs	r3, #0
 80067ba:	9308      	str	r3, [sp, #32]
 80067bc:	e076      	b.n	80068ac <_strtod_l+0x60c>
 80067be:	07e2      	lsls	r2, r4, #31
 80067c0:	d504      	bpl.n	80067cc <_strtod_l+0x52c>
 80067c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c6:	f7f9 fe87 	bl	80004d8 <__aeabi_dmul>
 80067ca:	2301      	movs	r3, #1
 80067cc:	3601      	adds	r6, #1
 80067ce:	1064      	asrs	r4, r4, #1
 80067d0:	3708      	adds	r7, #8
 80067d2:	e7d0      	b.n	8006776 <_strtod_l+0x4d6>
 80067d4:	d0f0      	beq.n	80067b8 <_strtod_l+0x518>
 80067d6:	4264      	negs	r4, r4
 80067d8:	f014 020f 	ands.w	r2, r4, #15
 80067dc:	d00a      	beq.n	80067f4 <_strtod_l+0x554>
 80067de:	4b13      	ldr	r3, [pc, #76]	@ (800682c <_strtod_l+0x58c>)
 80067e0:	4650      	mov	r0, sl
 80067e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e6:	4659      	mov	r1, fp
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 ff9e 	bl	800072c <__aeabi_ddiv>
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	1124      	asrs	r4, r4, #4
 80067f6:	d0df      	beq.n	80067b8 <_strtod_l+0x518>
 80067f8:	2c1f      	cmp	r4, #31
 80067fa:	dd1f      	ble.n	800683c <_strtod_l+0x59c>
 80067fc:	2400      	movs	r4, #0
 80067fe:	46a0      	mov	r8, r4
 8006800:	46a1      	mov	r9, r4
 8006802:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006804:	2322      	movs	r3, #34	@ 0x22
 8006806:	9a05      	ldr	r2, [sp, #20]
 8006808:	f04f 0a00 	mov.w	sl, #0
 800680c:	f04f 0b00 	mov.w	fp, #0
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e76b      	b.n	80066ec <_strtod_l+0x44c>
 8006814:	08008163 	.word	0x08008163
 8006818:	08008428 	.word	0x08008428
 800681c:	0800815b 	.word	0x0800815b
 8006820:	08008192 	.word	0x08008192
 8006824:	7ff00000 	.word	0x7ff00000
 8006828:	080082cb 	.word	0x080082cb
 800682c:	08008360 	.word	0x08008360
 8006830:	08008338 	.word	0x08008338
 8006834:	7ca00000 	.word	0x7ca00000
 8006838:	7fefffff 	.word	0x7fefffff
 800683c:	f014 0310 	ands.w	r3, r4, #16
 8006840:	bf18      	it	ne
 8006842:	236a      	movne	r3, #106	@ 0x6a
 8006844:	4650      	mov	r0, sl
 8006846:	9308      	str	r3, [sp, #32]
 8006848:	4659      	mov	r1, fp
 800684a:	2300      	movs	r3, #0
 800684c:	4e77      	ldr	r6, [pc, #476]	@ (8006a2c <_strtod_l+0x78c>)
 800684e:	07e7      	lsls	r7, r4, #31
 8006850:	d504      	bpl.n	800685c <_strtod_l+0x5bc>
 8006852:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006856:	f7f9 fe3f 	bl	80004d8 <__aeabi_dmul>
 800685a:	2301      	movs	r3, #1
 800685c:	1064      	asrs	r4, r4, #1
 800685e:	f106 0608 	add.w	r6, r6, #8
 8006862:	d1f4      	bne.n	800684e <_strtod_l+0x5ae>
 8006864:	b10b      	cbz	r3, 800686a <_strtod_l+0x5ca>
 8006866:	4682      	mov	sl, r0
 8006868:	468b      	mov	fp, r1
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	b1b3      	cbz	r3, 800689c <_strtod_l+0x5fc>
 800686e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006872:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006876:	2b00      	cmp	r3, #0
 8006878:	4659      	mov	r1, fp
 800687a:	dd0f      	ble.n	800689c <_strtod_l+0x5fc>
 800687c:	2b1f      	cmp	r3, #31
 800687e:	dd58      	ble.n	8006932 <_strtod_l+0x692>
 8006880:	2b34      	cmp	r3, #52	@ 0x34
 8006882:	bfd8      	it	le
 8006884:	f04f 33ff 	movle.w	r3, #4294967295
 8006888:	f04f 0a00 	mov.w	sl, #0
 800688c:	bfcf      	iteee	gt
 800688e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006892:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006896:	4093      	lslle	r3, r2
 8006898:	ea03 0b01 	andle.w	fp, r3, r1
 800689c:	2200      	movs	r2, #0
 800689e:	2300      	movs	r3, #0
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	f7fa f880 	bl	80009a8 <__aeabi_dcmpeq>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d1a7      	bne.n	80067fc <_strtod_l+0x55c>
 80068ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068ae:	464a      	mov	r2, r9
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80068b4:	462b      	mov	r3, r5
 80068b6:	9805      	ldr	r0, [sp, #20]
 80068b8:	f7ff f8d8 	bl	8005a6c <__s2b>
 80068bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80068be:	2800      	cmp	r0, #0
 80068c0:	f43f af09 	beq.w	80066d6 <_strtod_l+0x436>
 80068c4:	2400      	movs	r4, #0
 80068c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	eba3 0308 	sub.w	r3, r3, r8
 80068d0:	bfa8      	it	ge
 80068d2:	2300      	movge	r3, #0
 80068d4:	46a0      	mov	r8, r4
 80068d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80068d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80068dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80068de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068e0:	9805      	ldr	r0, [sp, #20]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	f7ff f81a 	bl	800591c <_Balloc>
 80068e8:	4681      	mov	r9, r0
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f43f aef7 	beq.w	80066de <_strtod_l+0x43e>
 80068f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f2:	300c      	adds	r0, #12
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	f103 010c 	add.w	r1, r3, #12
 80068fa:	3202      	adds	r2, #2
 80068fc:	0092      	lsls	r2, r2, #2
 80068fe:	f000 fd65 	bl	80073cc <memcpy>
 8006902:	ab1c      	add	r3, sp, #112	@ 0x70
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4652      	mov	r2, sl
 800690c:	465b      	mov	r3, fp
 800690e:	9805      	ldr	r0, [sp, #20]
 8006910:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006914:	f7ff fbd6 	bl	80060c4 <__d2b>
 8006918:	901a      	str	r0, [sp, #104]	@ 0x68
 800691a:	2800      	cmp	r0, #0
 800691c:	f43f aedf 	beq.w	80066de <_strtod_l+0x43e>
 8006920:	2101      	movs	r1, #1
 8006922:	9805      	ldr	r0, [sp, #20]
 8006924:	f7ff f938 	bl	8005b98 <__i2b>
 8006928:	4680      	mov	r8, r0
 800692a:	b948      	cbnz	r0, 8006940 <_strtod_l+0x6a0>
 800692c:	f04f 0800 	mov.w	r8, #0
 8006930:	e6d5      	b.n	80066de <_strtod_l+0x43e>
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	ea03 0a0a 	and.w	sl, r3, sl
 800693e:	e7ad      	b.n	800689c <_strtod_l+0x5fc>
 8006940:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006942:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006944:	2d00      	cmp	r5, #0
 8006946:	bfab      	itete	ge
 8006948:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800694a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800694c:	18ef      	addge	r7, r5, r3
 800694e:	1b5e      	sublt	r6, r3, r5
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	bfa8      	it	ge
 8006954:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006956:	eba5 0503 	sub.w	r5, r5, r3
 800695a:	4415      	add	r5, r2
 800695c:	4b34      	ldr	r3, [pc, #208]	@ (8006a30 <_strtod_l+0x790>)
 800695e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006962:	bfb8      	it	lt
 8006964:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006966:	429d      	cmp	r5, r3
 8006968:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800696c:	da50      	bge.n	8006a10 <_strtod_l+0x770>
 800696e:	1b5b      	subs	r3, r3, r5
 8006970:	2b1f      	cmp	r3, #31
 8006972:	f04f 0101 	mov.w	r1, #1
 8006976:	eba2 0203 	sub.w	r2, r2, r3
 800697a:	dc3d      	bgt.n	80069f8 <_strtod_l+0x758>
 800697c:	fa01 f303 	lsl.w	r3, r1, r3
 8006980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006982:	2300      	movs	r3, #0
 8006984:	9310      	str	r3, [sp, #64]	@ 0x40
 8006986:	18bd      	adds	r5, r7, r2
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	42af      	cmp	r7, r5
 800698c:	4416      	add	r6, r2
 800698e:	441e      	add	r6, r3
 8006990:	463b      	mov	r3, r7
 8006992:	bfa8      	it	ge
 8006994:	462b      	movge	r3, r5
 8006996:	42b3      	cmp	r3, r6
 8006998:	bfa8      	it	ge
 800699a:	4633      	movge	r3, r6
 800699c:	2b00      	cmp	r3, #0
 800699e:	bfc2      	ittt	gt
 80069a0:	1aed      	subgt	r5, r5, r3
 80069a2:	1af6      	subgt	r6, r6, r3
 80069a4:	1aff      	subgt	r7, r7, r3
 80069a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dd16      	ble.n	80069da <_strtod_l+0x73a>
 80069ac:	4641      	mov	r1, r8
 80069ae:	461a      	mov	r2, r3
 80069b0:	9805      	ldr	r0, [sp, #20]
 80069b2:	f7ff f9a9 	bl	8005d08 <__pow5mult>
 80069b6:	4680      	mov	r8, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d0b7      	beq.n	800692c <_strtod_l+0x68c>
 80069bc:	4601      	mov	r1, r0
 80069be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069c0:	9805      	ldr	r0, [sp, #20]
 80069c2:	f7ff f8ff 	bl	8005bc4 <__multiply>
 80069c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f43f ae88 	beq.w	80066de <_strtod_l+0x43e>
 80069ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069d0:	9805      	ldr	r0, [sp, #20]
 80069d2:	f7fe ffe3 	bl	800599c <_Bfree>
 80069d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80069da:	2d00      	cmp	r5, #0
 80069dc:	dc1d      	bgt.n	8006a1a <_strtod_l+0x77a>
 80069de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd27      	ble.n	8006a34 <_strtod_l+0x794>
 80069e4:	4649      	mov	r1, r9
 80069e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80069e8:	9805      	ldr	r0, [sp, #20]
 80069ea:	f7ff f98d 	bl	8005d08 <__pow5mult>
 80069ee:	4681      	mov	r9, r0
 80069f0:	bb00      	cbnz	r0, 8006a34 <_strtod_l+0x794>
 80069f2:	f04f 0900 	mov.w	r9, #0
 80069f6:	e672      	b.n	80066de <_strtod_l+0x43e>
 80069f8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80069fc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a00:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006a04:	35e2      	adds	r5, #226	@ 0xe2
 8006a06:	fa01 f305 	lsl.w	r3, r1, r5
 8006a0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a0c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a0e:	e7ba      	b.n	8006986 <_strtod_l+0x6e6>
 8006a10:	2300      	movs	r3, #0
 8006a12:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a14:	2301      	movs	r3, #1
 8006a16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a18:	e7b5      	b.n	8006986 <_strtod_l+0x6e6>
 8006a1a:	462a      	mov	r2, r5
 8006a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a1e:	9805      	ldr	r0, [sp, #20]
 8006a20:	f7ff f9cc 	bl	8005dbc <__lshift>
 8006a24:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d1d9      	bne.n	80069de <_strtod_l+0x73e>
 8006a2a:	e658      	b.n	80066de <_strtod_l+0x43e>
 8006a2c:	08008450 	.word	0x08008450
 8006a30:	fffffc02 	.word	0xfffffc02
 8006a34:	2e00      	cmp	r6, #0
 8006a36:	dd07      	ble.n	8006a48 <_strtod_l+0x7a8>
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4632      	mov	r2, r6
 8006a3c:	9805      	ldr	r0, [sp, #20]
 8006a3e:	f7ff f9bd 	bl	8005dbc <__lshift>
 8006a42:	4681      	mov	r9, r0
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d0d4      	beq.n	80069f2 <_strtod_l+0x752>
 8006a48:	2f00      	cmp	r7, #0
 8006a4a:	dd08      	ble.n	8006a5e <_strtod_l+0x7be>
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	463a      	mov	r2, r7
 8006a50:	9805      	ldr	r0, [sp, #20]
 8006a52:	f7ff f9b3 	bl	8005dbc <__lshift>
 8006a56:	4680      	mov	r8, r0
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f43f ae40 	beq.w	80066de <_strtod_l+0x43e>
 8006a5e:	464a      	mov	r2, r9
 8006a60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a62:	9805      	ldr	r0, [sp, #20]
 8006a64:	f7ff fa32 	bl	8005ecc <__mdiff>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	f43f ae37 	beq.w	80066de <_strtod_l+0x43e>
 8006a70:	68c3      	ldr	r3, [r0, #12]
 8006a72:	4641      	mov	r1, r8
 8006a74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a76:	2300      	movs	r3, #0
 8006a78:	60c3      	str	r3, [r0, #12]
 8006a7a:	f7ff fa0b 	bl	8005e94 <__mcmp>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	da3d      	bge.n	8006afe <_strtod_l+0x85e>
 8006a82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a84:	ea53 030a 	orrs.w	r3, r3, sl
 8006a88:	d163      	bne.n	8006b52 <_strtod_l+0x8b2>
 8006a8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d15f      	bne.n	8006b52 <_strtod_l+0x8b2>
 8006a92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a96:	0d1b      	lsrs	r3, r3, #20
 8006a98:	051b      	lsls	r3, r3, #20
 8006a9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006a9e:	d958      	bls.n	8006b52 <_strtod_l+0x8b2>
 8006aa0:	6963      	ldr	r3, [r4, #20]
 8006aa2:	b913      	cbnz	r3, 8006aaa <_strtod_l+0x80a>
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	dd53      	ble.n	8006b52 <_strtod_l+0x8b2>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	2201      	movs	r2, #1
 8006aae:	9805      	ldr	r0, [sp, #20]
 8006ab0:	f7ff f984 	bl	8005dbc <__lshift>
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	f7ff f9ec 	bl	8005e94 <__mcmp>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	dd48      	ble.n	8006b52 <_strtod_l+0x8b2>
 8006ac0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ac4:	9a08      	ldr	r2, [sp, #32]
 8006ac6:	0d1b      	lsrs	r3, r3, #20
 8006ac8:	051b      	lsls	r3, r3, #20
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d062      	beq.n	8006b94 <_strtod_l+0x8f4>
 8006ace:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ad2:	d85f      	bhi.n	8006b94 <_strtod_l+0x8f4>
 8006ad4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ad8:	f67f ae94 	bls.w	8006804 <_strtod_l+0x564>
 8006adc:	4650      	mov	r0, sl
 8006ade:	4659      	mov	r1, fp
 8006ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8006d70 <_strtod_l+0xad0>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f7f9 fcf8 	bl	80004d8 <__aeabi_dmul>
 8006ae8:	4ba2      	ldr	r3, [pc, #648]	@ (8006d74 <_strtod_l+0xad4>)
 8006aea:	4682      	mov	sl, r0
 8006aec:	400b      	ands	r3, r1
 8006aee:	468b      	mov	fp, r1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f adff 	bne.w	80066f4 <_strtod_l+0x454>
 8006af6:	2322      	movs	r3, #34	@ 0x22
 8006af8:	9a05      	ldr	r2, [sp, #20]
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e5fa      	b.n	80066f4 <_strtod_l+0x454>
 8006afe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006b02:	d165      	bne.n	8006bd0 <_strtod_l+0x930>
 8006b04:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b0a:	b35a      	cbz	r2, 8006b64 <_strtod_l+0x8c4>
 8006b0c:	4a9a      	ldr	r2, [pc, #616]	@ (8006d78 <_strtod_l+0xad8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d12b      	bne.n	8006b6a <_strtod_l+0x8ca>
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	4651      	mov	r1, sl
 8006b16:	b303      	cbz	r3, 8006b5a <_strtod_l+0x8ba>
 8006b18:	465a      	mov	r2, fp
 8006b1a:	4b96      	ldr	r3, [pc, #600]	@ (8006d74 <_strtod_l+0xad4>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295
 8006b26:	d81b      	bhi.n	8006b60 <_strtod_l+0x8c0>
 8006b28:	0d1b      	lsrs	r3, r3, #20
 8006b2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	4299      	cmp	r1, r3
 8006b34:	d119      	bne.n	8006b6a <_strtod_l+0x8ca>
 8006b36:	4b91      	ldr	r3, [pc, #580]	@ (8006d7c <_strtod_l+0xadc>)
 8006b38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d102      	bne.n	8006b44 <_strtod_l+0x8a4>
 8006b3e:	3101      	adds	r1, #1
 8006b40:	f43f adcd 	beq.w	80066de <_strtod_l+0x43e>
 8006b44:	f04f 0a00 	mov.w	sl, #0
 8006b48:	4b8a      	ldr	r3, [pc, #552]	@ (8006d74 <_strtod_l+0xad4>)
 8006b4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b4c:	401a      	ands	r2, r3
 8006b4e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006b52:	9b08      	ldr	r3, [sp, #32]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1c1      	bne.n	8006adc <_strtod_l+0x83c>
 8006b58:	e5cc      	b.n	80066f4 <_strtod_l+0x454>
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5e:	e7e8      	b.n	8006b32 <_strtod_l+0x892>
 8006b60:	4613      	mov	r3, r2
 8006b62:	e7e6      	b.n	8006b32 <_strtod_l+0x892>
 8006b64:	ea53 030a 	orrs.w	r3, r3, sl
 8006b68:	d0aa      	beq.n	8006ac0 <_strtod_l+0x820>
 8006b6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b6c:	b1db      	cbz	r3, 8006ba6 <_strtod_l+0x906>
 8006b6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b70:	4213      	tst	r3, r2
 8006b72:	d0ee      	beq.n	8006b52 <_strtod_l+0x8b2>
 8006b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b76:	4650      	mov	r0, sl
 8006b78:	4659      	mov	r1, fp
 8006b7a:	9a08      	ldr	r2, [sp, #32]
 8006b7c:	b1bb      	cbz	r3, 8006bae <_strtod_l+0x90e>
 8006b7e:	f7ff fb6d 	bl	800625c <sulp>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8a:	f7f9 faef 	bl	800016c <__adddf3>
 8006b8e:	4682      	mov	sl, r0
 8006b90:	468b      	mov	fp, r1
 8006b92:	e7de      	b.n	8006b52 <_strtod_l+0x8b2>
 8006b94:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006b98:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8006ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ba4:	e7d5      	b.n	8006b52 <_strtod_l+0x8b2>
 8006ba6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ba8:	ea13 0f0a 	tst.w	r3, sl
 8006bac:	e7e1      	b.n	8006b72 <_strtod_l+0x8d2>
 8006bae:	f7ff fb55 	bl	800625c <sulp>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bba:	f7f9 fad5 	bl	8000168 <__aeabi_dsub>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4682      	mov	sl, r0
 8006bc4:	468b      	mov	fp, r1
 8006bc6:	f7f9 feef 	bl	80009a8 <__aeabi_dcmpeq>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0c1      	beq.n	8006b52 <_strtod_l+0x8b2>
 8006bce:	e619      	b.n	8006804 <_strtod_l+0x564>
 8006bd0:	4641      	mov	r1, r8
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff face 	bl	8006174 <__ratio>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006bde:	4606      	mov	r6, r0
 8006be0:	460f      	mov	r7, r1
 8006be2:	f7f9 fef5 	bl	80009d0 <__aeabi_dcmple>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d06d      	beq.n	8006cc6 <_strtod_l+0xa26>
 8006bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d178      	bne.n	8006ce2 <_strtod_l+0xa42>
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	d156      	bne.n	8006ca4 <_strtod_l+0xa04>
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d158      	bne.n	8006cb2 <_strtod_l+0xa12>
 8006c00:	2200      	movs	r2, #0
 8006c02:	4630      	mov	r0, r6
 8006c04:	4639      	mov	r1, r7
 8006c06:	4b5e      	ldr	r3, [pc, #376]	@ (8006d80 <_strtod_l+0xae0>)
 8006c08:	f7f9 fed8 	bl	80009bc <__aeabi_dcmplt>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d157      	bne.n	8006cc0 <_strtod_l+0xa20>
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	2200      	movs	r2, #0
 8006c16:	4b5b      	ldr	r3, [pc, #364]	@ (8006d84 <_strtod_l+0xae4>)
 8006c18:	f7f9 fc5e 	bl	80004d8 <__aeabi_dmul>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	460f      	mov	r7, r1
 8006c20:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006c24:	9606      	str	r6, [sp, #24]
 8006c26:	9307      	str	r3, [sp, #28]
 8006c28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c2c:	4d51      	ldr	r5, [pc, #324]	@ (8006d74 <_strtod_l+0xad4>)
 8006c2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c34:	401d      	ands	r5, r3
 8006c36:	4b54      	ldr	r3, [pc, #336]	@ (8006d88 <_strtod_l+0xae8>)
 8006c38:	429d      	cmp	r5, r3
 8006c3a:	f040 80ab 	bne.w	8006d94 <_strtod_l+0xaf4>
 8006c3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c40:	4650      	mov	r0, sl
 8006c42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006c46:	4659      	mov	r1, fp
 8006c48:	f7ff f9d4 	bl	8005ff4 <__ulp>
 8006c4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c50:	f7f9 fc42 	bl	80004d8 <__aeabi_dmul>
 8006c54:	4652      	mov	r2, sl
 8006c56:	465b      	mov	r3, fp
 8006c58:	f7f9 fa88 	bl	800016c <__adddf3>
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4945      	ldr	r1, [pc, #276]	@ (8006d74 <_strtod_l+0xad4>)
 8006c60:	4a4a      	ldr	r2, [pc, #296]	@ (8006d8c <_strtod_l+0xaec>)
 8006c62:	4019      	ands	r1, r3
 8006c64:	4291      	cmp	r1, r2
 8006c66:	4682      	mov	sl, r0
 8006c68:	d942      	bls.n	8006cf0 <_strtod_l+0xa50>
 8006c6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c6c:	4b43      	ldr	r3, [pc, #268]	@ (8006d7c <_strtod_l+0xadc>)
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d103      	bne.n	8006c7a <_strtod_l+0x9da>
 8006c72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c74:	3301      	adds	r3, #1
 8006c76:	f43f ad32 	beq.w	80066de <_strtod_l+0x43e>
 8006c7a:	f04f 3aff 	mov.w	sl, #4294967295
 8006c7e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006d7c <_strtod_l+0xadc>
 8006c82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c84:	9805      	ldr	r0, [sp, #20]
 8006c86:	f7fe fe89 	bl	800599c <_Bfree>
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	9805      	ldr	r0, [sp, #20]
 8006c8e:	f7fe fe85 	bl	800599c <_Bfree>
 8006c92:	4641      	mov	r1, r8
 8006c94:	9805      	ldr	r0, [sp, #20]
 8006c96:	f7fe fe81 	bl	800599c <_Bfree>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	9805      	ldr	r0, [sp, #20]
 8006c9e:	f7fe fe7d 	bl	800599c <_Bfree>
 8006ca2:	e61c      	b.n	80068de <_strtod_l+0x63e>
 8006ca4:	f1ba 0f01 	cmp.w	sl, #1
 8006ca8:	d103      	bne.n	8006cb2 <_strtod_l+0xa12>
 8006caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f43f ada9 	beq.w	8006804 <_strtod_l+0x564>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4b36      	ldr	r3, [pc, #216]	@ (8006d90 <_strtod_l+0xaf0>)
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cbc:	4f30      	ldr	r7, [pc, #192]	@ (8006d80 <_strtod_l+0xae0>)
 8006cbe:	e7b3      	b.n	8006c28 <_strtod_l+0x988>
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	4f30      	ldr	r7, [pc, #192]	@ (8006d84 <_strtod_l+0xae4>)
 8006cc4:	e7ac      	b.n	8006c20 <_strtod_l+0x980>
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4b2e      	ldr	r3, [pc, #184]	@ (8006d84 <_strtod_l+0xae4>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0a1      	beq.n	8006c20 <_strtod_l+0x980>
 8006cdc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006ce0:	e7a2      	b.n	8006c28 <_strtod_l+0x988>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b26      	ldr	r3, [pc, #152]	@ (8006d80 <_strtod_l+0xae0>)
 8006ce6:	4616      	mov	r6, r2
 8006ce8:	461f      	mov	r7, r3
 8006cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cee:	e79b      	b.n	8006c28 <_strtod_l+0x988>
 8006cf0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006cf4:	9b08      	ldr	r3, [sp, #32]
 8006cf6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1c1      	bne.n	8006c82 <_strtod_l+0x9e2>
 8006cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d02:	0d1b      	lsrs	r3, r3, #20
 8006d04:	051b      	lsls	r3, r3, #20
 8006d06:	429d      	cmp	r5, r3
 8006d08:	d1bb      	bne.n	8006c82 <_strtod_l+0x9e2>
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7fa f989 	bl	8001024 <__aeabi_d2lz>
 8006d12:	f7f9 fbb3 	bl	800047c <__aeabi_l2d>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	f7f9 fa23 	bl	8000168 <__aeabi_dsub>
 8006d22:	460b      	mov	r3, r1
 8006d24:	4602      	mov	r2, r0
 8006d26:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006d2a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d30:	ea46 060a 	orr.w	r6, r6, sl
 8006d34:	431e      	orrs	r6, r3
 8006d36:	d06a      	beq.n	8006e0e <_strtod_l+0xb6e>
 8006d38:	a309      	add	r3, pc, #36	@ (adr r3, 8006d60 <_strtod_l+0xac0>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f47f acd6 	bne.w	80066f4 <_strtod_l+0x454>
 8006d48:	a307      	add	r3, pc, #28	@ (adr r3, 8006d68 <_strtod_l+0xac8>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d52:	f7f9 fe51 	bl	80009f8 <__aeabi_dcmpgt>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d093      	beq.n	8006c82 <_strtod_l+0x9e2>
 8006d5a:	e4cb      	b.n	80066f4 <_strtod_l+0x454>
 8006d5c:	f3af 8000 	nop.w
 8006d60:	94a03595 	.word	0x94a03595
 8006d64:	3fdfffff 	.word	0x3fdfffff
 8006d68:	35afe535 	.word	0x35afe535
 8006d6c:	3fe00000 	.word	0x3fe00000
 8006d70:	39500000 	.word	0x39500000
 8006d74:	7ff00000 	.word	0x7ff00000
 8006d78:	000fffff 	.word	0x000fffff
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	3ff00000 	.word	0x3ff00000
 8006d84:	3fe00000 	.word	0x3fe00000
 8006d88:	7fe00000 	.word	0x7fe00000
 8006d8c:	7c9fffff 	.word	0x7c9fffff
 8006d90:	bff00000 	.word	0xbff00000
 8006d94:	9b08      	ldr	r3, [sp, #32]
 8006d96:	b323      	cbz	r3, 8006de2 <_strtod_l+0xb42>
 8006d98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006d9c:	d821      	bhi.n	8006de2 <_strtod_l+0xb42>
 8006d9e:	a328      	add	r3, pc, #160	@ (adr r3, 8006e40 <_strtod_l+0xba0>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fe12 	bl	80009d0 <__aeabi_dcmple>
 8006dac:	b1a0      	cbz	r0, 8006dd8 <_strtod_l+0xb38>
 8006dae:	4639      	mov	r1, r7
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7f9 fe69 	bl	8000a88 <__aeabi_d2uiz>
 8006db6:	2801      	cmp	r0, #1
 8006db8:	bf38      	it	cc
 8006dba:	2001      	movcc	r0, #1
 8006dbc:	f7f9 fb12 	bl	80003e4 <__aeabi_ui2d>
 8006dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	b9fb      	cbnz	r3, 8006e08 <_strtod_l+0xb68>
 8006dc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006dcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8006dce:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006dd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006dd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006dda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006dde:	1b5b      	subs	r3, r3, r5
 8006de0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006de2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006de6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006dea:	f7ff f903 	bl	8005ff4 <__ulp>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4650      	mov	r0, sl
 8006df4:	4659      	mov	r1, fp
 8006df6:	f7f9 fb6f 	bl	80004d8 <__aeabi_dmul>
 8006dfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006dfe:	f7f9 f9b5 	bl	800016c <__adddf3>
 8006e02:	4682      	mov	sl, r0
 8006e04:	468b      	mov	fp, r1
 8006e06:	e775      	b.n	8006cf4 <_strtod_l+0xa54>
 8006e08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006e0c:	e7e0      	b.n	8006dd0 <_strtod_l+0xb30>
 8006e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006e48 <_strtod_l+0xba8>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 fdd2 	bl	80009bc <__aeabi_dcmplt>
 8006e18:	e79d      	b.n	8006d56 <_strtod_l+0xab6>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e20:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	f7ff ba79 	b.w	800631a <_strtod_l+0x7a>
 8006e28:	2a65      	cmp	r2, #101	@ 0x65
 8006e2a:	f43f ab72 	beq.w	8006512 <_strtod_l+0x272>
 8006e2e:	2a45      	cmp	r2, #69	@ 0x45
 8006e30:	f43f ab6f 	beq.w	8006512 <_strtod_l+0x272>
 8006e34:	2301      	movs	r3, #1
 8006e36:	f7ff bbaa 	b.w	800658e <_strtod_l+0x2ee>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
 8006e40:	ffc00000 	.word	0xffc00000
 8006e44:	41dfffff 	.word	0x41dfffff
 8006e48:	94a03595 	.word	0x94a03595
 8006e4c:	3fcfffff 	.word	0x3fcfffff

08006e50 <_strtod_r>:
 8006e50:	4b01      	ldr	r3, [pc, #4]	@ (8006e58 <_strtod_r+0x8>)
 8006e52:	f7ff ba25 	b.w	80062a0 <_strtod_l>
 8006e56:	bf00      	nop
 8006e58:	20000068 	.word	0x20000068

08006e5c <_strtol_l.isra.0>:
 8006e5c:	2b24      	cmp	r3, #36	@ 0x24
 8006e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e62:	4686      	mov	lr, r0
 8006e64:	4690      	mov	r8, r2
 8006e66:	d801      	bhi.n	8006e6c <_strtol_l.isra.0+0x10>
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d106      	bne.n	8006e7a <_strtol_l.isra.0+0x1e>
 8006e6c:	f7fd fdbc 	bl	80049e8 <__errno>
 8006e70:	2316      	movs	r3, #22
 8006e72:	6003      	str	r3, [r0, #0]
 8006e74:	2000      	movs	r0, #0
 8006e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	4833      	ldr	r0, [pc, #204]	@ (8006f4c <_strtol_l.isra.0+0xf0>)
 8006e7e:	462a      	mov	r2, r5
 8006e80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e84:	5d06      	ldrb	r6, [r0, r4]
 8006e86:	f016 0608 	ands.w	r6, r6, #8
 8006e8a:	d1f8      	bne.n	8006e7e <_strtol_l.isra.0+0x22>
 8006e8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006e8e:	d110      	bne.n	8006eb2 <_strtol_l.isra.0+0x56>
 8006e90:	2601      	movs	r6, #1
 8006e92:	782c      	ldrb	r4, [r5, #0]
 8006e94:	1c95      	adds	r5, r2, #2
 8006e96:	f033 0210 	bics.w	r2, r3, #16
 8006e9a:	d115      	bne.n	8006ec8 <_strtol_l.isra.0+0x6c>
 8006e9c:	2c30      	cmp	r4, #48	@ 0x30
 8006e9e:	d10d      	bne.n	8006ebc <_strtol_l.isra.0+0x60>
 8006ea0:	782a      	ldrb	r2, [r5, #0]
 8006ea2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ea6:	2a58      	cmp	r2, #88	@ 0x58
 8006ea8:	d108      	bne.n	8006ebc <_strtol_l.isra.0+0x60>
 8006eaa:	786c      	ldrb	r4, [r5, #1]
 8006eac:	3502      	adds	r5, #2
 8006eae:	2310      	movs	r3, #16
 8006eb0:	e00a      	b.n	8006ec8 <_strtol_l.isra.0+0x6c>
 8006eb2:	2c2b      	cmp	r4, #43	@ 0x2b
 8006eb4:	bf04      	itt	eq
 8006eb6:	782c      	ldrbeq	r4, [r5, #0]
 8006eb8:	1c95      	addeq	r5, r2, #2
 8006eba:	e7ec      	b.n	8006e96 <_strtol_l.isra.0+0x3a>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f6      	bne.n	8006eae <_strtol_l.isra.0+0x52>
 8006ec0:	2c30      	cmp	r4, #48	@ 0x30
 8006ec2:	bf14      	ite	ne
 8006ec4:	230a      	movne	r3, #10
 8006ec6:	2308      	moveq	r3, #8
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ece:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ed2:	fbbc f9f3 	udiv	r9, ip, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006edc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006ee0:	2f09      	cmp	r7, #9
 8006ee2:	d80f      	bhi.n	8006f04 <_strtol_l.isra.0+0xa8>
 8006ee4:	463c      	mov	r4, r7
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	dd1b      	ble.n	8006f22 <_strtol_l.isra.0+0xc6>
 8006eea:	1c57      	adds	r7, r2, #1
 8006eec:	d007      	beq.n	8006efe <_strtol_l.isra.0+0xa2>
 8006eee:	4581      	cmp	r9, r0
 8006ef0:	d314      	bcc.n	8006f1c <_strtol_l.isra.0+0xc0>
 8006ef2:	d101      	bne.n	8006ef8 <_strtol_l.isra.0+0x9c>
 8006ef4:	45a2      	cmp	sl, r4
 8006ef6:	db11      	blt.n	8006f1c <_strtol_l.isra.0+0xc0>
 8006ef8:	2201      	movs	r2, #1
 8006efa:	fb00 4003 	mla	r0, r0, r3, r4
 8006efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f02:	e7eb      	b.n	8006edc <_strtol_l.isra.0+0x80>
 8006f04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f08:	2f19      	cmp	r7, #25
 8006f0a:	d801      	bhi.n	8006f10 <_strtol_l.isra.0+0xb4>
 8006f0c:	3c37      	subs	r4, #55	@ 0x37
 8006f0e:	e7ea      	b.n	8006ee6 <_strtol_l.isra.0+0x8a>
 8006f10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006f14:	2f19      	cmp	r7, #25
 8006f16:	d804      	bhi.n	8006f22 <_strtol_l.isra.0+0xc6>
 8006f18:	3c57      	subs	r4, #87	@ 0x57
 8006f1a:	e7e4      	b.n	8006ee6 <_strtol_l.isra.0+0x8a>
 8006f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f20:	e7ed      	b.n	8006efe <_strtol_l.isra.0+0xa2>
 8006f22:	1c53      	adds	r3, r2, #1
 8006f24:	d108      	bne.n	8006f38 <_strtol_l.isra.0+0xdc>
 8006f26:	2322      	movs	r3, #34	@ 0x22
 8006f28:	4660      	mov	r0, ip
 8006f2a:	f8ce 3000 	str.w	r3, [lr]
 8006f2e:	f1b8 0f00 	cmp.w	r8, #0
 8006f32:	d0a0      	beq.n	8006e76 <_strtol_l.isra.0+0x1a>
 8006f34:	1e69      	subs	r1, r5, #1
 8006f36:	e006      	b.n	8006f46 <_strtol_l.isra.0+0xea>
 8006f38:	b106      	cbz	r6, 8006f3c <_strtol_l.isra.0+0xe0>
 8006f3a:	4240      	negs	r0, r0
 8006f3c:	f1b8 0f00 	cmp.w	r8, #0
 8006f40:	d099      	beq.n	8006e76 <_strtol_l.isra.0+0x1a>
 8006f42:	2a00      	cmp	r2, #0
 8006f44:	d1f6      	bne.n	8006f34 <_strtol_l.isra.0+0xd8>
 8006f46:	f8c8 1000 	str.w	r1, [r8]
 8006f4a:	e794      	b.n	8006e76 <_strtol_l.isra.0+0x1a>
 8006f4c:	08008479 	.word	0x08008479

08006f50 <_strtol_r>:
 8006f50:	f7ff bf84 	b.w	8006e5c <_strtol_l.isra.0>

08006f54 <__ssputs_r>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	461f      	mov	r7, r3
 8006f5a:	688e      	ldr	r6, [r1, #8]
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	42be      	cmp	r6, r7
 8006f60:	460c      	mov	r4, r1
 8006f62:	4690      	mov	r8, r2
 8006f64:	680b      	ldr	r3, [r1, #0]
 8006f66:	d82d      	bhi.n	8006fc4 <__ssputs_r+0x70>
 8006f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f70:	d026      	beq.n	8006fc0 <__ssputs_r+0x6c>
 8006f72:	6965      	ldr	r5, [r4, #20]
 8006f74:	6909      	ldr	r1, [r1, #16]
 8006f76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f7a:	eba3 0901 	sub.w	r9, r3, r1
 8006f7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f82:	1c7b      	adds	r3, r7, #1
 8006f84:	444b      	add	r3, r9
 8006f86:	106d      	asrs	r5, r5, #1
 8006f88:	429d      	cmp	r5, r3
 8006f8a:	bf38      	it	cc
 8006f8c:	461d      	movcc	r5, r3
 8006f8e:	0553      	lsls	r3, r2, #21
 8006f90:	d527      	bpl.n	8006fe2 <__ssputs_r+0x8e>
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7fe fc36 	bl	8005804 <_malloc_r>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	b360      	cbz	r0, 8006ff6 <__ssputs_r+0xa2>
 8006f9c:	464a      	mov	r2, r9
 8006f9e:	6921      	ldr	r1, [r4, #16]
 8006fa0:	f000 fa14 	bl	80073cc <memcpy>
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	6126      	str	r6, [r4, #16]
 8006fb2:	444e      	add	r6, r9
 8006fb4:	6026      	str	r6, [r4, #0]
 8006fb6:	463e      	mov	r6, r7
 8006fb8:	6165      	str	r5, [r4, #20]
 8006fba:	eba5 0509 	sub.w	r5, r5, r9
 8006fbe:	60a5      	str	r5, [r4, #8]
 8006fc0:	42be      	cmp	r6, r7
 8006fc2:	d900      	bls.n	8006fc6 <__ssputs_r+0x72>
 8006fc4:	463e      	mov	r6, r7
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	4641      	mov	r1, r8
 8006fca:	6820      	ldr	r0, [r4, #0]
 8006fcc:	f000 f9c2 	bl	8007354 <memmove>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	1b9b      	subs	r3, r3, r6
 8006fd6:	60a3      	str	r3, [r4, #8]
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	4433      	add	r3, r6
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	f000 fd83 	bl	8007aee <_realloc_r>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d1e0      	bne.n	8006fb0 <__ssputs_r+0x5c>
 8006fee:	4650      	mov	r0, sl
 8006ff0:	6921      	ldr	r1, [r4, #16]
 8006ff2:	f7fe fb95 	bl	8005720 <_free_r>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	f8ca 3000 	str.w	r3, [sl]
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8007002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	e7e9      	b.n	8006fde <__ssputs_r+0x8a>
	...

0800700c <_svfiprintf_r>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	4698      	mov	r8, r3
 8007012:	898b      	ldrh	r3, [r1, #12]
 8007014:	4607      	mov	r7, r0
 8007016:	061b      	lsls	r3, r3, #24
 8007018:	460d      	mov	r5, r1
 800701a:	4614      	mov	r4, r2
 800701c:	b09d      	sub	sp, #116	@ 0x74
 800701e:	d510      	bpl.n	8007042 <_svfiprintf_r+0x36>
 8007020:	690b      	ldr	r3, [r1, #16]
 8007022:	b973      	cbnz	r3, 8007042 <_svfiprintf_r+0x36>
 8007024:	2140      	movs	r1, #64	@ 0x40
 8007026:	f7fe fbed 	bl	8005804 <_malloc_r>
 800702a:	6028      	str	r0, [r5, #0]
 800702c:	6128      	str	r0, [r5, #16]
 800702e:	b930      	cbnz	r0, 800703e <_svfiprintf_r+0x32>
 8007030:	230c      	movs	r3, #12
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	b01d      	add	sp, #116	@ 0x74
 800703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703e:	2340      	movs	r3, #64	@ 0x40
 8007040:	616b      	str	r3, [r5, #20]
 8007042:	2300      	movs	r3, #0
 8007044:	9309      	str	r3, [sp, #36]	@ 0x24
 8007046:	2320      	movs	r3, #32
 8007048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800704c:	2330      	movs	r3, #48	@ 0x30
 800704e:	f04f 0901 	mov.w	r9, #1
 8007052:	f8cd 800c 	str.w	r8, [sp, #12]
 8007056:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80071f0 <_svfiprintf_r+0x1e4>
 800705a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800705e:	4623      	mov	r3, r4
 8007060:	469a      	mov	sl, r3
 8007062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007066:	b10a      	cbz	r2, 800706c <_svfiprintf_r+0x60>
 8007068:	2a25      	cmp	r2, #37	@ 0x25
 800706a:	d1f9      	bne.n	8007060 <_svfiprintf_r+0x54>
 800706c:	ebba 0b04 	subs.w	fp, sl, r4
 8007070:	d00b      	beq.n	800708a <_svfiprintf_r+0x7e>
 8007072:	465b      	mov	r3, fp
 8007074:	4622      	mov	r2, r4
 8007076:	4629      	mov	r1, r5
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ff6b 	bl	8006f54 <__ssputs_r>
 800707e:	3001      	adds	r0, #1
 8007080:	f000 80a7 	beq.w	80071d2 <_svfiprintf_r+0x1c6>
 8007084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007086:	445a      	add	r2, fp
 8007088:	9209      	str	r2, [sp, #36]	@ 0x24
 800708a:	f89a 3000 	ldrb.w	r3, [sl]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 809f 	beq.w	80071d2 <_svfiprintf_r+0x1c6>
 8007094:	2300      	movs	r3, #0
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800709e:	f10a 0a01 	add.w	sl, sl, #1
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	9307      	str	r3, [sp, #28]
 80070a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80070ac:	4654      	mov	r4, sl
 80070ae:	2205      	movs	r2, #5
 80070b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b4:	484e      	ldr	r0, [pc, #312]	@ (80071f0 <_svfiprintf_r+0x1e4>)
 80070b6:	f7fd fcc4 	bl	8004a42 <memchr>
 80070ba:	9a04      	ldr	r2, [sp, #16]
 80070bc:	b9d8      	cbnz	r0, 80070f6 <_svfiprintf_r+0xea>
 80070be:	06d0      	lsls	r0, r2, #27
 80070c0:	bf44      	itt	mi
 80070c2:	2320      	movmi	r3, #32
 80070c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070c8:	0711      	lsls	r1, r2, #28
 80070ca:	bf44      	itt	mi
 80070cc:	232b      	movmi	r3, #43	@ 0x2b
 80070ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070d2:	f89a 3000 	ldrb.w	r3, [sl]
 80070d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070d8:	d015      	beq.n	8007106 <_svfiprintf_r+0xfa>
 80070da:	4654      	mov	r4, sl
 80070dc:	2000      	movs	r0, #0
 80070de:	f04f 0c0a 	mov.w	ip, #10
 80070e2:	9a07      	ldr	r2, [sp, #28]
 80070e4:	4621      	mov	r1, r4
 80070e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ea:	3b30      	subs	r3, #48	@ 0x30
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	d94b      	bls.n	8007188 <_svfiprintf_r+0x17c>
 80070f0:	b1b0      	cbz	r0, 8007120 <_svfiprintf_r+0x114>
 80070f2:	9207      	str	r2, [sp, #28]
 80070f4:	e014      	b.n	8007120 <_svfiprintf_r+0x114>
 80070f6:	eba0 0308 	sub.w	r3, r0, r8
 80070fa:	fa09 f303 	lsl.w	r3, r9, r3
 80070fe:	4313      	orrs	r3, r2
 8007100:	46a2      	mov	sl, r4
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	e7d2      	b.n	80070ac <_svfiprintf_r+0xa0>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	1d19      	adds	r1, r3, #4
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	9103      	str	r1, [sp, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfbb      	ittet	lt
 8007112:	425b      	neglt	r3, r3
 8007114:	f042 0202 	orrlt.w	r2, r2, #2
 8007118:	9307      	strge	r3, [sp, #28]
 800711a:	9307      	strlt	r3, [sp, #28]
 800711c:	bfb8      	it	lt
 800711e:	9204      	strlt	r2, [sp, #16]
 8007120:	7823      	ldrb	r3, [r4, #0]
 8007122:	2b2e      	cmp	r3, #46	@ 0x2e
 8007124:	d10a      	bne.n	800713c <_svfiprintf_r+0x130>
 8007126:	7863      	ldrb	r3, [r4, #1]
 8007128:	2b2a      	cmp	r3, #42	@ 0x2a
 800712a:	d132      	bne.n	8007192 <_svfiprintf_r+0x186>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	3402      	adds	r4, #2
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9203      	str	r2, [sp, #12]
 8007136:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80071f4 <_svfiprintf_r+0x1e8>
 8007140:	2203      	movs	r2, #3
 8007142:	4650      	mov	r0, sl
 8007144:	7821      	ldrb	r1, [r4, #0]
 8007146:	f7fd fc7c 	bl	8004a42 <memchr>
 800714a:	b138      	cbz	r0, 800715c <_svfiprintf_r+0x150>
 800714c:	2240      	movs	r2, #64	@ 0x40
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	eba0 000a 	sub.w	r0, r0, sl
 8007154:	4082      	lsls	r2, r0
 8007156:	4313      	orrs	r3, r2
 8007158:	3401      	adds	r4, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007160:	2206      	movs	r2, #6
 8007162:	4825      	ldr	r0, [pc, #148]	@ (80071f8 <_svfiprintf_r+0x1ec>)
 8007164:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007168:	f7fd fc6b 	bl	8004a42 <memchr>
 800716c:	2800      	cmp	r0, #0
 800716e:	d036      	beq.n	80071de <_svfiprintf_r+0x1d2>
 8007170:	4b22      	ldr	r3, [pc, #136]	@ (80071fc <_svfiprintf_r+0x1f0>)
 8007172:	bb1b      	cbnz	r3, 80071bc <_svfiprintf_r+0x1b0>
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	3307      	adds	r3, #7
 8007178:	f023 0307 	bic.w	r3, r3, #7
 800717c:	3308      	adds	r3, #8
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007182:	4433      	add	r3, r6
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	e76a      	b.n	800705e <_svfiprintf_r+0x52>
 8007188:	460c      	mov	r4, r1
 800718a:	2001      	movs	r0, #1
 800718c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007190:	e7a8      	b.n	80070e4 <_svfiprintf_r+0xd8>
 8007192:	2300      	movs	r3, #0
 8007194:	f04f 0c0a 	mov.w	ip, #10
 8007198:	4619      	mov	r1, r3
 800719a:	3401      	adds	r4, #1
 800719c:	9305      	str	r3, [sp, #20]
 800719e:	4620      	mov	r0, r4
 80071a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071a4:	3a30      	subs	r2, #48	@ 0x30
 80071a6:	2a09      	cmp	r2, #9
 80071a8:	d903      	bls.n	80071b2 <_svfiprintf_r+0x1a6>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0c6      	beq.n	800713c <_svfiprintf_r+0x130>
 80071ae:	9105      	str	r1, [sp, #20]
 80071b0:	e7c4      	b.n	800713c <_svfiprintf_r+0x130>
 80071b2:	4604      	mov	r4, r0
 80071b4:	2301      	movs	r3, #1
 80071b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ba:	e7f0      	b.n	800719e <_svfiprintf_r+0x192>
 80071bc:	ab03      	add	r3, sp, #12
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	462a      	mov	r2, r5
 80071c2:	4638      	mov	r0, r7
 80071c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007200 <_svfiprintf_r+0x1f4>)
 80071c6:	a904      	add	r1, sp, #16
 80071c8:	f7fc fcce 	bl	8003b68 <_printf_float>
 80071cc:	1c42      	adds	r2, r0, #1
 80071ce:	4606      	mov	r6, r0
 80071d0:	d1d6      	bne.n	8007180 <_svfiprintf_r+0x174>
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	065b      	lsls	r3, r3, #25
 80071d6:	f53f af2d 	bmi.w	8007034 <_svfiprintf_r+0x28>
 80071da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071dc:	e72c      	b.n	8007038 <_svfiprintf_r+0x2c>
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	462a      	mov	r2, r5
 80071e4:	4638      	mov	r0, r7
 80071e6:	4b06      	ldr	r3, [pc, #24]	@ (8007200 <_svfiprintf_r+0x1f4>)
 80071e8:	a904      	add	r1, sp, #16
 80071ea:	f7fc ff5b 	bl	80040a4 <_printf_i>
 80071ee:	e7ed      	b.n	80071cc <_svfiprintf_r+0x1c0>
 80071f0:	08008277 	.word	0x08008277
 80071f4:	0800827d 	.word	0x0800827d
 80071f8:	08008281 	.word	0x08008281
 80071fc:	08003b69 	.word	0x08003b69
 8007200:	08006f55 	.word	0x08006f55

08007204 <__sflush_r>:
 8007204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	0716      	lsls	r6, r2, #28
 800720c:	4605      	mov	r5, r0
 800720e:	460c      	mov	r4, r1
 8007210:	d454      	bmi.n	80072bc <__sflush_r+0xb8>
 8007212:	684b      	ldr	r3, [r1, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	dc02      	bgt.n	800721e <__sflush_r+0x1a>
 8007218:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	dd48      	ble.n	80072b0 <__sflush_r+0xac>
 800721e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007220:	2e00      	cmp	r6, #0
 8007222:	d045      	beq.n	80072b0 <__sflush_r+0xac>
 8007224:	2300      	movs	r3, #0
 8007226:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800722a:	682f      	ldr	r7, [r5, #0]
 800722c:	6a21      	ldr	r1, [r4, #32]
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	d030      	beq.n	8007294 <__sflush_r+0x90>
 8007232:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	0759      	lsls	r1, r3, #29
 8007238:	d505      	bpl.n	8007246 <__sflush_r+0x42>
 800723a:	6863      	ldr	r3, [r4, #4]
 800723c:	1ad2      	subs	r2, r2, r3
 800723e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007240:	b10b      	cbz	r3, 8007246 <__sflush_r+0x42>
 8007242:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	2300      	movs	r3, #0
 8007248:	4628      	mov	r0, r5
 800724a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800724c:	6a21      	ldr	r1, [r4, #32]
 800724e:	47b0      	blx	r6
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	d106      	bne.n	8007264 <__sflush_r+0x60>
 8007256:	6829      	ldr	r1, [r5, #0]
 8007258:	291d      	cmp	r1, #29
 800725a:	d82b      	bhi.n	80072b4 <__sflush_r+0xb0>
 800725c:	4a28      	ldr	r2, [pc, #160]	@ (8007300 <__sflush_r+0xfc>)
 800725e:	40ca      	lsrs	r2, r1
 8007260:	07d6      	lsls	r6, r2, #31
 8007262:	d527      	bpl.n	80072b4 <__sflush_r+0xb0>
 8007264:	2200      	movs	r2, #0
 8007266:	6062      	str	r2, [r4, #4]
 8007268:	6922      	ldr	r2, [r4, #16]
 800726a:	04d9      	lsls	r1, r3, #19
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	d504      	bpl.n	800727a <__sflush_r+0x76>
 8007270:	1c42      	adds	r2, r0, #1
 8007272:	d101      	bne.n	8007278 <__sflush_r+0x74>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b903      	cbnz	r3, 800727a <__sflush_r+0x76>
 8007278:	6560      	str	r0, [r4, #84]	@ 0x54
 800727a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800727c:	602f      	str	r7, [r5, #0]
 800727e:	b1b9      	cbz	r1, 80072b0 <__sflush_r+0xac>
 8007280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <__sflush_r+0x8a>
 8007288:	4628      	mov	r0, r5
 800728a:	f7fe fa49 	bl	8005720 <_free_r>
 800728e:	2300      	movs	r3, #0
 8007290:	6363      	str	r3, [r4, #52]	@ 0x34
 8007292:	e00d      	b.n	80072b0 <__sflush_r+0xac>
 8007294:	2301      	movs	r3, #1
 8007296:	4628      	mov	r0, r5
 8007298:	47b0      	blx	r6
 800729a:	4602      	mov	r2, r0
 800729c:	1c50      	adds	r0, r2, #1
 800729e:	d1c9      	bne.n	8007234 <__sflush_r+0x30>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0c6      	beq.n	8007234 <__sflush_r+0x30>
 80072a6:	2b1d      	cmp	r3, #29
 80072a8:	d001      	beq.n	80072ae <__sflush_r+0xaa>
 80072aa:	2b16      	cmp	r3, #22
 80072ac:	d11d      	bne.n	80072ea <__sflush_r+0xe6>
 80072ae:	602f      	str	r7, [r5, #0]
 80072b0:	2000      	movs	r0, #0
 80072b2:	e021      	b.n	80072f8 <__sflush_r+0xf4>
 80072b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072b8:	b21b      	sxth	r3, r3
 80072ba:	e01a      	b.n	80072f2 <__sflush_r+0xee>
 80072bc:	690f      	ldr	r7, [r1, #16]
 80072be:	2f00      	cmp	r7, #0
 80072c0:	d0f6      	beq.n	80072b0 <__sflush_r+0xac>
 80072c2:	0793      	lsls	r3, r2, #30
 80072c4:	bf18      	it	ne
 80072c6:	2300      	movne	r3, #0
 80072c8:	680e      	ldr	r6, [r1, #0]
 80072ca:	bf08      	it	eq
 80072cc:	694b      	ldreq	r3, [r1, #20]
 80072ce:	1bf6      	subs	r6, r6, r7
 80072d0:	600f      	str	r7, [r1, #0]
 80072d2:	608b      	str	r3, [r1, #8]
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	ddeb      	ble.n	80072b0 <__sflush_r+0xac>
 80072d8:	4633      	mov	r3, r6
 80072da:	463a      	mov	r2, r7
 80072dc:	4628      	mov	r0, r5
 80072de:	6a21      	ldr	r1, [r4, #32]
 80072e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80072e4:	47e0      	blx	ip
 80072e6:	2800      	cmp	r0, #0
 80072e8:	dc07      	bgt.n	80072fa <__sflush_r+0xf6>
 80072ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f2:	f04f 30ff 	mov.w	r0, #4294967295
 80072f6:	81a3      	strh	r3, [r4, #12]
 80072f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072fa:	4407      	add	r7, r0
 80072fc:	1a36      	subs	r6, r6, r0
 80072fe:	e7e9      	b.n	80072d4 <__sflush_r+0xd0>
 8007300:	20400001 	.word	0x20400001

08007304 <_fflush_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	690b      	ldr	r3, [r1, #16]
 8007308:	4605      	mov	r5, r0
 800730a:	460c      	mov	r4, r1
 800730c:	b913      	cbnz	r3, 8007314 <_fflush_r+0x10>
 800730e:	2500      	movs	r5, #0
 8007310:	4628      	mov	r0, r5
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	b118      	cbz	r0, 800731e <_fflush_r+0x1a>
 8007316:	6a03      	ldr	r3, [r0, #32]
 8007318:	b90b      	cbnz	r3, 800731e <_fflush_r+0x1a>
 800731a:	f7fd fa77 	bl	800480c <__sinit>
 800731e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f3      	beq.n	800730e <_fflush_r+0xa>
 8007326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007328:	07d0      	lsls	r0, r2, #31
 800732a:	d404      	bmi.n	8007336 <_fflush_r+0x32>
 800732c:	0599      	lsls	r1, r3, #22
 800732e:	d402      	bmi.n	8007336 <_fflush_r+0x32>
 8007330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007332:	f7fd fb84 	bl	8004a3e <__retarget_lock_acquire_recursive>
 8007336:	4628      	mov	r0, r5
 8007338:	4621      	mov	r1, r4
 800733a:	f7ff ff63 	bl	8007204 <__sflush_r>
 800733e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007340:	4605      	mov	r5, r0
 8007342:	07da      	lsls	r2, r3, #31
 8007344:	d4e4      	bmi.n	8007310 <_fflush_r+0xc>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	059b      	lsls	r3, r3, #22
 800734a:	d4e1      	bmi.n	8007310 <_fflush_r+0xc>
 800734c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800734e:	f7fd fb77 	bl	8004a40 <__retarget_lock_release_recursive>
 8007352:	e7dd      	b.n	8007310 <_fflush_r+0xc>

08007354 <memmove>:
 8007354:	4288      	cmp	r0, r1
 8007356:	b510      	push	{r4, lr}
 8007358:	eb01 0402 	add.w	r4, r1, r2
 800735c:	d902      	bls.n	8007364 <memmove+0x10>
 800735e:	4284      	cmp	r4, r0
 8007360:	4623      	mov	r3, r4
 8007362:	d807      	bhi.n	8007374 <memmove+0x20>
 8007364:	1e43      	subs	r3, r0, #1
 8007366:	42a1      	cmp	r1, r4
 8007368:	d008      	beq.n	800737c <memmove+0x28>
 800736a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800736e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007372:	e7f8      	b.n	8007366 <memmove+0x12>
 8007374:	4601      	mov	r1, r0
 8007376:	4402      	add	r2, r0
 8007378:	428a      	cmp	r2, r1
 800737a:	d100      	bne.n	800737e <memmove+0x2a>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007386:	e7f7      	b.n	8007378 <memmove+0x24>

08007388 <strncmp>:
 8007388:	b510      	push	{r4, lr}
 800738a:	b16a      	cbz	r2, 80073a8 <strncmp+0x20>
 800738c:	3901      	subs	r1, #1
 800738e:	1884      	adds	r4, r0, r2
 8007390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007394:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007398:	429a      	cmp	r2, r3
 800739a:	d103      	bne.n	80073a4 <strncmp+0x1c>
 800739c:	42a0      	cmp	r0, r4
 800739e:	d001      	beq.n	80073a4 <strncmp+0x1c>
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	d1f5      	bne.n	8007390 <strncmp+0x8>
 80073a4:	1ad0      	subs	r0, r2, r3
 80073a6:	bd10      	pop	{r4, pc}
 80073a8:	4610      	mov	r0, r2
 80073aa:	e7fc      	b.n	80073a6 <strncmp+0x1e>

080073ac <_sbrk_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	2300      	movs	r3, #0
 80073b0:	4d05      	ldr	r5, [pc, #20]	@ (80073c8 <_sbrk_r+0x1c>)
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7fa f90c 	bl	80015d4 <_sbrk>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_sbrk_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_sbrk_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	200003d8 	.word	0x200003d8

080073cc <memcpy>:
 80073cc:	440a      	add	r2, r1
 80073ce:	4291      	cmp	r1, r2
 80073d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073d4:	d100      	bne.n	80073d8 <memcpy+0xc>
 80073d6:	4770      	bx	lr
 80073d8:	b510      	push	{r4, lr}
 80073da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e4:	d1f9      	bne.n	80073da <memcpy+0xe>
 80073e6:	bd10      	pop	{r4, pc}

080073e8 <nan>:
 80073e8:	2000      	movs	r0, #0
 80073ea:	4901      	ldr	r1, [pc, #4]	@ (80073f0 <nan+0x8>)
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	7ff80000 	.word	0x7ff80000

080073f4 <__assert_func>:
 80073f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073f6:	4614      	mov	r4, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <__assert_func+0x2c>)
 80073fc:	4605      	mov	r5, r0
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68d8      	ldr	r0, [r3, #12]
 8007402:	b14c      	cbz	r4, 8007418 <__assert_func+0x24>
 8007404:	4b07      	ldr	r3, [pc, #28]	@ (8007424 <__assert_func+0x30>)
 8007406:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800740a:	9100      	str	r1, [sp, #0]
 800740c:	462b      	mov	r3, r5
 800740e:	4906      	ldr	r1, [pc, #24]	@ (8007428 <__assert_func+0x34>)
 8007410:	f000 fba8 	bl	8007b64 <fiprintf>
 8007414:	f000 fbb8 	bl	8007b88 <abort>
 8007418:	4b04      	ldr	r3, [pc, #16]	@ (800742c <__assert_func+0x38>)
 800741a:	461c      	mov	r4, r3
 800741c:	e7f3      	b.n	8007406 <__assert_func+0x12>
 800741e:	bf00      	nop
 8007420:	20000018 	.word	0x20000018
 8007424:	08008290 	.word	0x08008290
 8007428:	0800829d 	.word	0x0800829d
 800742c:	080082cb 	.word	0x080082cb

08007430 <_calloc_r>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	fba1 5402 	umull	r5, r4, r1, r2
 8007436:	b934      	cbnz	r4, 8007446 <_calloc_r+0x16>
 8007438:	4629      	mov	r1, r5
 800743a:	f7fe f9e3 	bl	8005804 <_malloc_r>
 800743e:	4606      	mov	r6, r0
 8007440:	b928      	cbnz	r0, 800744e <_calloc_r+0x1e>
 8007442:	4630      	mov	r0, r6
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	220c      	movs	r2, #12
 8007448:	2600      	movs	r6, #0
 800744a:	6002      	str	r2, [r0, #0]
 800744c:	e7f9      	b.n	8007442 <_calloc_r+0x12>
 800744e:	462a      	mov	r2, r5
 8007450:	4621      	mov	r1, r4
 8007452:	f7fd fa76 	bl	8004942 <memset>
 8007456:	e7f4      	b.n	8007442 <_calloc_r+0x12>

08007458 <rshift>:
 8007458:	6903      	ldr	r3, [r0, #16]
 800745a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800745e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007462:	f100 0414 	add.w	r4, r0, #20
 8007466:	ea4f 1261 	mov.w	r2, r1, asr #5
 800746a:	dd46      	ble.n	80074fa <rshift+0xa2>
 800746c:	f011 011f 	ands.w	r1, r1, #31
 8007470:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007474:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007478:	d10c      	bne.n	8007494 <rshift+0x3c>
 800747a:	4629      	mov	r1, r5
 800747c:	f100 0710 	add.w	r7, r0, #16
 8007480:	42b1      	cmp	r1, r6
 8007482:	d335      	bcc.n	80074f0 <rshift+0x98>
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	1eea      	subs	r2, r5, #3
 800748a:	4296      	cmp	r6, r2
 800748c:	bf38      	it	cc
 800748e:	2300      	movcc	r3, #0
 8007490:	4423      	add	r3, r4
 8007492:	e015      	b.n	80074c0 <rshift+0x68>
 8007494:	46a1      	mov	r9, r4
 8007496:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800749a:	f1c1 0820 	rsb	r8, r1, #32
 800749e:	40cf      	lsrs	r7, r1
 80074a0:	f105 0e04 	add.w	lr, r5, #4
 80074a4:	4576      	cmp	r6, lr
 80074a6:	46f4      	mov	ip, lr
 80074a8:	d816      	bhi.n	80074d8 <rshift+0x80>
 80074aa:	1a9a      	subs	r2, r3, r2
 80074ac:	0092      	lsls	r2, r2, #2
 80074ae:	3a04      	subs	r2, #4
 80074b0:	3501      	adds	r5, #1
 80074b2:	42ae      	cmp	r6, r5
 80074b4:	bf38      	it	cc
 80074b6:	2200      	movcc	r2, #0
 80074b8:	18a3      	adds	r3, r4, r2
 80074ba:	50a7      	str	r7, [r4, r2]
 80074bc:	b107      	cbz	r7, 80074c0 <rshift+0x68>
 80074be:	3304      	adds	r3, #4
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	eba3 0204 	sub.w	r2, r3, r4
 80074c6:	bf08      	it	eq
 80074c8:	2300      	moveq	r3, #0
 80074ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074ce:	6102      	str	r2, [r0, #16]
 80074d0:	bf08      	it	eq
 80074d2:	6143      	streq	r3, [r0, #20]
 80074d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d8:	f8dc c000 	ldr.w	ip, [ip]
 80074dc:	fa0c fc08 	lsl.w	ip, ip, r8
 80074e0:	ea4c 0707 	orr.w	r7, ip, r7
 80074e4:	f849 7b04 	str.w	r7, [r9], #4
 80074e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074ec:	40cf      	lsrs	r7, r1
 80074ee:	e7d9      	b.n	80074a4 <rshift+0x4c>
 80074f0:	f851 cb04 	ldr.w	ip, [r1], #4
 80074f4:	f847 cf04 	str.w	ip, [r7, #4]!
 80074f8:	e7c2      	b.n	8007480 <rshift+0x28>
 80074fa:	4623      	mov	r3, r4
 80074fc:	e7e0      	b.n	80074c0 <rshift+0x68>

080074fe <__hexdig_fun>:
 80074fe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007502:	2b09      	cmp	r3, #9
 8007504:	d802      	bhi.n	800750c <__hexdig_fun+0xe>
 8007506:	3820      	subs	r0, #32
 8007508:	b2c0      	uxtb	r0, r0
 800750a:	4770      	bx	lr
 800750c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007510:	2b05      	cmp	r3, #5
 8007512:	d801      	bhi.n	8007518 <__hexdig_fun+0x1a>
 8007514:	3847      	subs	r0, #71	@ 0x47
 8007516:	e7f7      	b.n	8007508 <__hexdig_fun+0xa>
 8007518:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800751c:	2b05      	cmp	r3, #5
 800751e:	d801      	bhi.n	8007524 <__hexdig_fun+0x26>
 8007520:	3827      	subs	r0, #39	@ 0x27
 8007522:	e7f1      	b.n	8007508 <__hexdig_fun+0xa>
 8007524:	2000      	movs	r0, #0
 8007526:	4770      	bx	lr

08007528 <__gethex>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	468a      	mov	sl, r1
 800752e:	4690      	mov	r8, r2
 8007530:	b085      	sub	sp, #20
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	680b      	ldr	r3, [r1, #0]
 8007536:	9001      	str	r0, [sp, #4]
 8007538:	1c9c      	adds	r4, r3, #2
 800753a:	46a1      	mov	r9, r4
 800753c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007540:	2830      	cmp	r0, #48	@ 0x30
 8007542:	d0fa      	beq.n	800753a <__gethex+0x12>
 8007544:	eba9 0303 	sub.w	r3, r9, r3
 8007548:	f1a3 0b02 	sub.w	fp, r3, #2
 800754c:	f7ff ffd7 	bl	80074fe <__hexdig_fun>
 8007550:	4605      	mov	r5, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d168      	bne.n	8007628 <__gethex+0x100>
 8007556:	2201      	movs	r2, #1
 8007558:	4648      	mov	r0, r9
 800755a:	499f      	ldr	r1, [pc, #636]	@ (80077d8 <__gethex+0x2b0>)
 800755c:	f7ff ff14 	bl	8007388 <strncmp>
 8007560:	4607      	mov	r7, r0
 8007562:	2800      	cmp	r0, #0
 8007564:	d167      	bne.n	8007636 <__gethex+0x10e>
 8007566:	f899 0001 	ldrb.w	r0, [r9, #1]
 800756a:	4626      	mov	r6, r4
 800756c:	f7ff ffc7 	bl	80074fe <__hexdig_fun>
 8007570:	2800      	cmp	r0, #0
 8007572:	d062      	beq.n	800763a <__gethex+0x112>
 8007574:	4623      	mov	r3, r4
 8007576:	7818      	ldrb	r0, [r3, #0]
 8007578:	4699      	mov	r9, r3
 800757a:	2830      	cmp	r0, #48	@ 0x30
 800757c:	f103 0301 	add.w	r3, r3, #1
 8007580:	d0f9      	beq.n	8007576 <__gethex+0x4e>
 8007582:	f7ff ffbc 	bl	80074fe <__hexdig_fun>
 8007586:	fab0 f580 	clz	r5, r0
 800758a:	f04f 0b01 	mov.w	fp, #1
 800758e:	096d      	lsrs	r5, r5, #5
 8007590:	464a      	mov	r2, r9
 8007592:	4616      	mov	r6, r2
 8007594:	7830      	ldrb	r0, [r6, #0]
 8007596:	3201      	adds	r2, #1
 8007598:	f7ff ffb1 	bl	80074fe <__hexdig_fun>
 800759c:	2800      	cmp	r0, #0
 800759e:	d1f8      	bne.n	8007592 <__gethex+0x6a>
 80075a0:	2201      	movs	r2, #1
 80075a2:	4630      	mov	r0, r6
 80075a4:	498c      	ldr	r1, [pc, #560]	@ (80077d8 <__gethex+0x2b0>)
 80075a6:	f7ff feef 	bl	8007388 <strncmp>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d13f      	bne.n	800762e <__gethex+0x106>
 80075ae:	b944      	cbnz	r4, 80075c2 <__gethex+0x9a>
 80075b0:	1c74      	adds	r4, r6, #1
 80075b2:	4622      	mov	r2, r4
 80075b4:	4616      	mov	r6, r2
 80075b6:	7830      	ldrb	r0, [r6, #0]
 80075b8:	3201      	adds	r2, #1
 80075ba:	f7ff ffa0 	bl	80074fe <__hexdig_fun>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d1f8      	bne.n	80075b4 <__gethex+0x8c>
 80075c2:	1ba4      	subs	r4, r4, r6
 80075c4:	00a7      	lsls	r7, r4, #2
 80075c6:	7833      	ldrb	r3, [r6, #0]
 80075c8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80075cc:	2b50      	cmp	r3, #80	@ 0x50
 80075ce:	d13e      	bne.n	800764e <__gethex+0x126>
 80075d0:	7873      	ldrb	r3, [r6, #1]
 80075d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80075d4:	d033      	beq.n	800763e <__gethex+0x116>
 80075d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80075d8:	d034      	beq.n	8007644 <__gethex+0x11c>
 80075da:	2400      	movs	r4, #0
 80075dc:	1c71      	adds	r1, r6, #1
 80075de:	7808      	ldrb	r0, [r1, #0]
 80075e0:	f7ff ff8d 	bl	80074fe <__hexdig_fun>
 80075e4:	1e43      	subs	r3, r0, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b18      	cmp	r3, #24
 80075ea:	d830      	bhi.n	800764e <__gethex+0x126>
 80075ec:	f1a0 0210 	sub.w	r2, r0, #16
 80075f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075f4:	f7ff ff83 	bl	80074fe <__hexdig_fun>
 80075f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80075fc:	fa5f fc8c 	uxtb.w	ip, ip
 8007600:	f1bc 0f18 	cmp.w	ip, #24
 8007604:	f04f 030a 	mov.w	r3, #10
 8007608:	d91e      	bls.n	8007648 <__gethex+0x120>
 800760a:	b104      	cbz	r4, 800760e <__gethex+0xe6>
 800760c:	4252      	negs	r2, r2
 800760e:	4417      	add	r7, r2
 8007610:	f8ca 1000 	str.w	r1, [sl]
 8007614:	b1ed      	cbz	r5, 8007652 <__gethex+0x12a>
 8007616:	f1bb 0f00 	cmp.w	fp, #0
 800761a:	bf0c      	ite	eq
 800761c:	2506      	moveq	r5, #6
 800761e:	2500      	movne	r5, #0
 8007620:	4628      	mov	r0, r5
 8007622:	b005      	add	sp, #20
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007628:	2500      	movs	r5, #0
 800762a:	462c      	mov	r4, r5
 800762c:	e7b0      	b.n	8007590 <__gethex+0x68>
 800762e:	2c00      	cmp	r4, #0
 8007630:	d1c7      	bne.n	80075c2 <__gethex+0x9a>
 8007632:	4627      	mov	r7, r4
 8007634:	e7c7      	b.n	80075c6 <__gethex+0x9e>
 8007636:	464e      	mov	r6, r9
 8007638:	462f      	mov	r7, r5
 800763a:	2501      	movs	r5, #1
 800763c:	e7c3      	b.n	80075c6 <__gethex+0x9e>
 800763e:	2400      	movs	r4, #0
 8007640:	1cb1      	adds	r1, r6, #2
 8007642:	e7cc      	b.n	80075de <__gethex+0xb6>
 8007644:	2401      	movs	r4, #1
 8007646:	e7fb      	b.n	8007640 <__gethex+0x118>
 8007648:	fb03 0002 	mla	r0, r3, r2, r0
 800764c:	e7ce      	b.n	80075ec <__gethex+0xc4>
 800764e:	4631      	mov	r1, r6
 8007650:	e7de      	b.n	8007610 <__gethex+0xe8>
 8007652:	4629      	mov	r1, r5
 8007654:	eba6 0309 	sub.w	r3, r6, r9
 8007658:	3b01      	subs	r3, #1
 800765a:	2b07      	cmp	r3, #7
 800765c:	dc0a      	bgt.n	8007674 <__gethex+0x14c>
 800765e:	9801      	ldr	r0, [sp, #4]
 8007660:	f7fe f95c 	bl	800591c <_Balloc>
 8007664:	4604      	mov	r4, r0
 8007666:	b940      	cbnz	r0, 800767a <__gethex+0x152>
 8007668:	4602      	mov	r2, r0
 800766a:	21e4      	movs	r1, #228	@ 0xe4
 800766c:	4b5b      	ldr	r3, [pc, #364]	@ (80077dc <__gethex+0x2b4>)
 800766e:	485c      	ldr	r0, [pc, #368]	@ (80077e0 <__gethex+0x2b8>)
 8007670:	f7ff fec0 	bl	80073f4 <__assert_func>
 8007674:	3101      	adds	r1, #1
 8007676:	105b      	asrs	r3, r3, #1
 8007678:	e7ef      	b.n	800765a <__gethex+0x132>
 800767a:	2300      	movs	r3, #0
 800767c:	f100 0a14 	add.w	sl, r0, #20
 8007680:	4655      	mov	r5, sl
 8007682:	469b      	mov	fp, r3
 8007684:	45b1      	cmp	r9, r6
 8007686:	d337      	bcc.n	80076f8 <__gethex+0x1d0>
 8007688:	f845 bb04 	str.w	fp, [r5], #4
 800768c:	eba5 050a 	sub.w	r5, r5, sl
 8007690:	10ad      	asrs	r5, r5, #2
 8007692:	6125      	str	r5, [r4, #16]
 8007694:	4658      	mov	r0, fp
 8007696:	f7fe fa33 	bl	8005b00 <__hi0bits>
 800769a:	016d      	lsls	r5, r5, #5
 800769c:	f8d8 6000 	ldr.w	r6, [r8]
 80076a0:	1a2d      	subs	r5, r5, r0
 80076a2:	42b5      	cmp	r5, r6
 80076a4:	dd54      	ble.n	8007750 <__gethex+0x228>
 80076a6:	1bad      	subs	r5, r5, r6
 80076a8:	4629      	mov	r1, r5
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7fe fdb5 	bl	800621a <__any_on>
 80076b0:	4681      	mov	r9, r0
 80076b2:	b178      	cbz	r0, 80076d4 <__gethex+0x1ac>
 80076b4:	f04f 0901 	mov.w	r9, #1
 80076b8:	1e6b      	subs	r3, r5, #1
 80076ba:	1159      	asrs	r1, r3, #5
 80076bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80076c0:	f003 021f 	and.w	r2, r3, #31
 80076c4:	fa09 f202 	lsl.w	r2, r9, r2
 80076c8:	420a      	tst	r2, r1
 80076ca:	d003      	beq.n	80076d4 <__gethex+0x1ac>
 80076cc:	454b      	cmp	r3, r9
 80076ce:	dc36      	bgt.n	800773e <__gethex+0x216>
 80076d0:	f04f 0902 	mov.w	r9, #2
 80076d4:	4629      	mov	r1, r5
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7ff febe 	bl	8007458 <rshift>
 80076dc:	442f      	add	r7, r5
 80076de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076e2:	42bb      	cmp	r3, r7
 80076e4:	da42      	bge.n	800776c <__gethex+0x244>
 80076e6:	4621      	mov	r1, r4
 80076e8:	9801      	ldr	r0, [sp, #4]
 80076ea:	f7fe f957 	bl	800599c <_Bfree>
 80076ee:	2300      	movs	r3, #0
 80076f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076f2:	25a3      	movs	r5, #163	@ 0xa3
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e793      	b.n	8007620 <__gethex+0xf8>
 80076f8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80076fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80076fe:	d012      	beq.n	8007726 <__gethex+0x1fe>
 8007700:	2b20      	cmp	r3, #32
 8007702:	d104      	bne.n	800770e <__gethex+0x1e6>
 8007704:	f845 bb04 	str.w	fp, [r5], #4
 8007708:	f04f 0b00 	mov.w	fp, #0
 800770c:	465b      	mov	r3, fp
 800770e:	7830      	ldrb	r0, [r6, #0]
 8007710:	9303      	str	r3, [sp, #12]
 8007712:	f7ff fef4 	bl	80074fe <__hexdig_fun>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	f000 000f 	and.w	r0, r0, #15
 800771c:	4098      	lsls	r0, r3
 800771e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007722:	3304      	adds	r3, #4
 8007724:	e7ae      	b.n	8007684 <__gethex+0x15c>
 8007726:	45b1      	cmp	r9, r6
 8007728:	d8ea      	bhi.n	8007700 <__gethex+0x1d8>
 800772a:	2201      	movs	r2, #1
 800772c:	4630      	mov	r0, r6
 800772e:	492a      	ldr	r1, [pc, #168]	@ (80077d8 <__gethex+0x2b0>)
 8007730:	9303      	str	r3, [sp, #12]
 8007732:	f7ff fe29 	bl	8007388 <strncmp>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	2800      	cmp	r0, #0
 800773a:	d1e1      	bne.n	8007700 <__gethex+0x1d8>
 800773c:	e7a2      	b.n	8007684 <__gethex+0x15c>
 800773e:	4620      	mov	r0, r4
 8007740:	1ea9      	subs	r1, r5, #2
 8007742:	f7fe fd6a 	bl	800621a <__any_on>
 8007746:	2800      	cmp	r0, #0
 8007748:	d0c2      	beq.n	80076d0 <__gethex+0x1a8>
 800774a:	f04f 0903 	mov.w	r9, #3
 800774e:	e7c1      	b.n	80076d4 <__gethex+0x1ac>
 8007750:	da09      	bge.n	8007766 <__gethex+0x23e>
 8007752:	1b75      	subs	r5, r6, r5
 8007754:	4621      	mov	r1, r4
 8007756:	462a      	mov	r2, r5
 8007758:	9801      	ldr	r0, [sp, #4]
 800775a:	f7fe fb2f 	bl	8005dbc <__lshift>
 800775e:	4604      	mov	r4, r0
 8007760:	1b7f      	subs	r7, r7, r5
 8007762:	f100 0a14 	add.w	sl, r0, #20
 8007766:	f04f 0900 	mov.w	r9, #0
 800776a:	e7b8      	b.n	80076de <__gethex+0x1b6>
 800776c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007770:	42bd      	cmp	r5, r7
 8007772:	dd6f      	ble.n	8007854 <__gethex+0x32c>
 8007774:	1bed      	subs	r5, r5, r7
 8007776:	42ae      	cmp	r6, r5
 8007778:	dc34      	bgt.n	80077e4 <__gethex+0x2bc>
 800777a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d022      	beq.n	80077c8 <__gethex+0x2a0>
 8007782:	2b03      	cmp	r3, #3
 8007784:	d024      	beq.n	80077d0 <__gethex+0x2a8>
 8007786:	2b01      	cmp	r3, #1
 8007788:	d115      	bne.n	80077b6 <__gethex+0x28e>
 800778a:	42ae      	cmp	r6, r5
 800778c:	d113      	bne.n	80077b6 <__gethex+0x28e>
 800778e:	2e01      	cmp	r6, #1
 8007790:	d10b      	bne.n	80077aa <__gethex+0x282>
 8007792:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007796:	9a02      	ldr	r2, [sp, #8]
 8007798:	2562      	movs	r5, #98	@ 0x62
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	2301      	movs	r3, #1
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	f8ca 3000 	str.w	r3, [sl]
 80077a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077a6:	601c      	str	r4, [r3, #0]
 80077a8:	e73a      	b.n	8007620 <__gethex+0xf8>
 80077aa:	4620      	mov	r0, r4
 80077ac:	1e71      	subs	r1, r6, #1
 80077ae:	f7fe fd34 	bl	800621a <__any_on>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d1ed      	bne.n	8007792 <__gethex+0x26a>
 80077b6:	4621      	mov	r1, r4
 80077b8:	9801      	ldr	r0, [sp, #4]
 80077ba:	f7fe f8ef 	bl	800599c <_Bfree>
 80077be:	2300      	movs	r3, #0
 80077c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077c2:	2550      	movs	r5, #80	@ 0x50
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e72b      	b.n	8007620 <__gethex+0xf8>
 80077c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f3      	bne.n	80077b6 <__gethex+0x28e>
 80077ce:	e7e0      	b.n	8007792 <__gethex+0x26a>
 80077d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1dd      	bne.n	8007792 <__gethex+0x26a>
 80077d6:	e7ee      	b.n	80077b6 <__gethex+0x28e>
 80077d8:	08008275 	.word	0x08008275
 80077dc:	0800820b 	.word	0x0800820b
 80077e0:	080082cc 	.word	0x080082cc
 80077e4:	1e6f      	subs	r7, r5, #1
 80077e6:	f1b9 0f00 	cmp.w	r9, #0
 80077ea:	d130      	bne.n	800784e <__gethex+0x326>
 80077ec:	b127      	cbz	r7, 80077f8 <__gethex+0x2d0>
 80077ee:	4639      	mov	r1, r7
 80077f0:	4620      	mov	r0, r4
 80077f2:	f7fe fd12 	bl	800621a <__any_on>
 80077f6:	4681      	mov	r9, r0
 80077f8:	2301      	movs	r3, #1
 80077fa:	4629      	mov	r1, r5
 80077fc:	1b76      	subs	r6, r6, r5
 80077fe:	2502      	movs	r5, #2
 8007800:	117a      	asrs	r2, r7, #5
 8007802:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007806:	f007 071f 	and.w	r7, r7, #31
 800780a:	40bb      	lsls	r3, r7
 800780c:	4213      	tst	r3, r2
 800780e:	4620      	mov	r0, r4
 8007810:	bf18      	it	ne
 8007812:	f049 0902 	orrne.w	r9, r9, #2
 8007816:	f7ff fe1f 	bl	8007458 <rshift>
 800781a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800781e:	f1b9 0f00 	cmp.w	r9, #0
 8007822:	d047      	beq.n	80078b4 <__gethex+0x38c>
 8007824:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d015      	beq.n	8007858 <__gethex+0x330>
 800782c:	2b03      	cmp	r3, #3
 800782e:	d017      	beq.n	8007860 <__gethex+0x338>
 8007830:	2b01      	cmp	r3, #1
 8007832:	d109      	bne.n	8007848 <__gethex+0x320>
 8007834:	f019 0f02 	tst.w	r9, #2
 8007838:	d006      	beq.n	8007848 <__gethex+0x320>
 800783a:	f8da 3000 	ldr.w	r3, [sl]
 800783e:	ea49 0903 	orr.w	r9, r9, r3
 8007842:	f019 0f01 	tst.w	r9, #1
 8007846:	d10e      	bne.n	8007866 <__gethex+0x33e>
 8007848:	f045 0510 	orr.w	r5, r5, #16
 800784c:	e032      	b.n	80078b4 <__gethex+0x38c>
 800784e:	f04f 0901 	mov.w	r9, #1
 8007852:	e7d1      	b.n	80077f8 <__gethex+0x2d0>
 8007854:	2501      	movs	r5, #1
 8007856:	e7e2      	b.n	800781e <__gethex+0x2f6>
 8007858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800785a:	f1c3 0301 	rsb	r3, r3, #1
 800785e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0f0      	beq.n	8007848 <__gethex+0x320>
 8007866:	f04f 0c00 	mov.w	ip, #0
 800786a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800786e:	f104 0314 	add.w	r3, r4, #20
 8007872:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007876:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800787a:	4618      	mov	r0, r3
 800787c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007880:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007884:	d01b      	beq.n	80078be <__gethex+0x396>
 8007886:	3201      	adds	r2, #1
 8007888:	6002      	str	r2, [r0, #0]
 800788a:	2d02      	cmp	r5, #2
 800788c:	f104 0314 	add.w	r3, r4, #20
 8007890:	d13c      	bne.n	800790c <__gethex+0x3e4>
 8007892:	f8d8 2000 	ldr.w	r2, [r8]
 8007896:	3a01      	subs	r2, #1
 8007898:	42b2      	cmp	r2, r6
 800789a:	d109      	bne.n	80078b0 <__gethex+0x388>
 800789c:	2201      	movs	r2, #1
 800789e:	1171      	asrs	r1, r6, #5
 80078a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078a4:	f006 061f 	and.w	r6, r6, #31
 80078a8:	fa02 f606 	lsl.w	r6, r2, r6
 80078ac:	421e      	tst	r6, r3
 80078ae:	d13a      	bne.n	8007926 <__gethex+0x3fe>
 80078b0:	f045 0520 	orr.w	r5, r5, #32
 80078b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078b6:	601c      	str	r4, [r3, #0]
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	601f      	str	r7, [r3, #0]
 80078bc:	e6b0      	b.n	8007620 <__gethex+0xf8>
 80078be:	4299      	cmp	r1, r3
 80078c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80078c4:	d8d9      	bhi.n	800787a <__gethex+0x352>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	459b      	cmp	fp, r3
 80078ca:	db17      	blt.n	80078fc <__gethex+0x3d4>
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	9801      	ldr	r0, [sp, #4]
 80078d0:	3101      	adds	r1, #1
 80078d2:	f7fe f823 	bl	800591c <_Balloc>
 80078d6:	4681      	mov	r9, r0
 80078d8:	b918      	cbnz	r0, 80078e2 <__gethex+0x3ba>
 80078da:	4602      	mov	r2, r0
 80078dc:	2184      	movs	r1, #132	@ 0x84
 80078de:	4b19      	ldr	r3, [pc, #100]	@ (8007944 <__gethex+0x41c>)
 80078e0:	e6c5      	b.n	800766e <__gethex+0x146>
 80078e2:	6922      	ldr	r2, [r4, #16]
 80078e4:	f104 010c 	add.w	r1, r4, #12
 80078e8:	3202      	adds	r2, #2
 80078ea:	0092      	lsls	r2, r2, #2
 80078ec:	300c      	adds	r0, #12
 80078ee:	f7ff fd6d 	bl	80073cc <memcpy>
 80078f2:	4621      	mov	r1, r4
 80078f4:	9801      	ldr	r0, [sp, #4]
 80078f6:	f7fe f851 	bl	800599c <_Bfree>
 80078fa:	464c      	mov	r4, r9
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	6122      	str	r2, [r4, #16]
 8007902:	2201      	movs	r2, #1
 8007904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007908:	615a      	str	r2, [r3, #20]
 800790a:	e7be      	b.n	800788a <__gethex+0x362>
 800790c:	6922      	ldr	r2, [r4, #16]
 800790e:	455a      	cmp	r2, fp
 8007910:	dd0b      	ble.n	800792a <__gethex+0x402>
 8007912:	2101      	movs	r1, #1
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff fd9f 	bl	8007458 <rshift>
 800791a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800791e:	3701      	adds	r7, #1
 8007920:	42bb      	cmp	r3, r7
 8007922:	f6ff aee0 	blt.w	80076e6 <__gethex+0x1be>
 8007926:	2501      	movs	r5, #1
 8007928:	e7c2      	b.n	80078b0 <__gethex+0x388>
 800792a:	f016 061f 	ands.w	r6, r6, #31
 800792e:	d0fa      	beq.n	8007926 <__gethex+0x3fe>
 8007930:	4453      	add	r3, sl
 8007932:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007936:	f7fe f8e3 	bl	8005b00 <__hi0bits>
 800793a:	f1c6 0620 	rsb	r6, r6, #32
 800793e:	42b0      	cmp	r0, r6
 8007940:	dbe7      	blt.n	8007912 <__gethex+0x3ea>
 8007942:	e7f0      	b.n	8007926 <__gethex+0x3fe>
 8007944:	0800820b 	.word	0x0800820b

08007948 <L_shift>:
 8007948:	f1c2 0208 	rsb	r2, r2, #8
 800794c:	0092      	lsls	r2, r2, #2
 800794e:	b570      	push	{r4, r5, r6, lr}
 8007950:	f1c2 0620 	rsb	r6, r2, #32
 8007954:	6843      	ldr	r3, [r0, #4]
 8007956:	6804      	ldr	r4, [r0, #0]
 8007958:	fa03 f506 	lsl.w	r5, r3, r6
 800795c:	432c      	orrs	r4, r5
 800795e:	40d3      	lsrs	r3, r2
 8007960:	6004      	str	r4, [r0, #0]
 8007962:	f840 3f04 	str.w	r3, [r0, #4]!
 8007966:	4288      	cmp	r0, r1
 8007968:	d3f4      	bcc.n	8007954 <L_shift+0xc>
 800796a:	bd70      	pop	{r4, r5, r6, pc}

0800796c <__match>:
 800796c:	b530      	push	{r4, r5, lr}
 800796e:	6803      	ldr	r3, [r0, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007976:	b914      	cbnz	r4, 800797e <__match+0x12>
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	2001      	movs	r0, #1
 800797c:	bd30      	pop	{r4, r5, pc}
 800797e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007982:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007986:	2d19      	cmp	r5, #25
 8007988:	bf98      	it	ls
 800798a:	3220      	addls	r2, #32
 800798c:	42a2      	cmp	r2, r4
 800798e:	d0f0      	beq.n	8007972 <__match+0x6>
 8007990:	2000      	movs	r0, #0
 8007992:	e7f3      	b.n	800797c <__match+0x10>

08007994 <__hexnan>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	2500      	movs	r5, #0
 800799a:	680b      	ldr	r3, [r1, #0]
 800799c:	4682      	mov	sl, r0
 800799e:	115e      	asrs	r6, r3, #5
 80079a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079a4:	f013 031f 	ands.w	r3, r3, #31
 80079a8:	bf18      	it	ne
 80079aa:	3604      	addne	r6, #4
 80079ac:	1f37      	subs	r7, r6, #4
 80079ae:	4690      	mov	r8, r2
 80079b0:	46b9      	mov	r9, r7
 80079b2:	463c      	mov	r4, r7
 80079b4:	46ab      	mov	fp, r5
 80079b6:	b087      	sub	sp, #28
 80079b8:	6801      	ldr	r1, [r0, #0]
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	f846 5c04 	str.w	r5, [r6, #-4]
 80079c0:	9502      	str	r5, [sp, #8]
 80079c2:	784a      	ldrb	r2, [r1, #1]
 80079c4:	1c4b      	adds	r3, r1, #1
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	b342      	cbz	r2, 8007a1c <__hexnan+0x88>
 80079ca:	4610      	mov	r0, r2
 80079cc:	9105      	str	r1, [sp, #20]
 80079ce:	9204      	str	r2, [sp, #16]
 80079d0:	f7ff fd95 	bl	80074fe <__hexdig_fun>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d151      	bne.n	8007a7c <__hexnan+0xe8>
 80079d8:	9a04      	ldr	r2, [sp, #16]
 80079da:	9905      	ldr	r1, [sp, #20]
 80079dc:	2a20      	cmp	r2, #32
 80079de:	d818      	bhi.n	8007a12 <__hexnan+0x7e>
 80079e0:	9b02      	ldr	r3, [sp, #8]
 80079e2:	459b      	cmp	fp, r3
 80079e4:	dd13      	ble.n	8007a0e <__hexnan+0x7a>
 80079e6:	454c      	cmp	r4, r9
 80079e8:	d206      	bcs.n	80079f8 <__hexnan+0x64>
 80079ea:	2d07      	cmp	r5, #7
 80079ec:	dc04      	bgt.n	80079f8 <__hexnan+0x64>
 80079ee:	462a      	mov	r2, r5
 80079f0:	4649      	mov	r1, r9
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff ffa8 	bl	8007948 <L_shift>
 80079f8:	4544      	cmp	r4, r8
 80079fa:	d952      	bls.n	8007aa2 <__hexnan+0x10e>
 80079fc:	2300      	movs	r3, #0
 80079fe:	f1a4 0904 	sub.w	r9, r4, #4
 8007a02:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a06:	461d      	mov	r5, r3
 8007a08:	464c      	mov	r4, r9
 8007a0a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a0e:	9903      	ldr	r1, [sp, #12]
 8007a10:	e7d7      	b.n	80079c2 <__hexnan+0x2e>
 8007a12:	2a29      	cmp	r2, #41	@ 0x29
 8007a14:	d157      	bne.n	8007ac6 <__hexnan+0x132>
 8007a16:	3102      	adds	r1, #2
 8007a18:	f8ca 1000 	str.w	r1, [sl]
 8007a1c:	f1bb 0f00 	cmp.w	fp, #0
 8007a20:	d051      	beq.n	8007ac6 <__hexnan+0x132>
 8007a22:	454c      	cmp	r4, r9
 8007a24:	d206      	bcs.n	8007a34 <__hexnan+0xa0>
 8007a26:	2d07      	cmp	r5, #7
 8007a28:	dc04      	bgt.n	8007a34 <__hexnan+0xa0>
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7ff ff8a 	bl	8007948 <L_shift>
 8007a34:	4544      	cmp	r4, r8
 8007a36:	d936      	bls.n	8007aa6 <__hexnan+0x112>
 8007a38:	4623      	mov	r3, r4
 8007a3a:	f1a8 0204 	sub.w	r2, r8, #4
 8007a3e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a42:	429f      	cmp	r7, r3
 8007a44:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a48:	d2f9      	bcs.n	8007a3e <__hexnan+0xaa>
 8007a4a:	1b3b      	subs	r3, r7, r4
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	3304      	adds	r3, #4
 8007a52:	3401      	adds	r4, #1
 8007a54:	3e03      	subs	r6, #3
 8007a56:	42b4      	cmp	r4, r6
 8007a58:	bf88      	it	hi
 8007a5a:	2304      	movhi	r3, #4
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4443      	add	r3, r8
 8007a60:	f843 2b04 	str.w	r2, [r3], #4
 8007a64:	429f      	cmp	r7, r3
 8007a66:	d2fb      	bcs.n	8007a60 <__hexnan+0xcc>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	b91b      	cbnz	r3, 8007a74 <__hexnan+0xe0>
 8007a6c:	4547      	cmp	r7, r8
 8007a6e:	d128      	bne.n	8007ac2 <__hexnan+0x12e>
 8007a70:	2301      	movs	r3, #1
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	2005      	movs	r0, #5
 8007a76:	b007      	add	sp, #28
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	2d08      	cmp	r5, #8
 8007a80:	f10b 0b01 	add.w	fp, fp, #1
 8007a84:	dd06      	ble.n	8007a94 <__hexnan+0x100>
 8007a86:	4544      	cmp	r4, r8
 8007a88:	d9c1      	bls.n	8007a0e <__hexnan+0x7a>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2501      	movs	r5, #1
 8007a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a92:	3c04      	subs	r4, #4
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	f000 000f 	and.w	r0, r0, #15
 8007a9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	e7b5      	b.n	8007a0e <__hexnan+0x7a>
 8007aa2:	2508      	movs	r5, #8
 8007aa4:	e7b3      	b.n	8007a0e <__hexnan+0x7a>
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0dd      	beq.n	8007a68 <__hexnan+0xd4>
 8007aac:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab0:	f1c3 0320 	rsb	r3, r3, #32
 8007ab4:	40da      	lsrs	r2, r3
 8007ab6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007aba:	4013      	ands	r3, r2
 8007abc:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ac0:	e7d2      	b.n	8007a68 <__hexnan+0xd4>
 8007ac2:	3f04      	subs	r7, #4
 8007ac4:	e7d0      	b.n	8007a68 <__hexnan+0xd4>
 8007ac6:	2004      	movs	r0, #4
 8007ac8:	e7d5      	b.n	8007a76 <__hexnan+0xe2>

08007aca <__ascii_mbtowc>:
 8007aca:	b082      	sub	sp, #8
 8007acc:	b901      	cbnz	r1, 8007ad0 <__ascii_mbtowc+0x6>
 8007ace:	a901      	add	r1, sp, #4
 8007ad0:	b142      	cbz	r2, 8007ae4 <__ascii_mbtowc+0x1a>
 8007ad2:	b14b      	cbz	r3, 8007ae8 <__ascii_mbtowc+0x1e>
 8007ad4:	7813      	ldrb	r3, [r2, #0]
 8007ad6:	600b      	str	r3, [r1, #0]
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	1e10      	subs	r0, r2, #0
 8007adc:	bf18      	it	ne
 8007ade:	2001      	movne	r0, #1
 8007ae0:	b002      	add	sp, #8
 8007ae2:	4770      	bx	lr
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	e7fb      	b.n	8007ae0 <__ascii_mbtowc+0x16>
 8007ae8:	f06f 0001 	mvn.w	r0, #1
 8007aec:	e7f8      	b.n	8007ae0 <__ascii_mbtowc+0x16>

08007aee <_realloc_r>:
 8007aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	4607      	mov	r7, r0
 8007af4:	4614      	mov	r4, r2
 8007af6:	460d      	mov	r5, r1
 8007af8:	b921      	cbnz	r1, 8007b04 <_realloc_r+0x16>
 8007afa:	4611      	mov	r1, r2
 8007afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	f7fd be80 	b.w	8005804 <_malloc_r>
 8007b04:	b92a      	cbnz	r2, 8007b12 <_realloc_r+0x24>
 8007b06:	f7fd fe0b 	bl	8005720 <_free_r>
 8007b0a:	4625      	mov	r5, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b12:	f000 f840 	bl	8007b96 <_malloc_usable_size_r>
 8007b16:	4284      	cmp	r4, r0
 8007b18:	4606      	mov	r6, r0
 8007b1a:	d802      	bhi.n	8007b22 <_realloc_r+0x34>
 8007b1c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b20:	d8f4      	bhi.n	8007b0c <_realloc_r+0x1e>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7fd fe6d 	bl	8005804 <_malloc_r>
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	b908      	cbnz	r0, 8007b32 <_realloc_r+0x44>
 8007b2e:	4645      	mov	r5, r8
 8007b30:	e7ec      	b.n	8007b0c <_realloc_r+0x1e>
 8007b32:	42b4      	cmp	r4, r6
 8007b34:	4622      	mov	r2, r4
 8007b36:	4629      	mov	r1, r5
 8007b38:	bf28      	it	cs
 8007b3a:	4632      	movcs	r2, r6
 8007b3c:	f7ff fc46 	bl	80073cc <memcpy>
 8007b40:	4629      	mov	r1, r5
 8007b42:	4638      	mov	r0, r7
 8007b44:	f7fd fdec 	bl	8005720 <_free_r>
 8007b48:	e7f1      	b.n	8007b2e <_realloc_r+0x40>

08007b4a <__ascii_wctomb>:
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	b141      	cbz	r1, 8007b62 <__ascii_wctomb+0x18>
 8007b50:	2aff      	cmp	r2, #255	@ 0xff
 8007b52:	d904      	bls.n	8007b5e <__ascii_wctomb+0x14>
 8007b54:	228a      	movs	r2, #138	@ 0x8a
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	4770      	bx	lr
 8007b5e:	2001      	movs	r0, #1
 8007b60:	700a      	strb	r2, [r1, #0]
 8007b62:	4770      	bx	lr

08007b64 <fiprintf>:
 8007b64:	b40e      	push	{r1, r2, r3}
 8007b66:	b503      	push	{r0, r1, lr}
 8007b68:	4601      	mov	r1, r0
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	4805      	ldr	r0, [pc, #20]	@ (8007b84 <fiprintf+0x20>)
 8007b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b72:	6800      	ldr	r0, [r0, #0]
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	f000 f83d 	bl	8007bf4 <_vfiprintf_r>
 8007b7a:	b002      	add	sp, #8
 8007b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b80:	b003      	add	sp, #12
 8007b82:	4770      	bx	lr
 8007b84:	20000018 	.word	0x20000018

08007b88 <abort>:
 8007b88:	2006      	movs	r0, #6
 8007b8a:	b508      	push	{r3, lr}
 8007b8c:	f000 fa06 	bl	8007f9c <raise>
 8007b90:	2001      	movs	r0, #1
 8007b92:	f7f9 fcaa 	bl	80014ea <_exit>

08007b96 <_malloc_usable_size_r>:
 8007b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9a:	1f18      	subs	r0, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfbc      	itt	lt
 8007ba0:	580b      	ldrlt	r3, [r1, r0]
 8007ba2:	18c0      	addlt	r0, r0, r3
 8007ba4:	4770      	bx	lr

08007ba6 <__sfputc_r>:
 8007ba6:	6893      	ldr	r3, [r2, #8]
 8007ba8:	b410      	push	{r4}
 8007baa:	3b01      	subs	r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	6093      	str	r3, [r2, #8]
 8007bb0:	da07      	bge.n	8007bc2 <__sfputc_r+0x1c>
 8007bb2:	6994      	ldr	r4, [r2, #24]
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	db01      	blt.n	8007bbc <__sfputc_r+0x16>
 8007bb8:	290a      	cmp	r1, #10
 8007bba:	d102      	bne.n	8007bc2 <__sfputc_r+0x1c>
 8007bbc:	bc10      	pop	{r4}
 8007bbe:	f000 b931 	b.w	8007e24 <__swbuf_r>
 8007bc2:	6813      	ldr	r3, [r2, #0]
 8007bc4:	1c58      	adds	r0, r3, #1
 8007bc6:	6010      	str	r0, [r2, #0]
 8007bc8:	7019      	strb	r1, [r3, #0]
 8007bca:	4608      	mov	r0, r1
 8007bcc:	bc10      	pop	{r4}
 8007bce:	4770      	bx	lr

08007bd0 <__sfputs_r>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	4614      	mov	r4, r2
 8007bd8:	18d5      	adds	r5, r2, r3
 8007bda:	42ac      	cmp	r4, r5
 8007bdc:	d101      	bne.n	8007be2 <__sfputs_r+0x12>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e007      	b.n	8007bf2 <__sfputs_r+0x22>
 8007be2:	463a      	mov	r2, r7
 8007be4:	4630      	mov	r0, r6
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	f7ff ffdc 	bl	8007ba6 <__sfputc_r>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	d1f3      	bne.n	8007bda <__sfputs_r+0xa>
 8007bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bf4 <_vfiprintf_r>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	4698      	mov	r8, r3
 8007bfe:	4606      	mov	r6, r0
 8007c00:	b09d      	sub	sp, #116	@ 0x74
 8007c02:	b118      	cbz	r0, 8007c0c <_vfiprintf_r+0x18>
 8007c04:	6a03      	ldr	r3, [r0, #32]
 8007c06:	b90b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x18>
 8007c08:	f7fc fe00 	bl	800480c <__sinit>
 8007c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c0e:	07d9      	lsls	r1, r3, #31
 8007c10:	d405      	bmi.n	8007c1e <_vfiprintf_r+0x2a>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	059a      	lsls	r2, r3, #22
 8007c16:	d402      	bmi.n	8007c1e <_vfiprintf_r+0x2a>
 8007c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c1a:	f7fc ff10 	bl	8004a3e <__retarget_lock_acquire_recursive>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	071b      	lsls	r3, r3, #28
 8007c22:	d501      	bpl.n	8007c28 <_vfiprintf_r+0x34>
 8007c24:	692b      	ldr	r3, [r5, #16]
 8007c26:	b99b      	cbnz	r3, 8007c50 <_vfiprintf_r+0x5c>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 f938 	bl	8007ea0 <__swsetup_r>
 8007c30:	b170      	cbz	r0, 8007c50 <_vfiprintf_r+0x5c>
 8007c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c34:	07dc      	lsls	r4, r3, #31
 8007c36:	d504      	bpl.n	8007c42 <_vfiprintf_r+0x4e>
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	b01d      	add	sp, #116	@ 0x74
 8007c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c42:	89ab      	ldrh	r3, [r5, #12]
 8007c44:	0598      	lsls	r0, r3, #22
 8007c46:	d4f7      	bmi.n	8007c38 <_vfiprintf_r+0x44>
 8007c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c4a:	f7fc fef9 	bl	8004a40 <__retarget_lock_release_recursive>
 8007c4e:	e7f3      	b.n	8007c38 <_vfiprintf_r+0x44>
 8007c50:	2300      	movs	r3, #0
 8007c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c54:	2320      	movs	r3, #32
 8007c56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c5a:	2330      	movs	r3, #48	@ 0x30
 8007c5c:	f04f 0901 	mov.w	r9, #1
 8007c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e10 <_vfiprintf_r+0x21c>
 8007c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	469a      	mov	sl, r3
 8007c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c74:	b10a      	cbz	r2, 8007c7a <_vfiprintf_r+0x86>
 8007c76:	2a25      	cmp	r2, #37	@ 0x25
 8007c78:	d1f9      	bne.n	8007c6e <_vfiprintf_r+0x7a>
 8007c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c7e:	d00b      	beq.n	8007c98 <_vfiprintf_r+0xa4>
 8007c80:	465b      	mov	r3, fp
 8007c82:	4622      	mov	r2, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7ff ffa2 	bl	8007bd0 <__sfputs_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f000 80a7 	beq.w	8007de0 <_vfiprintf_r+0x1ec>
 8007c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c94:	445a      	add	r2, fp
 8007c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c98:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 809f 	beq.w	8007de0 <_vfiprintf_r+0x1ec>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cac:	f10a 0a01 	add.w	sl, sl, #1
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cba:	4654      	mov	r4, sl
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc2:	4853      	ldr	r0, [pc, #332]	@ (8007e10 <_vfiprintf_r+0x21c>)
 8007cc4:	f7fc febd 	bl	8004a42 <memchr>
 8007cc8:	9a04      	ldr	r2, [sp, #16]
 8007cca:	b9d8      	cbnz	r0, 8007d04 <_vfiprintf_r+0x110>
 8007ccc:	06d1      	lsls	r1, r2, #27
 8007cce:	bf44      	itt	mi
 8007cd0:	2320      	movmi	r3, #32
 8007cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd6:	0713      	lsls	r3, r2, #28
 8007cd8:	bf44      	itt	mi
 8007cda:	232b      	movmi	r3, #43	@ 0x2b
 8007cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce6:	d015      	beq.n	8007d14 <_vfiprintf_r+0x120>
 8007ce8:	4654      	mov	r4, sl
 8007cea:	2000      	movs	r0, #0
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	9a07      	ldr	r2, [sp, #28]
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cf8:	3b30      	subs	r3, #48	@ 0x30
 8007cfa:	2b09      	cmp	r3, #9
 8007cfc:	d94b      	bls.n	8007d96 <_vfiprintf_r+0x1a2>
 8007cfe:	b1b0      	cbz	r0, 8007d2e <_vfiprintf_r+0x13a>
 8007d00:	9207      	str	r2, [sp, #28]
 8007d02:	e014      	b.n	8007d2e <_vfiprintf_r+0x13a>
 8007d04:	eba0 0308 	sub.w	r3, r0, r8
 8007d08:	fa09 f303 	lsl.w	r3, r9, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	46a2      	mov	sl, r4
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	e7d2      	b.n	8007cba <_vfiprintf_r+0xc6>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	1d19      	adds	r1, r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	9103      	str	r1, [sp, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfbb      	ittet	lt
 8007d20:	425b      	neglt	r3, r3
 8007d22:	f042 0202 	orrlt.w	r2, r2, #2
 8007d26:	9307      	strge	r3, [sp, #28]
 8007d28:	9307      	strlt	r3, [sp, #28]
 8007d2a:	bfb8      	it	lt
 8007d2c:	9204      	strlt	r2, [sp, #16]
 8007d2e:	7823      	ldrb	r3, [r4, #0]
 8007d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d32:	d10a      	bne.n	8007d4a <_vfiprintf_r+0x156>
 8007d34:	7863      	ldrb	r3, [r4, #1]
 8007d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d38:	d132      	bne.n	8007da0 <_vfiprintf_r+0x1ac>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	3402      	adds	r4, #2
 8007d3e:	1d1a      	adds	r2, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	9203      	str	r2, [sp, #12]
 8007d44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e14 <_vfiprintf_r+0x220>
 8007d4e:	2203      	movs	r2, #3
 8007d50:	4650      	mov	r0, sl
 8007d52:	7821      	ldrb	r1, [r4, #0]
 8007d54:	f7fc fe75 	bl	8004a42 <memchr>
 8007d58:	b138      	cbz	r0, 8007d6a <_vfiprintf_r+0x176>
 8007d5a:	2240      	movs	r2, #64	@ 0x40
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	eba0 000a 	sub.w	r0, r0, sl
 8007d62:	4082      	lsls	r2, r0
 8007d64:	4313      	orrs	r3, r2
 8007d66:	3401      	adds	r4, #1
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6e:	2206      	movs	r2, #6
 8007d70:	4829      	ldr	r0, [pc, #164]	@ (8007e18 <_vfiprintf_r+0x224>)
 8007d72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d76:	f7fc fe64 	bl	8004a42 <memchr>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d03f      	beq.n	8007dfe <_vfiprintf_r+0x20a>
 8007d7e:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <_vfiprintf_r+0x228>)
 8007d80:	bb1b      	cbnz	r3, 8007dca <_vfiprintf_r+0x1d6>
 8007d82:	9b03      	ldr	r3, [sp, #12]
 8007d84:	3307      	adds	r3, #7
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	9303      	str	r3, [sp, #12]
 8007d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d90:	443b      	add	r3, r7
 8007d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d94:	e76a      	b.n	8007c6c <_vfiprintf_r+0x78>
 8007d96:	460c      	mov	r4, r1
 8007d98:	2001      	movs	r0, #1
 8007d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d9e:	e7a8      	b.n	8007cf2 <_vfiprintf_r+0xfe>
 8007da0:	2300      	movs	r3, #0
 8007da2:	f04f 0c0a 	mov.w	ip, #10
 8007da6:	4619      	mov	r1, r3
 8007da8:	3401      	adds	r4, #1
 8007daa:	9305      	str	r3, [sp, #20]
 8007dac:	4620      	mov	r0, r4
 8007dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db2:	3a30      	subs	r2, #48	@ 0x30
 8007db4:	2a09      	cmp	r2, #9
 8007db6:	d903      	bls.n	8007dc0 <_vfiprintf_r+0x1cc>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0c6      	beq.n	8007d4a <_vfiprintf_r+0x156>
 8007dbc:	9105      	str	r1, [sp, #20]
 8007dbe:	e7c4      	b.n	8007d4a <_vfiprintf_r+0x156>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dc8:	e7f0      	b.n	8007dac <_vfiprintf_r+0x1b8>
 8007dca:	ab03      	add	r3, sp, #12
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	462a      	mov	r2, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4b13      	ldr	r3, [pc, #76]	@ (8007e20 <_vfiprintf_r+0x22c>)
 8007dd4:	a904      	add	r1, sp, #16
 8007dd6:	f7fb fec7 	bl	8003b68 <_printf_float>
 8007dda:	4607      	mov	r7, r0
 8007ddc:	1c78      	adds	r0, r7, #1
 8007dde:	d1d6      	bne.n	8007d8e <_vfiprintf_r+0x19a>
 8007de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007de2:	07d9      	lsls	r1, r3, #31
 8007de4:	d405      	bmi.n	8007df2 <_vfiprintf_r+0x1fe>
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	059a      	lsls	r2, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_vfiprintf_r+0x1fe>
 8007dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dee:	f7fc fe27 	bl	8004a40 <__retarget_lock_release_recursive>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	065b      	lsls	r3, r3, #25
 8007df6:	f53f af1f 	bmi.w	8007c38 <_vfiprintf_r+0x44>
 8007dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dfc:	e71e      	b.n	8007c3c <_vfiprintf_r+0x48>
 8007dfe:	ab03      	add	r3, sp, #12
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	462a      	mov	r2, r5
 8007e04:	4630      	mov	r0, r6
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <_vfiprintf_r+0x22c>)
 8007e08:	a904      	add	r1, sp, #16
 8007e0a:	f7fc f94b 	bl	80040a4 <_printf_i>
 8007e0e:	e7e4      	b.n	8007dda <_vfiprintf_r+0x1e6>
 8007e10:	08008277 	.word	0x08008277
 8007e14:	0800827d 	.word	0x0800827d
 8007e18:	08008281 	.word	0x08008281
 8007e1c:	08003b69 	.word	0x08003b69
 8007e20:	08007bd1 	.word	0x08007bd1

08007e24 <__swbuf_r>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	460e      	mov	r6, r1
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	b118      	cbz	r0, 8007e36 <__swbuf_r+0x12>
 8007e2e:	6a03      	ldr	r3, [r0, #32]
 8007e30:	b90b      	cbnz	r3, 8007e36 <__swbuf_r+0x12>
 8007e32:	f7fc fceb 	bl	800480c <__sinit>
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	071a      	lsls	r2, r3, #28
 8007e3e:	d501      	bpl.n	8007e44 <__swbuf_r+0x20>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	b943      	cbnz	r3, 8007e56 <__swbuf_r+0x32>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f82a 	bl	8007ea0 <__swsetup_r>
 8007e4c:	b118      	cbz	r0, 8007e56 <__swbuf_r+0x32>
 8007e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e52:	4638      	mov	r0, r7
 8007e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	6922      	ldr	r2, [r4, #16]
 8007e5a:	b2f6      	uxtb	r6, r6
 8007e5c:	1a98      	subs	r0, r3, r2
 8007e5e:	6963      	ldr	r3, [r4, #20]
 8007e60:	4637      	mov	r7, r6
 8007e62:	4283      	cmp	r3, r0
 8007e64:	dc05      	bgt.n	8007e72 <__swbuf_r+0x4e>
 8007e66:	4621      	mov	r1, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f7ff fa4b 	bl	8007304 <_fflush_r>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d1ed      	bne.n	8007e4e <__swbuf_r+0x2a>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	60a3      	str	r3, [r4, #8]
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	6022      	str	r2, [r4, #0]
 8007e7e:	701e      	strb	r6, [r3, #0]
 8007e80:	6962      	ldr	r2, [r4, #20]
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d004      	beq.n	8007e92 <__swbuf_r+0x6e>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d5e1      	bpl.n	8007e52 <__swbuf_r+0x2e>
 8007e8e:	2e0a      	cmp	r6, #10
 8007e90:	d1df      	bne.n	8007e52 <__swbuf_r+0x2e>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	f7ff fa35 	bl	8007304 <_fflush_r>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d0d9      	beq.n	8007e52 <__swbuf_r+0x2e>
 8007e9e:	e7d6      	b.n	8007e4e <__swbuf_r+0x2a>

08007ea0 <__swsetup_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4b29      	ldr	r3, [pc, #164]	@ (8007f48 <__swsetup_r+0xa8>)
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	b118      	cbz	r0, 8007eb4 <__swsetup_r+0x14>
 8007eac:	6a03      	ldr	r3, [r0, #32]
 8007eae:	b90b      	cbnz	r3, 8007eb4 <__swsetup_r+0x14>
 8007eb0:	f7fc fcac 	bl	800480c <__sinit>
 8007eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb8:	0719      	lsls	r1, r3, #28
 8007eba:	d422      	bmi.n	8007f02 <__swsetup_r+0x62>
 8007ebc:	06da      	lsls	r2, r3, #27
 8007ebe:	d407      	bmi.n	8007ed0 <__swsetup_r+0x30>
 8007ec0:	2209      	movs	r2, #9
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	e033      	b.n	8007f38 <__swsetup_r+0x98>
 8007ed0:	0758      	lsls	r0, r3, #29
 8007ed2:	d512      	bpl.n	8007efa <__swsetup_r+0x5a>
 8007ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed6:	b141      	cbz	r1, 8007eea <__swsetup_r+0x4a>
 8007ed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007edc:	4299      	cmp	r1, r3
 8007ede:	d002      	beq.n	8007ee6 <__swsetup_r+0x46>
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f7fd fc1d 	bl	8005720 <_free_r>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f043 0308 	orr.w	r3, r3, #8
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	b94b      	cbnz	r3, 8007f1a <__swsetup_r+0x7a>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f10:	d003      	beq.n	8007f1a <__swsetup_r+0x7a>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 f882 	bl	800801e <__smakebuf_r>
 8007f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1e:	f013 0201 	ands.w	r2, r3, #1
 8007f22:	d00a      	beq.n	8007f3a <__swsetup_r+0x9a>
 8007f24:	2200      	movs	r2, #0
 8007f26:	60a2      	str	r2, [r4, #8]
 8007f28:	6962      	ldr	r2, [r4, #20]
 8007f2a:	4252      	negs	r2, r2
 8007f2c:	61a2      	str	r2, [r4, #24]
 8007f2e:	6922      	ldr	r2, [r4, #16]
 8007f30:	b942      	cbnz	r2, 8007f44 <__swsetup_r+0xa4>
 8007f32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f36:	d1c5      	bne.n	8007ec4 <__swsetup_r+0x24>
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	0799      	lsls	r1, r3, #30
 8007f3c:	bf58      	it	pl
 8007f3e:	6962      	ldrpl	r2, [r4, #20]
 8007f40:	60a2      	str	r2, [r4, #8]
 8007f42:	e7f4      	b.n	8007f2e <__swsetup_r+0x8e>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e7f7      	b.n	8007f38 <__swsetup_r+0x98>
 8007f48:	20000018 	.word	0x20000018

08007f4c <_raise_r>:
 8007f4c:	291f      	cmp	r1, #31
 8007f4e:	b538      	push	{r3, r4, r5, lr}
 8007f50:	4605      	mov	r5, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	d904      	bls.n	8007f60 <_raise_r+0x14>
 8007f56:	2316      	movs	r3, #22
 8007f58:	6003      	str	r3, [r0, #0]
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f62:	b112      	cbz	r2, 8007f6a <_raise_r+0x1e>
 8007f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f68:	b94b      	cbnz	r3, 8007f7e <_raise_r+0x32>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f830 	bl	8007fd0 <_getpid_r>
 8007f70:	4622      	mov	r2, r4
 8007f72:	4601      	mov	r1, r0
 8007f74:	4628      	mov	r0, r5
 8007f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7a:	f000 b817 	b.w	8007fac <_kill_r>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d00a      	beq.n	8007f98 <_raise_r+0x4c>
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	d103      	bne.n	8007f8e <_raise_r+0x42>
 8007f86:	2316      	movs	r3, #22
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	e7e7      	b.n	8007f5e <_raise_r+0x12>
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4620      	mov	r0, r4
 8007f92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f96:	4798      	blx	r3
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e7e0      	b.n	8007f5e <_raise_r+0x12>

08007f9c <raise>:
 8007f9c:	4b02      	ldr	r3, [pc, #8]	@ (8007fa8 <raise+0xc>)
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	f7ff bfd3 	b.w	8007f4c <_raise_r>
 8007fa6:	bf00      	nop
 8007fa8:	20000018 	.word	0x20000018

08007fac <_kill_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	2300      	movs	r3, #0
 8007fb0:	4d06      	ldr	r5, [pc, #24]	@ (8007fcc <_kill_r+0x20>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	f7f9 fa86 	bl	80014ca <_kill>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	d102      	bne.n	8007fc8 <_kill_r+0x1c>
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	b103      	cbz	r3, 8007fc8 <_kill_r+0x1c>
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
 8007fca:	bf00      	nop
 8007fcc:	200003d8 	.word	0x200003d8

08007fd0 <_getpid_r>:
 8007fd0:	f7f9 ba74 	b.w	80014bc <_getpid>

08007fd4 <__swhatbuf_r>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	4615      	mov	r5, r2
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	461e      	mov	r6, r3
 8007fe2:	b096      	sub	sp, #88	@ 0x58
 8007fe4:	da0c      	bge.n	8008000 <__swhatbuf_r+0x2c>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fee:	bf14      	ite	ne
 8007ff0:	2340      	movne	r3, #64	@ 0x40
 8007ff2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	6031      	str	r1, [r6, #0]
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	b016      	add	sp, #88	@ 0x58
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	466a      	mov	r2, sp
 8008002:	f000 f849 	bl	8008098 <_fstat_r>
 8008006:	2800      	cmp	r0, #0
 8008008:	dbed      	blt.n	8007fe6 <__swhatbuf_r+0x12>
 800800a:	9901      	ldr	r1, [sp, #4]
 800800c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008010:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008014:	4259      	negs	r1, r3
 8008016:	4159      	adcs	r1, r3
 8008018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800801c:	e7eb      	b.n	8007ff6 <__swhatbuf_r+0x22>

0800801e <__smakebuf_r>:
 800801e:	898b      	ldrh	r3, [r1, #12]
 8008020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008022:	079d      	lsls	r5, r3, #30
 8008024:	4606      	mov	r6, r0
 8008026:	460c      	mov	r4, r1
 8008028:	d507      	bpl.n	800803a <__smakebuf_r+0x1c>
 800802a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2301      	movs	r3, #1
 8008034:	6163      	str	r3, [r4, #20]
 8008036:	b003      	add	sp, #12
 8008038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803a:	466a      	mov	r2, sp
 800803c:	ab01      	add	r3, sp, #4
 800803e:	f7ff ffc9 	bl	8007fd4 <__swhatbuf_r>
 8008042:	9f00      	ldr	r7, [sp, #0]
 8008044:	4605      	mov	r5, r0
 8008046:	4639      	mov	r1, r7
 8008048:	4630      	mov	r0, r6
 800804a:	f7fd fbdb 	bl	8005804 <_malloc_r>
 800804e:	b948      	cbnz	r0, 8008064 <__smakebuf_r+0x46>
 8008050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008054:	059a      	lsls	r2, r3, #22
 8008056:	d4ee      	bmi.n	8008036 <__smakebuf_r+0x18>
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	f043 0302 	orr.w	r3, r3, #2
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	e7e2      	b.n	800802a <__smakebuf_r+0xc>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800806a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	b15b      	cbz	r3, 800808e <__smakebuf_r+0x70>
 8008076:	4630      	mov	r0, r6
 8008078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807c:	f000 f81e 	bl	80080bc <_isatty_r>
 8008080:	b128      	cbz	r0, 800808e <__smakebuf_r+0x70>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f023 0303 	bic.w	r3, r3, #3
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	431d      	orrs	r5, r3
 8008092:	81a5      	strh	r5, [r4, #12]
 8008094:	e7cf      	b.n	8008036 <__smakebuf_r+0x18>
	...

08008098 <_fstat_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	2300      	movs	r3, #0
 800809c:	4d06      	ldr	r5, [pc, #24]	@ (80080b8 <_fstat_r+0x20>)
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	f7f9 fa6f 	bl	8001588 <_fstat>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d102      	bne.n	80080b4 <_fstat_r+0x1c>
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	b103      	cbz	r3, 80080b4 <_fstat_r+0x1c>
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	200003d8 	.word	0x200003d8

080080bc <_isatty_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	2300      	movs	r3, #0
 80080c0:	4d05      	ldr	r5, [pc, #20]	@ (80080d8 <_isatty_r+0x1c>)
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f9 fa6d 	bl	80015a6 <_isatty>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_isatty_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_isatty_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	200003d8 	.word	0x200003d8

080080dc <_init>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr

080080e8 <_fini>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr
