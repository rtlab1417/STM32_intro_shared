
10_IIC_Oled_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08002088  08002088  00003088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002838  08002838  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002838  08002838  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002838  08002838  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002838  08002838  00003838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800283c  0800283c  0000383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002840  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000000c  0800284c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800284c  00004488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e81  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001651  00000000  00000000  0000aeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0000c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ba  00000000  00000000  0000cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001668f  00000000  00000000  0000d252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a06b  00000000  00000000  000238e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008273a  00000000  00000000  0002d94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  000b00cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b1ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002070 	.word	0x08002070

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002070 	.word	0x08002070

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char myText[] = "Hello OLED";
 8000152:	4a11      	ldr	r2, [pc, #68]	@ (8000198 <main+0x4c>)
 8000154:	1d3b      	adds	r3, r7, #4
 8000156:	ca07      	ldmia	r2, {r0, r1, r2}
 8000158:	c303      	stmia	r3!, {r0, r1}
 800015a:	801a      	strh	r2, [r3, #0]
 800015c:	3302      	adds	r3, #2
 800015e:	0c12      	lsrs	r2, r2, #16
 8000160:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbc3 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f81b 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f88d 	bl	8000288 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 f85d 	bl	800022c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000172:	f000 f9bd 	bl	80004f0 <ssd1306_Init>

  //test only
//  ssd1306_Fill(White);
//  ssd1306_UpdateScreen();
  ssd1306_SetCursor(5, 5);
 8000176:	2105      	movs	r1, #5
 8000178:	2005      	movs	r0, #5
 800017a:	f000 fb6d 	bl	8000858 <ssd1306_SetCursor>
  retVal = ssd1306_WriteString(myText, Font_7x10, White);
 800017e:	4b07      	ldr	r3, [pc, #28]	@ (800019c <main+0x50>)
 8000180:	1d38      	adds	r0, r7, #4
 8000182:	2201      	movs	r2, #1
 8000184:	9200      	str	r2, [sp, #0]
 8000186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000188:	f000 fb40 	bl	800080c <ssd1306_WriteString>
 800018c:	4603      	mov	r3, r0
 800018e:	73fb      	strb	r3, [r7, #15]

  ssd1306_UpdateScreen();
 8000190:	f000 fa30 	bl	80005f4 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000194:	bf00      	nop
 8000196:	e7fd      	b.n	8000194 <main+0x48>
 8000198:	08002088 	.word	0x08002088
 800019c:	08002818 	.word	0x08002818

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	@ 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	@ 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 ff32 	bl	8002018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c2:	2301      	movs	r3, #1
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d4:	2302      	movs	r3, #2
 80001d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0318 	add.w	r3, r7, #24
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fb19 	bl	8001820 <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f4:	f000 f876 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2102      	movs	r1, #2
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fd86 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021e:	f000 f861 	bl	80002e4 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	@ 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <MX_I2C1_Init+0x50>)
 8000232:	4a13      	ldr	r2, [pc, #76]	@ (8000280 <MX_I2C1_Init+0x54>)
 8000234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000236:	4b11      	ldr	r3, [pc, #68]	@ (800027c <MX_I2C1_Init+0x50>)
 8000238:	4a12      	ldr	r2, [pc, #72]	@ (8000284 <MX_I2C1_Init+0x58>)
 800023a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800023c:	4b0f      	ldr	r3, [pc, #60]	@ (800027c <MX_I2C1_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000242:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <MX_I2C1_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <MX_I2C1_Init+0x50>)
 800024a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800024e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000250:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <MX_I2C1_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000256:	4b09      	ldr	r3, [pc, #36]	@ (800027c <MX_I2C1_Init+0x50>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000262:	4b06      	ldr	r3, [pc, #24]	@ (800027c <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <MX_I2C1_Init+0x50>)
 800026a:	f000 fe2d 	bl	8000ec8 <HAL_I2C_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000274:	f000 f836 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000028 	.word	0x20000028
 8000280:	40005400 	.word	0x40005400
 8000284:	00061a80 	.word	0x00061a80

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <MX_GPIO_Init+0x58>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a13      	ldr	r2, [pc, #76]	@ (80002e0 <MX_GPIO_Init+0x58>)
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <MX_GPIO_Init+0x58>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a0d      	ldr	r2, [pc, #52]	@ (80002e0 <MX_GPIO_Init+0x58>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <MX_GPIO_Init+0x58>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <MX_GPIO_Init+0x58>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a07      	ldr	r2, [pc, #28]	@ (80002e0 <MX_GPIO_Init+0x58>)
 80002c4:	f043 0308 	orr.w	r3, r3, #8
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <MX_GPIO_Init+0x58>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0308 	and.w	r3, r3, #8
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <Error_Handler+0x8>

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	@ (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	@ (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	@ (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a15      	ldr	r2, [pc, #84]	@ (80003c4 <HAL_I2C_MspInit+0x70>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d123      	bne.n	80003bc <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <HAL_I2C_MspInit+0x74>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a13      	ldr	r2, [pc, #76]	@ (80003c8 <HAL_I2C_MspInit+0x74>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <HAL_I2C_MspInit+0x74>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800038c:	23c0      	movs	r3, #192	@ 0xc0
 800038e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000390:	2312      	movs	r3, #18
 8000392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000394:	2303      	movs	r3, #3
 8000396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	480b      	ldr	r0, [pc, #44]	@ (80003cc <HAL_I2C_MspInit+0x78>)
 80003a0:	f000 fc0e 	bl	8000bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a4:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <HAL_I2C_MspInit+0x74>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	4a07      	ldr	r2, [pc, #28]	@ (80003c8 <HAL_I2C_MspInit+0x74>)
 80003aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ae:	61d3      	str	r3, [r2, #28]
 80003b0:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <HAL_I2C_MspInit+0x74>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40005400 	.word	0x40005400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <NMI_Handler+0x4>

080003d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <MemManage_Handler+0x4>

080003e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000420:	f000 faaa 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000434:	f7ff fff8 	bl	8000428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480b      	ldr	r0, [pc, #44]	@ (8000468 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800043a:	490c      	ldr	r1, [pc, #48]	@ (800046c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800043c:	4a0c      	ldr	r2, [pc, #48]	@ (8000470 <LoopFillZerobss+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000450:	4c09      	ldr	r4, [pc, #36]	@ (8000478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800045e:	f001 fde3 	bl	8002028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff fe73 	bl	800014c <main>
  bx lr
 8000466:	4770      	bx	lr
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000470:	08002840 	.word	0x08002840
  ldr r2, =_sbss
 8000474:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000478:	20000488 	.word	0x20000488

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>

0800047e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
	...

0800048c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af04      	add	r7, sp, #16
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	9302      	str	r3, [sp, #8]
 800049c:	2301      	movs	r3, #1
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2301      	movs	r3, #1
 80004a6:	2200      	movs	r2, #0
 80004a8:	2178      	movs	r1, #120	@ 0x78
 80004aa:	4803      	ldr	r0, [pc, #12]	@ (80004b8 <ssd1306_WriteCommand+0x2c>)
 80004ac:	f000 fe50 	bl	8001150 <HAL_I2C_Mem_Write>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028

080004bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af04      	add	r7, sp, #16
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	f04f 32ff 	mov.w	r2, #4294967295
 80004ce:	9202      	str	r2, [sp, #8]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2301      	movs	r3, #1
 80004d8:	2240      	movs	r2, #64	@ 0x40
 80004da:	2178      	movs	r1, #120	@ 0x78
 80004dc:	4803      	ldr	r0, [pc, #12]	@ (80004ec <ssd1306_WriteData+0x30>)
 80004de:	f000 fe37 	bl	8001150 <HAL_I2C_Mem_Write>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028

080004f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80004f4:	f7ff ffc3 	bl	800047e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	@ 0x64
 80004fa:	f000 fa59 	bl	80009b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 f9d6 	bl	80008b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000504:	2020      	movs	r0, #32
 8000506:	f7ff ffc1 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ffbe 	bl	800048c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000510:	20b0      	movs	r0, #176	@ 0xb0
 8000512:	f7ff ffbb 	bl	800048c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000516:	20c8      	movs	r0, #200	@ 0xc8
 8000518:	f7ff ffb8 	bl	800048c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800051c:	2000      	movs	r0, #0
 800051e:	f7ff ffb5 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000522:	2010      	movs	r0, #16
 8000524:	f7ff ffb2 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000528:	2040      	movs	r0, #64	@ 0x40
 800052a:	f7ff ffaf 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800052e:	20ff      	movs	r0, #255	@ 0xff
 8000530:	f000 f9aa 	bl	8000888 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000534:	20a1      	movs	r0, #161	@ 0xa1
 8000536:	f7ff ffa9 	bl	800048c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800053a:	20a6      	movs	r0, #166	@ 0xa6
 800053c:	f7ff ffa6 	bl	800048c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000540:	20a8      	movs	r0, #168	@ 0xa8
 8000542:	f7ff ffa3 	bl	800048c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000546:	203f      	movs	r0, #63	@ 0x3f
 8000548:	f7ff ffa0 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800054c:	20a4      	movs	r0, #164	@ 0xa4
 800054e:	f7ff ff9d 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000552:	20d3      	movs	r0, #211	@ 0xd3
 8000554:	f7ff ff9a 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff ff97 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800055e:	20d5      	movs	r0, #213	@ 0xd5
 8000560:	f7ff ff94 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000564:	20f0      	movs	r0, #240	@ 0xf0
 8000566:	f7ff ff91 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800056a:	20d9      	movs	r0, #217	@ 0xd9
 800056c:	f7ff ff8e 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000570:	2022      	movs	r0, #34	@ 0x22
 8000572:	f7ff ff8b 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000576:	20da      	movs	r0, #218	@ 0xda
 8000578:	f7ff ff88 	bl	800048c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800057c:	2012      	movs	r0, #18
 800057e:	f7ff ff85 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000582:	20db      	movs	r0, #219	@ 0xdb
 8000584:	f7ff ff82 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000588:	2020      	movs	r0, #32
 800058a:	f7ff ff7f 	bl	800048c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800058e:	208d      	movs	r0, #141	@ 0x8d
 8000590:	f7ff ff7c 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000594:	2014      	movs	r0, #20
 8000596:	f7ff ff79 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800059a:	2001      	movs	r0, #1
 800059c:	f000 f988 	bl	80008b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f80f 	bl	80005c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80005a6:	f000 f825 	bl	80005f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80005aa:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <ssd1306_Init+0xd0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <ssd1306_Init+0xd0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80005b6:	4b02      	ldr	r3, [pc, #8]	@ (80005c0 <ssd1306_Init+0xd0>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	711a      	strb	r2, [r3, #4]
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000047c 	.word	0x2000047c

080005c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <ssd1306_Fill+0x14>
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <ssd1306_Fill+0x16>
 80005d8:	23ff      	movs	r3, #255	@ 0xff
 80005da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005de:	4619      	mov	r1, r3
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <ssd1306_Fill+0x2c>)
 80005e2:	f001 fd19 	bl	8002018 <memset>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e016      	b.n	800062e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3b50      	subs	r3, #80	@ 0x50
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff40 	bl	800048c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ff3d 	bl	800048c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000612:	2010      	movs	r0, #16
 8000614:	f7ff ff3a 	bl	800048c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	01db      	lsls	r3, r3, #7
 800061c:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <ssd1306_UpdateScreen+0x4c>)
 800061e:	4413      	add	r3, r2
 8000620:	2180      	movs	r1, #128	@ 0x80
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff4a 	bl	80004bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	3301      	adds	r3, #1
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b07      	cmp	r3, #7
 8000632:	d9e5      	bls.n	8000600 <ssd1306_UpdateScreen+0xc>
    }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000007c 	.word	0x2000007c

08000644 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	460b      	mov	r3, r1
 8000650:	71bb      	strb	r3, [r7, #6]
 8000652:	4613      	mov	r3, r2
 8000654:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db3d      	blt.n	80006da <ssd1306_DrawPixel+0x96>
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b3f      	cmp	r3, #63	@ 0x3f
 8000662:	d83a      	bhi.n	80006da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d11a      	bne.n	80006a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2d8      	uxtb	r0, r3
 8000672:	4603      	mov	r3, r0
 8000674:	01db      	lsls	r3, r3, #7
 8000676:	4413      	add	r3, r2
 8000678:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <ssd1306_DrawPixel+0xa0>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	b25a      	sxtb	r2, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	f003 0307 	and.w	r3, r3, #7
 8000684:	2101      	movs	r1, #1
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	b25b      	sxtb	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b259      	sxtb	r1, r3
 8000690:	79fa      	ldrb	r2, [r7, #7]
 8000692:	4603      	mov	r3, r0
 8000694:	01db      	lsls	r3, r3, #7
 8000696:	4413      	add	r3, r2
 8000698:	b2c9      	uxtb	r1, r1
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <ssd1306_DrawPixel+0xa0>)
 800069c:	54d1      	strb	r1, [r2, r3]
 800069e:	e01d      	b.n	80006dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	b2d8      	uxtb	r0, r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	01db      	lsls	r3, r3, #7
 80006ac:	4413      	add	r3, r2
 80006ae:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <ssd1306_DrawPixel+0xa0>)
 80006b0:	5cd3      	ldrb	r3, [r2, r3]
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	43db      	mvns	r3, r3
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	4013      	ands	r3, r2
 80006c8:	b259      	sxtb	r1, r3
 80006ca:	79fa      	ldrb	r2, [r7, #7]
 80006cc:	4603      	mov	r3, r0
 80006ce:	01db      	lsls	r3, r3, #7
 80006d0:	4413      	add	r3, r2
 80006d2:	b2c9      	uxtb	r1, r1
 80006d4:	4a03      	ldr	r2, [pc, #12]	@ (80006e4 <ssd1306_DrawPixel+0xa0>)
 80006d6:	54d1      	strb	r1, [r2, r3]
 80006d8:	e000      	b.n	80006dc <ssd1306_DrawPixel+0x98>
        return;
 80006da:	bf00      	nop
    }
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	2000007c 	.word	0x2000007c

080006e8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4604      	mov	r4, r0
 80006f0:	4638      	mov	r0, r7
 80006f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80006f6:	4623      	mov	r3, r4
 80006f8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2b1f      	cmp	r3, #31
 80006fe:	d902      	bls.n	8000706 <ssd1306_WriteChar+0x1e>
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	2b7e      	cmp	r3, #126	@ 0x7e
 8000704:	d901      	bls.n	800070a <ssd1306_WriteChar+0x22>
        return 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e079      	b.n	80007fe <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <ssd1306_WriteChar+0x34>
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3b20      	subs	r3, #32
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	e000      	b.n	800071e <ssd1306_WriteChar+0x36>
 800071c:	783b      	ldrb	r3, [r7, #0]
 800071e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000720:	4b39      	ldr	r3, [pc, #228]	@ (8000808 <ssd1306_WriteChar+0x120>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	4413      	add	r3, r2
 800072a:	2b80      	cmp	r3, #128	@ 0x80
 800072c:	dc06      	bgt.n	800073c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800072e:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <ssd1306_WriteChar+0x120>)
 8000730:	885b      	ldrh	r3, [r3, #2]
 8000732:	461a      	mov	r2, r3
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000738:	2b40      	cmp	r3, #64	@ 0x40
 800073a:	dd01      	ble.n	8000740 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e05e      	b.n	80007fe <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	e04d      	b.n	80007e2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	3b20      	subs	r3, #32
 800074c:	7879      	ldrb	r1, [r7, #1]
 800074e:	fb01 f303 	mul.w	r3, r1, r3
 8000752:	4619      	mov	r1, r3
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	440b      	add	r3, r1
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	e036      	b.n	80007d4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d013      	beq.n	800079e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000776:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <ssd1306_WriteChar+0x120>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	b2d8      	uxtb	r0, r3
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <ssd1306_WriteChar+0x120>)
 8000786:	885b      	ldrh	r3, [r3, #2]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000796:	4619      	mov	r1, r3
 8000798:	f7ff ff54 	bl	8000644 <ssd1306_DrawPixel>
 800079c:	e017      	b.n	80007ce <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <ssd1306_WriteChar+0x120>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	b2d8      	uxtb	r0, r3
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <ssd1306_WriteChar+0x120>)
 80007ae:	885b      	ldrh	r3, [r3, #2]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	b2d9      	uxtb	r1, r3
 80007ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf0c      	ite	eq
 80007c2:	2301      	moveq	r3, #1
 80007c4:	2300      	movne	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	f7ff ff3b 	bl	8000644 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3c4      	bcc.n	8000766 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	3301      	adds	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	787b      	ldrb	r3, [r7, #1]
 80007e4:	461a      	mov	r2, r3
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d3ac      	bcc.n	8000746 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <ssd1306_WriteChar+0x120>)
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <ssd1306_WriteChar+0x120>)
 80007fa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	@ 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	bf00      	nop
 8000808:	2000047c 	.word	0x2000047c

0800080c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	4638      	mov	r0, r7
 8000816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800081a:	e013      	b.n	8000844 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	7818      	ldrb	r0, [r3, #0]
 8000820:	7e3b      	ldrb	r3, [r7, #24]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	463b      	mov	r3, r7
 8000826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000828:	f7ff ff5e 	bl	80006e8 <ssd1306_WriteChar>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	429a      	cmp	r2, r3
 8000836:	d002      	beq.n	800083e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	e008      	b.n	8000850 <ssd1306_WriteString+0x44>
        }
        str++;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e7      	bne.n	800081c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	781b      	ldrb	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <ssd1306_SetCursor+0x2c>)
 800086e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b03      	ldr	r3, [pc, #12]	@ (8000884 <ssd1306_SetCursor+0x2c>)
 8000876:	805a      	strh	r2, [r3, #2]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000047c 	.word	0x2000047c

08000888 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000892:	2381      	movs	r3, #129	@ 0x81
 8000894:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fdf7 	bl	800048c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fdf3 	bl	800048c <ssd1306_WriteCommand>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d005      	beq.n	80008cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80008c0:	23af      	movs	r3, #175	@ 0xaf
 80008c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <ssd1306_SetDisplayOn+0x38>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	715a      	strb	r2, [r3, #5]
 80008ca:	e004      	b.n	80008d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80008cc:	23ae      	movs	r3, #174	@ 0xae
 80008ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <ssd1306_SetDisplayOn+0x38>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fdd7 	bl	800048c <ssd1306_WriteCommand>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000047c 	.word	0x2000047c

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f92b 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fcf2 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f935 	bl	8000ba6 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f90b 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000008 	.word	0x20000008
 8000998:	20000484 	.word	0x20000484

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000484 	.word	0x20000484

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff0 	bl	800099c <HAL_GetTick>
 80009bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_Delay+0x44>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d6:	bf00      	nop
 80009d8:	f7ff ffe0 	bl	800099c <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff90 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff49 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5e 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff90 	bl	8000ab0 <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5f 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b08b      	sub	sp, #44	@ 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e169      	b.n	8000ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8158 	bne.w	8000ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4a9a      	ldr	r2, [pc, #616]	@ (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d05e      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000bfc:	4a98      	ldr	r2, [pc, #608]	@ (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d875      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c02:	4a98      	ldr	r2, [pc, #608]	@ (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d058      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c08:	4a96      	ldr	r2, [pc, #600]	@ (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d86f      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c0e:	4a96      	ldr	r2, [pc, #600]	@ (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d052      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c14:	4a94      	ldr	r2, [pc, #592]	@ (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d869      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c1a:	4a94      	ldr	r2, [pc, #592]	@ (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d04c      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c20:	4a92      	ldr	r2, [pc, #584]	@ (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d863      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c26:	4a92      	ldr	r2, [pc, #584]	@ (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d046      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c2c:	4a90      	ldr	r2, [pc, #576]	@ (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d85d      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d82a      	bhi.n	8000c8c <HAL_GPIO_Init+0xcc>
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d859      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c40 <HAL_GPIO_Init+0x80>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000c95 	.word	0x08000c95
 8000c48:	08000ca7 	.word	0x08000ca7
 8000c4c:	08000ce9 	.word	0x08000ce9
 8000c50:	08000cef 	.word	0x08000cef
 8000c54:	08000cef 	.word	0x08000cef
 8000c58:	08000cef 	.word	0x08000cef
 8000c5c:	08000cef 	.word	0x08000cef
 8000c60:	08000cef 	.word	0x08000cef
 8000c64:	08000cef 	.word	0x08000cef
 8000c68:	08000cef 	.word	0x08000cef
 8000c6c:	08000cef 	.word	0x08000cef
 8000c70:	08000cef 	.word	0x08000cef
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cef 	.word	0x08000cef
 8000c7c:	08000cef 	.word	0x08000cef
 8000c80:	08000cef 	.word	0x08000cef
 8000c84:	08000c9d 	.word	0x08000c9d
 8000c88:	08000cb1 	.word	0x08000cb1
 8000c8c:	4a79      	ldr	r2, [pc, #484]	@ (8000e74 <HAL_GPIO_Init+0x2b4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c92:	e02c      	b.n	8000cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	623b      	str	r3, [r7, #32]
          break;
 8000c9a:	e029      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	623b      	str	r3, [r7, #32]
          break;
 8000ca4:	e024      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	3308      	adds	r3, #8
 8000cac:	623b      	str	r3, [r7, #32]
          break;
 8000cae:	e01f      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	330c      	adds	r3, #12
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e01a      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e013      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d105      	bne.n	8000cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	611a      	str	r2, [r3, #16]
          break;
 8000cda:	e009      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	615a      	str	r2, [r3, #20]
          break;
 8000ce6:	e003      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          break;
 8000cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2bff      	cmp	r3, #255	@ 0xff
 8000cf4:	d801      	bhi.n	8000cfa <HAL_GPIO_Init+0x13a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	e001      	b.n	8000cfe <HAL_GPIO_Init+0x13e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2bff      	cmp	r3, #255	@ 0xff
 8000d04:	d802      	bhi.n	8000d0c <HAL_GPIO_Init+0x14c>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x152>
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0e:	3b08      	subs	r3, #8
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	210f      	movs	r1, #15
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	401a      	ands	r2, r3
 8000d24:	6a39      	ldr	r1, [r7, #32]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 80b1 	beq.w	8000ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d40:	4b4d      	ldr	r3, [pc, #308]	@ (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a4c      	ldr	r2, [pc, #304]	@ (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d58:	4a48      	ldr	r2, [pc, #288]	@ (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a40      	ldr	r2, [pc, #256]	@ (8000e80 <HAL_GPIO_Init+0x2c0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3f      	ldr	r2, [pc, #252]	@ (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1e8>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e88 <HAL_GPIO_Init+0x2c8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1e4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	@ (8000e8c <HAL_GPIO_Init+0x2cc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1e0>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e004      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dbe:	492f      	ldr	r1, [pc, #188]	@ (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	492c      	ldr	r1, [pc, #176]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	608b      	str	r3, [r1, #8]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4928      	ldr	r1, [pc, #160]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e00:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	4922      	ldr	r1, [pc, #136]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60cb      	str	r3, [r1, #12]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	491e      	ldr	r1, [pc, #120]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e28:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4918      	ldr	r1, [pc, #96]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4914      	ldr	r1, [pc, #80]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d021      	beq.n	8000e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	490e      	ldr	r1, [pc, #56]	@ (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	600b      	str	r3, [r1, #0]
 8000e5c:	e021      	b.n	8000ea2 <HAL_GPIO_Init+0x2e2>
 8000e5e:	bf00      	nop
 8000e60:	10320000 	.word	0x10320000
 8000e64:	10310000 	.word	0x10310000
 8000e68:	10220000 	.word	0x10220000
 8000e6c:	10210000 	.word	0x10210000
 8000e70:	10120000 	.word	0x10120000
 8000e74:	10110000 	.word	0x10110000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40011400 	.word	0x40011400
 8000e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4909      	ldr	r1, [pc, #36]	@ (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f47f ae8e 	bne.w	8000bd4 <HAL_GPIO_Init+0x14>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	372c      	adds	r7, #44	@ 0x2c
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e12b      	b.n	8001132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d106      	bne.n	8000ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fa30 	bl	8000354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2224      	movs	r2, #36	@ 0x24
 8000ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f2c:	f001 f842 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8000f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4a81      	ldr	r2, [pc, #516]	@ (800113c <HAL_I2C_Init+0x274>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d807      	bhi.n	8000f4c <HAL_I2C_Init+0x84>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a80      	ldr	r2, [pc, #512]	@ (8001140 <HAL_I2C_Init+0x278>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	bf94      	ite	ls
 8000f44:	2301      	movls	r3, #1
 8000f46:	2300      	movhi	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	e006      	b.n	8000f5a <HAL_I2C_Init+0x92>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001144 <HAL_I2C_Init+0x27c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	bf94      	ite	ls
 8000f54:	2301      	movls	r3, #1
 8000f56:	2300      	movhi	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0e7      	b.n	8001132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4a78      	ldr	r2, [pc, #480]	@ (8001148 <HAL_I2C_Init+0x280>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a6a      	ldr	r2, [pc, #424]	@ (800113c <HAL_I2C_Init+0x274>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d802      	bhi.n	8000f9c <HAL_I2C_Init+0xd4>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	e009      	b.n	8000fb0 <HAL_I2C_Init+0xe8>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	4a69      	ldr	r2, [pc, #420]	@ (800114c <HAL_I2C_Init+0x284>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	099b      	lsrs	r3, r3, #6
 8000fae:	3301      	adds	r3, #1
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000fc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	495c      	ldr	r1, [pc, #368]	@ (800113c <HAL_I2C_Init+0x274>)
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	d819      	bhi.n	8001004 <HAL_I2C_Init+0x13c>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1e59      	subs	r1, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fde:	1c59      	adds	r1, r3, #1
 8000fe0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fe4:	400b      	ands	r3, r1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <HAL_I2C_Init+0x138>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1e59      	subs	r1, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffe:	e051      	b.n	80010a4 <HAL_I2C_Init+0x1dc>
 8001000:	2304      	movs	r3, #4
 8001002:	e04f      	b.n	80010a4 <HAL_I2C_Init+0x1dc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d111      	bne.n	8001030 <HAL_I2C_Init+0x168>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6859      	ldr	r1, [r3, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	440b      	add	r3, r1
 800101a:	fbb0 f3f3 	udiv	r3, r0, r3
 800101e:	3301      	adds	r3, #1
 8001020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	e012      	b.n	8001056 <HAL_I2C_Init+0x18e>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1e58      	subs	r0, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	0099      	lsls	r1, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	fbb0 f3f3 	udiv	r3, r0, r3
 8001046:	3301      	adds	r3, #1
 8001048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_Init+0x196>
 800105a:	2301      	movs	r3, #1
 800105c:	e022      	b.n	80010a4 <HAL_I2C_Init+0x1dc>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10e      	bne.n	8001084 <HAL_I2C_Init+0x1bc>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1e58      	subs	r0, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6859      	ldr	r1, [r3, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	440b      	add	r3, r1
 8001074:	fbb0 f3f3 	udiv	r3, r0, r3
 8001078:	3301      	adds	r3, #1
 800107a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001082:	e00f      	b.n	80010a4 <HAL_I2C_Init+0x1dc>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1e58      	subs	r0, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	0099      	lsls	r1, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	6809      	ldr	r1, [r1, #0]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69da      	ldr	r2, [r3, #28]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80010d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6911      	ldr	r1, [r2, #16]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68d2      	ldr	r2, [r2, #12]
 80010de:	4311      	orrs	r1, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	000186a0 	.word	0x000186a0
 8001140:	001e847f 	.word	0x001e847f
 8001144:	003d08ff 	.word	0x003d08ff
 8001148:	431bde83 	.word	0x431bde83
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	817b      	strh	r3, [r7, #10]
 8001162:	460b      	mov	r3, r1
 8001164:	813b      	strh	r3, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800116a:	f7ff fc17 	bl	800099c <HAL_GetTick>
 800116e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b20      	cmp	r3, #32
 800117a:	f040 80d9 	bne.w	8001330 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2319      	movs	r3, #25
 8001184:	2201      	movs	r2, #1
 8001186:	496d      	ldr	r1, [pc, #436]	@ (800133c <HAL_I2C_Mem_Write+0x1ec>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 f971 	bl	8001470 <I2C_WaitOnFlagUntilTimeout>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001194:	2302      	movs	r3, #2
 8001196:	e0cc      	b.n	8001332 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_I2C_Mem_Write+0x56>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e0c5      	b.n	8001332 <HAL_I2C_Mem_Write+0x1e2>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d007      	beq.n	80011cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2221      	movs	r2, #33	@ 0x21
 80011e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2240      	movs	r2, #64	@ 0x40
 80011e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a3a      	ldr	r2, [r7, #32]
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001202:	b29a      	uxth	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4a4d      	ldr	r2, [pc, #308]	@ (8001340 <HAL_I2C_Mem_Write+0x1f0>)
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800120e:	88f8      	ldrh	r0, [r7, #6]
 8001210:	893a      	ldrh	r2, [r7, #8]
 8001212:	8979      	ldrh	r1, [r7, #10]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	4603      	mov	r3, r0
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f890 	bl	8001344 <I2C_RequestMemoryWrite>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d052      	beq.n	80012d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e081      	b.n	8001332 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 fa36 	bl	80016a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00d      	beq.n	800125a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	2b04      	cmp	r3, #4
 8001244:	d107      	bne.n	8001256 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001254:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e06b      	b.n	8001332 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001274:	3b01      	subs	r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001280:	b29b      	uxth	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b04      	cmp	r3, #4
 8001296:	d11b      	bne.n	80012d0 <HAL_I2C_Mem_Write+0x180>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800129c:	2b00      	cmp	r3, #0
 800129e:	d017      	beq.n	80012d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29a      	uxth	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1aa      	bne.n	800122e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fa29 	bl	8001734 <I2C_WaitOnBTFFlagUntilTimeout>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00d      	beq.n	8001304 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d107      	bne.n	8001300 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e016      	b.n	8001332 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2220      	movs	r2, #32
 8001318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	e000      	b.n	8001332 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001330:	2302      	movs	r3, #2
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	00100002 	.word	0x00100002
 8001340:	ffff0000 	.word	0xffff0000

08001344 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800136c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	2200      	movs	r2, #0
 8001376:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f878 	bl	8001470 <I2C_WaitOnFlagUntilTimeout>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00d      	beq.n	80013a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001394:	d103      	bne.n	800139e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800139c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e05f      	b.n	8001462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013a2:	897b      	ldrh	r3, [r7, #10]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80013b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	6a3a      	ldr	r2, [r7, #32]
 80013b6:	492d      	ldr	r1, [pc, #180]	@ (800146c <I2C_RequestMemoryWrite+0x128>)
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f8d3 	bl	8001564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e04c      	b.n	8001462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f95e 	bl	80016a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00d      	beq.n	800140a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d107      	bne.n	8001406 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e02b      	b.n	8001462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001410:	893b      	ldrh	r3, [r7, #8]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	e021      	b.n	8001460 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800141c:	893b      	ldrh	r3, [r7, #8]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	b29b      	uxth	r3, r3
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142c:	6a39      	ldr	r1, [r7, #32]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 f938 	bl	80016a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00d      	beq.n	8001456 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	2b04      	cmp	r3, #4
 8001440:	d107      	bne.n	8001452 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e005      	b.n	8001462 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	00010002 	.word	0x00010002

08001470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001480:	e048      	b.n	8001514 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d044      	beq.n	8001514 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148a:	f7ff fa87 	bl	800099c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d302      	bcc.n	80014a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d139      	bne.n	8001514 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	0c1b      	lsrs	r3, r3, #16
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d10d      	bne.n	80014c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	43da      	mvns	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	4013      	ands	r3, r2
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	e00c      	b.n	80014e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	43da      	mvns	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	4013      	ands	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d116      	bne.n	8001514 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e023      	b.n	800155c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10d      	bne.n	800153a <I2C_WaitOnFlagUntilTimeout+0xca>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	43da      	mvns	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4013      	ands	r3, r2
 800152a:	b29b      	uxth	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	e00c      	b.n	8001554 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	43da      	mvns	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	4013      	ands	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	429a      	cmp	r2, r3
 8001558:	d093      	beq.n	8001482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001572:	e071      	b.n	8001658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001582:	d123      	bne.n	80015cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001592:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800159c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f043 0204 	orr.w	r2, r3, #4
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e067      	b.n	800169c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d2:	d041      	beq.n	8001658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d4:	f7ff f9e2 	bl	800099c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d302      	bcc.n	80015ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d136      	bne.n	8001658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4013      	ands	r3, r2
 8001600:	b29b      	uxth	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e00b      	b.n	8001626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	43da      	mvns	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4013      	ands	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2220      	movs	r2, #32
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	f043 0220 	orr.w	r2, r3, #32
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e021      	b.n	800169c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10c      	bne.n	800167c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	43da      	mvns	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	4013      	ands	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e00b      	b.n	8001694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4013      	ands	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	f47f af6d 	bne.w	8001574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016b0:	e034      	b.n	800171c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f886 	bl	80017c4 <I2C_IsAcknowledgeFailed>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e034      	b.n	800172c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d028      	beq.n	800171c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ca:	f7ff f967 	bl	800099c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d302      	bcc.n	80016e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d11d      	bne.n	800171c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ea:	2b80      	cmp	r3, #128	@ 0x80
 80016ec:	d016      	beq.n	800171c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e007      	b.n	800172c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	2b80      	cmp	r3, #128	@ 0x80
 8001728:	d1c3      	bne.n	80016b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001740:	e034      	b.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f83e 	bl	80017c4 <I2C_IsAcknowledgeFailed>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e034      	b.n	80017bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d028      	beq.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800175a:	f7ff f91f 	bl	800099c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d302      	bcc.n	8001770 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11d      	bne.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b04      	cmp	r3, #4
 800177c:	d016      	beq.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e007      	b.n	80017bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d1c3      	bne.n	8001742 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017da:	d11b      	bne.n	8001814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f043 0204 	orr.w	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e272      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8087 	beq.w	800194e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001840:	4b92      	ldr	r3, [pc, #584]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00c      	beq.n	8001866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800184c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d112      	bne.n	800187e <HAL_RCC_OscConfig+0x5e>
 8001858:	4b8c      	ldr	r3, [pc, #560]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d06c      	beq.n	800194c <HAL_RCC_OscConfig+0x12c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d168      	bne.n	800194c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e24c      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x76>
 8001888:	4b80      	ldr	r3, [pc, #512]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e02e      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x98>
 800189e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7a      	ldr	r2, [pc, #488]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b78      	ldr	r3, [pc, #480]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a77      	ldr	r2, [pc, #476]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xbc>
 80018c2:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a71      	ldr	r2, [pc, #452]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 80018dc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b68      	ldr	r3, [pc, #416]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a67      	ldr	r2, [pc, #412]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f84e 	bl	800099c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f84a 	bl	800099c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e200      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b5d      	ldr	r3, [pc, #372]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xe4>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff f83a 	bl	800099c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f836 	bl	800099c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1ec      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x10c>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001966:	4b49      	ldr	r3, [pc, #292]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x18c>
 8001972:	4b46      	ldr	r3, [pc, #280]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1c0      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4939      	ldr	r1, [pc, #228]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e03a      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b36      	ldr	r3, [pc, #216]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7fe ffef 	bl	800099c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c2:	f7fe ffeb 	bl	800099c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1a1      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4927      	ldr	r1, [pc, #156]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe ffce 	bl	800099c <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7fe ffca 	bl	800099c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e180      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03a      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7fe ffae 	bl	800099c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7fe ffaa 	bl	800099c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e160      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 faba 	bl	8001fdc <RCC_Delay>
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7fe ff94 	bl	800099c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	e00f      	b.n	8001a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7fe ff90 	bl	800099c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d908      	bls.n	8001a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e146      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	42420000 	.word	0x42420000
 8001a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4b92      	ldr	r3, [pc, #584]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e9      	bne.n	8001a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a6 	beq.w	8001bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a87      	ldr	r2, [pc, #540]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b85      	ldr	r3, [pc, #532]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7fe ff51 	bl	800099c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7fe ff4d 	bl	800099c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	@ 0x64
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e103      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b75      	ldr	r3, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x312>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e02d      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x334>
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b67      	ldr	r3, [pc, #412]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a66      	ldr	r2, [pc, #408]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	e01c      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x356>
 8001b5c:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a60      	ldr	r2, [pc, #384]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b58      	ldr	r3, [pc, #352]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a57      	ldr	r2, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d015      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7fe ff01 	bl	800099c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7fe fefd 	bl	800099c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0b1      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ee      	beq.n	8001b9e <HAL_RCC_OscConfig+0x37e>
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7fe feeb 	bl	800099c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe fee7 	bl	800099c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e09b      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be0:	4b40      	ldr	r3, [pc, #256]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ee      	bne.n	8001bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d061      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d146      	bne.n	8001caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7fe febb 	bl	800099c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe feb7 	bl	800099c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e06d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4921      	ldr	r1, [pc, #132]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a19      	ldr	r1, [r3, #32]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	430b      	orrs	r3, r1
 8001c76:	491b      	ldr	r1, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe fe8b 	bl	800099c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe fe87 	bl	800099c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x46a>
 8001ca8:	e035      	b.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fe74 	bl	800099c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe fe70 	bl	800099c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e026      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x498>
 8001cd6:	e01e      	b.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e019      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_OscConfig+0x500>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0d0      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4965      	ldr	r1, [pc, #404]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b63      	ldr	r3, [pc, #396]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b8      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a58      	ldr	r2, [pc, #352]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b53      	ldr	r3, [pc, #332]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b50      	ldr	r3, [pc, #320]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494d      	ldr	r1, [pc, #308]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d040      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e073      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4936      	ldr	r1, [pc, #216]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7fe fdc2 	bl	800099c <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7fe fdbe 	bl	800099c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e053      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d210      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4922      	ldr	r1, [pc, #136]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4916      	ldr	r1, [pc, #88]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490e      	ldr	r1, [pc, #56]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f821 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	490a      	ldr	r1, [pc, #40]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fd20 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08002094 	.word	0x08002094
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x30>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x36>
 8001f26:	e027      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	613b      	str	r3, [r7, #16]
      break;
 8001f2c:	e027      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0c9b      	lsrs	r3, r3, #18
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0c5b      	lsrs	r3, r3, #17
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e004      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	613b      	str	r3, [r7, #16]
      break;
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7e:	693b      	ldr	r3, [r7, #16]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	08002824 	.word	0x08002824
 8001f98:	08002834 	.word	0x08002834
 8001f9c:	003d0900 	.word	0x003d0900

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	080020a4 	.word	0x080020a4

08001fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <RCC_Delay+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <RCC_Delay+0x38>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff8:	bf00      	nop
  }
  while (Delay --);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <RCC_Delay+0x1c>
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000000 	.word	0x20000000
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <memset>:
 8002018:	4603      	mov	r3, r0
 800201a:	4402      	add	r2, r0
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	f803 1b01 	strb.w	r1, [r3], #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <__libc_init_array>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	2600      	movs	r6, #0
 800202c:	4d0c      	ldr	r5, [pc, #48]	@ (8002060 <__libc_init_array+0x38>)
 800202e:	4c0d      	ldr	r4, [pc, #52]	@ (8002064 <__libc_init_array+0x3c>)
 8002030:	1b64      	subs	r4, r4, r5
 8002032:	10a4      	asrs	r4, r4, #2
 8002034:	42a6      	cmp	r6, r4
 8002036:	d109      	bne.n	800204c <__libc_init_array+0x24>
 8002038:	f000 f81a 	bl	8002070 <_init>
 800203c:	2600      	movs	r6, #0
 800203e:	4d0a      	ldr	r5, [pc, #40]	@ (8002068 <__libc_init_array+0x40>)
 8002040:	4c0a      	ldr	r4, [pc, #40]	@ (800206c <__libc_init_array+0x44>)
 8002042:	1b64      	subs	r4, r4, r5
 8002044:	10a4      	asrs	r4, r4, #2
 8002046:	42a6      	cmp	r6, r4
 8002048:	d105      	bne.n	8002056 <__libc_init_array+0x2e>
 800204a:	bd70      	pop	{r4, r5, r6, pc}
 800204c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002050:	4798      	blx	r3
 8002052:	3601      	adds	r6, #1
 8002054:	e7ee      	b.n	8002034 <__libc_init_array+0xc>
 8002056:	f855 3b04 	ldr.w	r3, [r5], #4
 800205a:	4798      	blx	r3
 800205c:	3601      	adds	r6, #1
 800205e:	e7f2      	b.n	8002046 <__libc_init_array+0x1e>
 8002060:	08002838 	.word	0x08002838
 8002064:	08002838 	.word	0x08002838
 8002068:	08002838 	.word	0x08002838
 800206c:	0800283c 	.word	0x0800283c

08002070 <_init>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr

0800207c <_fini>:
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	bf00      	nop
 8002080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002082:	bc08      	pop	{r3}
 8002084:	469e      	mov	lr, r3
 8002086:	4770      	bx	lr
